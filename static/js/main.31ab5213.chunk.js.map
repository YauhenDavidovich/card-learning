{"version":3,"sources":["components/utils/Controls/Select.module.css","reportWebVitals.ts","dal/authApi.ts","dal/initialize-api.ts","bll/app-reducer.ts","dal/profileApi.ts","bll/login-reducer.ts","ui/ui-header/Header.tsx","dal/restorePasswordApi.ts","bll/forgotPassword-reducer.ts","components/forgotPassword/ForgotPassword.tsx","components/login/Login.tsx","assets/profile-picture.png","components/profile/ProfileInfo.tsx","components/profile/ProfileDataForm.tsx","components/profile/Profile.tsx","bll/setNewPassword-reducer.ts","components/recoveryPassword/RecoveryPassword.tsx","dal/registration-api.ts","bll/registration-reducer.ts","components/registration/Registration.tsx","components/notFound/NotFound.tsx","components/forgotPassword/CheckEmail.tsx","components/utils/Controls/Search.tsx","dal/packsListApi.ts","bll/packs-reducer.ts","components/utils/Controls/PacksToggle.tsx","components/utils/ModalUpdatePack.tsx","components/utils/ModalDeletePack.tsx","components/PacksList/PacksTable.tsx","components/utils/Controls/ShowItemsPerPage.tsx","components/utils/Controls/DoubleRange.tsx","components/utils/Controls/AddPack.tsx","components/utils/Controls/PaginationPage.tsx","components/PacksList/PackLIstsContainer.tsx","dal/cardsListApi.ts","bll/cards-reducer.ts","components/utils/ModalUpdateCard.tsx","components/utils/ModalDeleteCard.tsx","components/PacksList/CardsTable.tsx","components/utils/Controls/SuperButton.tsx","components/utils/ModalAddCard.tsx","components/PacksList/CardLIstsContainer.tsx","components/PacksList/Learn.tsx","components/PacksList/LearnPage.tsx","components/utils/Preloader.tsx","components/PacksList/LearnPageContainer.tsx","ui/ui-main/Main.tsx","MyTheme.ts","App.tsx","bll/profile-reducer.ts","bll/store.ts","index.tsx","components/PacksList/Learn.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","process","withCredentials","authApi","data","post","delete","authAPI","initialState","status","setAppStatusAC","type","profileApi","put","isAuth","user","_id","email","name","avatar","publicCardPacksCount","created","Date","updated","isAdmin","verified","rememberMe","error","LOGIN","SETUSER","SetIsLoggedIn","SetUserAC","Header","dispatch","useDispatch","useSelector","state","login","className","to","Button","color","onClick","res","restorePasswordApi","IsRequestNewPasswordSent","message","IS_REQUEST_NEW_PASSWORD_SENT","SET_REQUEST_MESSAGE","setRequestMessage","requestForgotPasswordTC","from","checkIsRequestNewPasswordSent","catch","response","ForgotPassword","React","memo","isEmailRequestSend","forgot","responseError","emailSent","history","useNavigate","formik","useFormik","initialValues","validate","values","errors","test","onSubmit","resetForm","Grid","container","justifyContent","item","handleSubmit","FormControl","FormLabel","Box","component","sx","marginTop","marginBottom","style","textAlign","FormGroup","direction","alignItems","TextField","label","margin","placeholder","getFieldProps","touched","variant","Login","password","err","padding","value","onChange","handleChange","onBlur","handleBlur","FormControlLabel","control","Checkbox","Link","RouterLink","ProfileInfo","props","maxWidth","maxHeight","src","defaultPhotoProfile","UpdateProfileData","fullName","updatedUser","offEditMode","Profile","useState","editProfile","setEditProfile","ProfileDataForm","offEditModeHandler","isNewPasswordSet","SET_NEW_PASSWORD","RecoveryPassword","isNewPasswordSend","newPassword","token","useParams","length","resetPasswordToken","info","isPasswordSet","Container","background","height","borderRadius","spacing","display","flexDirection","width","id","alignSelf","boxShadow","registrationAPI","isRegistered","Registration","confirmPassword","alert","Main","CheckEmail","Search","searchTerm","setSearchTerm","useEffect","delayDebounceFn","setTimeout","getSearchResult","clearTimeout","e","target","searchResult","title","packsListAPI","params","get","pack","packId","cardsPack","InitialState","cardPacks","user_id","cardsCount","cardPacksTotalCount","maxCardsCount","minCardsCount","packsParams","max","min","page","pageCount","sortPacks","packName","GET_PACKS","SET_SORT_VALUE","SET_PACKS_PAGE","SET_PACKS_CARD_RANGE","SET_PACKS_CARD_OWNER_FILTER","SET_PACKS_SEARCH_NAME","SET_PAGE_COUNT","DELETE_PACK","SetPacksCardOwnerFilterAC","owner","getPacksTC","getState","sortValue","packs","undefined","GetPacksAC","PacksToggle","packOwner","setPackOwner","ToggleButtonGroup","size","exclusive","event","aria-label","ToggleButton","ModalUpdatePack","packUserId","filter","c","userId","open","setOpen","setPackName","handleClose","IconButton","opacity","disabled","Dialog","onClose","DialogTitle","DialogContent","autoFocus","fullWidth","currentTarget","DialogActions","ModalDeletePack","packUserID","PacksTable","setName","setCardsCount","setCreated","setUpdated","nav","sort","sortName","onSortHandler","styleHeaderButton","styleActionsButton","marginLeft","styleHeader","backgroundColor","dateOptions","weekday","year","month","day","hour","minute","TableContainer","Paper","Table","stickyHeader","TableHead","TableRow","TableCell","align","TableBody","map","row","index","border","scope","textOverflow","overflow","toLocaleDateString","cardsId","ShowItemsPerPage","setCards","styles","select","minWidth","InputLabel","Select","labelId","toString","setPageCount","MenuItem","DoubleRange","setValue","Slider","onChangeCommitted","newValue","valueLabelDisplay","AddPack","PaginationPage","pagesCount","Math","ceil","itemTotalCount","Stack","Pagination","currentPage","changePage","count","PacksListsContainer","packsAmount","cardsApi","card","cardId","InitialCardsState","cards","answer","question","cardsPack_id","grade","shots","maxGrade","minGrade","cardsParams","sortCards","cardAnswer","cardQuestion","GET_CARDS","SET_CARDS_SORT_VALUE","SET_CARDS_PAGE","SET_CARDS_PAGE_COUNT","SET_CARDS_PACK_ID","SET_CARDS_SEARCH_NAME","SET_CARD_ID","getCardsTC","cardsPackId","GetCardsAC","ModalUpdateCard","cardUserId","setQuestion","setAnswer","ModalDeleteCard","CardsTable","minHeight","wordWrap","substring","Rating","readOnly","SuperButton","callback","ModalAddCard","CardListsContainer","Learn","app","showAnswer","setShowAnswer","gradeChoose","setGradeChoose","gradesObj","learnBlock","questionBlock","answerBlock","radioBlock","gradesBlock","RadioGroup","defaultValue","grades","Radio","buttonBlock","answerCardTC","card_id","LearnPage","newArray","setNewArray","newData","arr","newArr","i","floor","random","push","getRandomCard","Preloader","position","top","CircularProgress","LearnPageContainer","totalCardsAmount","path","element","NotFound","createTheme","palette","primary","main","contrastText","secondary","App","isLoading","theme","MyTheme","rootReducer","combineReducers","action","registration","profile","cardPack","cardsTotalCount","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.31ab5213.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"Select_select__DpgNI\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios, { AxiosResponse } from 'axios'\r\n\r\n\r\nexport type LoginParamsType={\r\n    email:string\r\n    password: string\r\n}\r\n\r\nconst instance = axios.create({\r\n    // baseURL: \"https://neko-back.herokuapp.com/2.0\",\r\n    baseURL: process.env.REACT_APP_API_PATH,\r\n    withCredentials: true,\r\n})\r\n\r\nexport const authApi = {\r\n    logIn(data:LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseUserType>>('/auth/login',data)\r\n    },\r\n    logOut(){\r\n        return instance.delete('/auth/me')\r\n    }\r\n}\r\n\r\nexport type ResponseUserType = {\r\n    _id:string\r\n    email:string\r\n    name:string\r\n    avatar?:string\r\n    publicCardPacksCount: number\r\n    created: Date\r\n    updated: Date\r\n    isAdmin: boolean\r\n    verified: boolean\r\n    rememberMe: boolean\r\n    error?: string\r\n}\r\n","import axios, {AxiosResponse} from \"axios\"\r\n\r\nconst instance = axios.create({\r\n    // baseURL: \"https://neko-back.herokuapp.com/2.0\",\r\n    baseURL: process.env.REACT_APP_API_PATH,\r\n    withCredentials: true,\r\n})\r\n\r\n\r\nexport const authAPI = {\r\n    me(){\r\n        return instance.post('auth/me')\r\n    }\r\n}\r\n","import {authAPI} from \"../dal/initialize-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {SetIsLoggedIn, SetUserAC} from \"./login-reducer\";\r\n\r\nconst initialState = {\r\n    status: \"loading\" as RequestStatusType\r\n};\r\n\r\nexport type AppInitialStateType = typeof initialState;\r\n\r\n//Reducer\r\nexport const appReducer = (state = initialState, action: ActionsType): AppInitialStateType => {\r\n    switch (action.type) {\r\n        case \"APP/SET-STATUS\":\r\n            return {...state, status: action.status}\r\n\r\n        default:\r\n            return {...state}\r\n    }\r\n};\r\n\r\n\r\n// Action Creators\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: \"APP/SET-STATUS\", status} as const)\r\nexport const setIsInitializedAC = (isInitialazed: boolean) => ({type: \"APP/INITIALAZE\", isInitialazed} as const)\r\n\r\n//thunks\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.me()\r\n        .then(res => {\r\n            dispatch(SetIsLoggedIn(true))\r\n            dispatch(SetUserAC(res.data))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n    })\r\n        .catch(()=> {\r\n            dispatch(SetIsLoggedIn(false))\r\n            dispatch(setAppStatusAC(\"failed\"))\r\n        })\r\n}\r\n\r\n\r\n//types\r\nexport type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\"\r\n\r\n\r\ntype ActionsType =\r\n    | SetAppStatusActionType\r\n    | SetAppInitialazeActionType\r\n\r\n\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppInitialazeActionType = ReturnType<typeof setIsInitializedAC>\r\n\r\n\r\n","import axios, {AxiosResponse} from \"axios\"\r\nimport {ResponseUserType} from \"./authApi\";\r\n\r\n\r\nexport type ProfileDataParamsType = {\r\n    name: string\r\n    avatar?: string\r\n}\r\n\r\nconst instance = axios.create({\r\n    // baseURL: \"https://neko-back.herokuapp.com/2.0\",\r\n    baseURL: process.env.REACT_APP_API_PATH,\r\n    withCredentials: true,\r\n})\r\n\r\nexport const profileApi = {\r\n    getProfileData(){\r\n        return instance.get<ResponseUserType>(\"/auth/me\")\r\n    }\r\n    ,\r\n    updateProfileData(data: ProfileDataParamsType) {\r\n        return instance.put<ProfileDataParamsType, AxiosResponse<ResponseUserType>>(\"/auth/me\", data)\r\n    },\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {authApi, LoginParamsType, ResponseUserType} from \"../dal/authApi\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\nimport {profileApi, ProfileDataParamsType} from \"../dal/profileApi\";\r\n\r\nlet initialState:LoginInitialStateType = {\r\n    isAuth: false,\r\n    user: {\r\n        _id:'',\r\n        email:'',\r\n        name:'',\r\n        avatar:'',\r\n        publicCardPacksCount: 0,\r\n        created: new Date,\r\n        updated: new Date,\r\n        isAdmin: false,\r\n        verified: false,\r\n        rememberMe: false,\r\n        error: ''\r\n    }\r\n};\r\n\r\nexport type LoginInitialStateType = {\r\n    isAuth: boolean\r\n    user: ResponseUserType\r\n}\r\n\r\n//Reducer\r\nexport const loginReducer = (state:LoginInitialStateType = initialState, action: ActionsTypes): LoginInitialStateType => {\r\n    switch (action.type) {\r\n        case LOGIN:\r\n            return {\r\n                ...state,\r\n                isAuth: action.isAuth,\r\n            }\r\n        case SETUSER:\r\n            return {\r\n                ...state,\r\n                user: action.data\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// actions\r\nconst LOGIN = 'card-learning/login/LOG-IN';\r\nconst SETUSER = 'card-learning/login/SET-USER';\r\n\r\n// Action Creators\r\nexport const SetIsLoggedIn = (isAuth: boolean) => ({\r\n    type: LOGIN,\r\n    isAuth,\r\n} as const);\r\n\r\nexport const SetUserAC = (data:ResponseUserType) => ({\r\n    type: SETUSER,\r\n    data,\r\n} as const);\r\n\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    authApi.logIn(data)\r\n        .then(res => {\r\n            dispatch(SetIsLoggedIn(true))\r\n            dispatch(SetUserAC(res.data))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n        .catch(err => {\r\n            dispatch(setAppStatusAC(\"failed\"))\r\n        })\r\n}\r\n\r\nexport const logOutTC=()=>(dispatch: Dispatch)=>{\r\n     authApi.logOut()\r\n        .then(res => {\r\n            dispatch(SetIsLoggedIn(false))\r\n            dispatch(SetUserAC(res.data))\r\n        })}\r\n\r\n\r\nexport const updateProfileDataTC = (data: ProfileDataParamsType) => (dispatch: Dispatch) => {\r\n    profileApi.updateProfileData(data)\r\n        .then((res) => {\r\n            //@ts-ignore\r\n            dispatch(SetUserAC(res.data.updatedUser))\r\n        })\r\n}\r\n\r\nexport type SetUserType = ReturnType<typeof SetUserAC>\r\nexport type SetIsLoggedInType = ReturnType<typeof SetIsLoggedIn>;\r\ntype ActionsTypes = SetIsLoggedInType | SetUserType\r\n","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {logOutTC} from \"../../bll/login-reducer\";\r\nimport Button from \"@mui/material/Button\";\r\n\r\nconst Header = () => {\r\n    const dispatch = useDispatch()\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.login.isAuth)\r\n    function handleLogout() {\r\n        dispatch(logOutTC())\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={\"header\"}>\r\n            <NavLink to=\"/profile\">Profile</NavLink>\r\n            <NavLink to=\"/packs-list\">Packs List</NavLink>\r\n            {isAuth && <Button color='inherit' onClick={handleLogout}>Logout</Button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    // baseURL: \"https://neko-back.herokuapp.com/2.0\",\r\n    baseURL: process.env.REACT_APP_API_PATH,\r\n    withCredentials: true\r\n});\r\n\r\nexport const restorePasswordApi = {\r\n\r\n    requestForgotPassword(data: ForgotRequestDataType) {\r\n        return instance.post<CheckEmailResponseType>('auth/forgot', data )\r\n    },\r\n    setNewPassword(data: NewPasswordRequestType) {\r\n        return instance.post<NewPasswordResponseType>('auth/set-new-password', data)\r\n    }\r\n}\r\n\r\nexport type ForgotRequestDataType = {\r\n    email: string\r\n    from: string\r\n    message: string\r\n}\r\n\r\nexport type CheckEmailResponseType = {\r\n    info: string | null\r\n    answer: boolean\r\n    html: boolean\r\n    success: boolean\r\n}\r\n\r\nexport type NewPasswordRequestType = {\r\n    password: string\r\n    resetPasswordToken: string\r\n}\r\n\r\nexport type NewPasswordResponseType = {\r\n    info: string\r\n    error: string\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {restorePasswordApi} from \"../dal/restorePasswordApi\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\n\r\nlet initialState = {\r\n    IsRequestNewPasswordSent: false,\r\n    email: \"\",\r\n    message: null as string | null\r\n\r\n};\r\n\r\nexport type LoginInitialStateType = typeof initialState;\r\n\r\n//Reducer\r\nexport const forgotPasswordReducer = (state = initialState, action: ActionTypes): LoginInitialStateType => {\r\n    switch (action.type) {\r\n        case IS_REQUEST_NEW_PASSWORD_SENT :\r\n            return {...state, email: action.email, IsRequestNewPasswordSent: action.IsRequestNewPasswordSent}\r\n        case SET_REQUEST_MESSAGE:\r\n            return {...state, message: action.message}\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// actions\r\nconst IS_REQUEST_NEW_PASSWORD_SENT = 'card-learning/forgot/IS_REQUEST_NEW_PASSWORD_SENT';\r\nconst SET_REQUEST_MESSAGE = 'card-learning/forgot/SET_MESSAGE';\r\n\r\n// action Creators\r\nexport const checkIsRequestNewPasswordSent = (email: string, IsRequestNewPasswordSent: boolean) => ({\r\n    type: IS_REQUEST_NEW_PASSWORD_SENT,\r\n    email,\r\n    IsRequestNewPasswordSent\r\n} as const);\r\nexport const setRequestMessage = (message: string | null) => ({type: SET_REQUEST_MESSAGE, message} as const);\r\n\r\n//thunks\r\nexport const requestForgotPasswordTC = (email: string, from: string, message: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    restorePasswordApi.requestForgotPassword({email, from, message})\r\n        .then(res => {\r\n                    dispatch(checkIsRequestNewPasswordSent(email,true))\r\n                    dispatch(setRequestMessage(\"Check your email please\"))\r\n                    dispatch(setAppStatusAC(\"succeeded\"))\r\n            }\r\n        )\r\n        .catch(error => {\r\n            dispatch(setRequestMessage(error.response ? error.response.data.error : error.message + \"more details in the console\"));\r\n            dispatch(setAppStatusAC(\"failed\"))\r\n        })\r\n\r\n\r\n}\r\n\r\n\r\n// type ActionsTypes =\r\nexport type CheckIsRequestNewPasswordSentType = ReturnType<typeof checkIsRequestNewPasswordSent>;\r\nexport type SetRequestMessageType = ReturnType<typeof setRequestMessage>;\r\nexport type ActionTypes = CheckIsRequestNewPasswordSentType | SetRequestMessageType;\r\n","import React from \"react\";\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {Navigate, useNavigate} from \"react-router-dom\";\r\nimport {requestForgotPasswordTC} from \"../../bll/forgotPassword-reducer\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n\r\n\r\ntype ForgotProps = {}\r\ntype FormikErrorType = {\r\n    email?: string\r\n}\r\n\r\nconst ForgotPassword: React.FC<ForgotProps> = React.memo(() => {\r\n\r\n    const isEmailRequestSend = useSelector<AppStateType, boolean>(state => state.forgot.IsRequestNewPasswordSent);\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.login.isAuth)\r\n    const responseError = useSelector<AppStateType, string | null>(state => state.forgot.message)\r\n    const dispatch = useDispatch();\r\n    const emailSent = useSelector<AppStateType, string>(state => state.forgot.email)\r\n\r\n\r\n    const message =\r\n        `<div style=\"background-color: lime; padding: 15px\">\r\n            password recovery link:\r\n            <a href=\"https://yauhendavidovich.github.io/card-learning/#/recovery-password/$token$\">link</a> \r\n          </div>`\r\n\r\n    const history = useNavigate();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Please type your email!\";\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\";\r\n            }\r\n            return errors;\r\n\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(requestForgotPasswordTC(values.email, \"davidovich336@gmail.com\", message))\r\n            formik.resetForm()\r\n        },\r\n    });\r\n\r\n\r\n\r\n    if (isEmailRequestSend) {\r\n        return <Navigate to={\"/check-email/\"+emailSent}/>\r\n    }\r\n    if (isAuth) {\r\n        return <Navigate to={\"/profile\"}/>\r\n    }\r\n\r\n    return (\r\n        <div className={\"main\"}>\r\n            <div className=\"mainBlock authBlock\">\r\n                <Grid container justifyContent={\"center\"}>\r\n                    <Grid item justifyContent={\"center\"}>\r\n                        <form onSubmit={formik.handleSubmit}>\r\n                            <FormControl>\r\n                                <FormLabel>\r\n                                    <Box component=\"span\" sx={{marginTop: \"20px\", marginBottom: \"10px\"}}>\r\n                                        <h2 style={{textAlign: \"center\"}}>Forgot your password?</h2>\r\n                                    </Box>\r\n                                </FormLabel>\r\n\r\n                                <FormGroup>\r\n                                    <Grid container justifyContent={\"space-between\"} direction={\"column\"}\r\n                                          alignItems={\"center\"}>\r\n                                        <TextField type=\"email\" label=\"Email\"\r\n                                                   margin=\"normal\"\r\n                                                   color={\"primary\"}\r\n                                                   placeholder={\"Email\"}\r\n                                                   {...formik.getFieldProps(\"email\")}\r\n                                        />\r\n                                        {formik.touched.email && formik.errors.email &&\r\n                                        <div style={{color: \"red\"}}>{formik.errors.email}</div>}\r\n                                        {responseError && <div style={{color: \"red\"}}>{responseError}</div>}\r\n\r\n                                        <Grid container justifyContent={\"center\"}>\r\n                                            <Grid item justifyContent={\"center\"}>\r\n                                                <h4>Enter your email address and we will send you further\r\n                                                    instructions</h4>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Button variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                type=\"submit\"\r\n                                            // disabled={forgotStatus === \"loading\"}\r\n                                        >Send Instructions</Button>\r\n                                        <Box>\r\n                                            <h4>Did you remember your password?</h4>\r\n                                        </Box>\r\n                                        <Button variant=\"contained\"\r\n                                                color=\"secondary\"\r\n                                            // disabled={forgotStatus === \"loading\"}\r\n                                                onClick={() => {\r\n                                                    history(\"/login\")\r\n                                                }}>Try logging in\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </FormGroup>\r\n                            </FormControl>\r\n                        </form>\r\n\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\n\r\nexport default ForgotPassword;\r\n;\r\n","import {useFormik} from 'formik';\r\nimport React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport Grid from '@mui/material/Grid';\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from '@material-ui/core/Button';\r\nimport {Link as RouterLink, Navigate, useNavigate} from 'react-router-dom';\r\nimport {loginTC} from \"../../bll/login-reducer\";\r\nimport {Checkbox, Link} from \"@material-ui/core\";\r\nimport {FormControlLabel} from \"@mui/material\";\r\n\r\n\r\nconst Login = () => {\r\n    const history = useNavigate()\r\n    const dispatch = useDispatch()\r\n    const isAuth = useSelector<AppStateType>(state => state.login.isAuth)\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'required fill';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'password must have'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        }\r\n    });\r\n    if (isAuth) {\r\n        return <Navigate to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <div className='main'>\r\n            <div className='mainBlock authBlock'>\r\n                <Grid container justifyContent={\"center\"}>\r\n                    <Grid item justifyContent={\"center\"}>\r\n                        <form onSubmit={formik.handleSubmit}>\r\n                            <FormControl>\r\n                                <FormLabel>\r\n                                    <h2 style={{padding: '20px'}}>SIGN-IN</h2>\r\n                                </FormLabel>\r\n                                <FormGroup>\r\n                                    <Grid container justifyContent={\"center\"} direction={\"column\"}>\r\n\r\n                                        <TextField label='Email'\r\n                                                   margin='normal'\r\n                                                   {...formik.getFieldProps('email')}\r\n                                                   value={formik.values.email}\r\n                                                   onChange={formik.handleChange}\r\n                                                   onBlur={formik.handleBlur}/>\r\n                                        {formik.touched.email && formik.errors.email\r\n                                            ? <div style={{color: 'red'}}>\r\n                                                {formik.errors.email}\r\n                                            </div> : null}\r\n                                        <TextField type='password'\r\n                                                   label='Password'\r\n                                                   margin='normal'\r\n                                                   {...formik.getFieldProps('password')}\r\n                                                   value={formik.values.password}\r\n                                                   onChange={formik.handleChange}\r\n                                                   onBlur={formik.handleBlur}/>\r\n                                        {formik.touched.password && formik.errors.password\r\n                                            ? <div style={{color: 'red'}}>\r\n                                                {formik.errors.password}\r\n                                            </div>\r\n                                            : null}\r\n                                        <FormControlLabel\r\n                                            label={'Remember me'}\r\n                                            control={<Checkbox\r\n                                                name=\"rememberMe\"\r\n                                                onChange={formik.handleChange}\r\n                                                value={formik.values.rememberMe}\r\n                                            />}\r\n                                        />\r\n                                        <Link component={RouterLink} to=\"/forgot-password\" color=\"secondary\">\r\n                                            {'Forgot Password'}\r\n                                        </Link>\r\n                                        <Button color={'primary'}\r\n                                                type={'submit'}\r\n                                                variant={'contained'}>\r\n\r\n                                            Login\r\n                                        </Button>\r\n                                        <div> Don`t have an account?</div>\r\n                                        <Button onClick={() => {\r\n                                            history('/registration')\r\n                                        }}\r\n                                                variant={'contained'}\r\n                                                color={'secondary'}\r\n                                        >Sign Up</Button>\r\n                                    </Grid>\r\n                                </FormGroup>\r\n                            </FormControl>\r\n                        </form>\r\n\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n","export default __webpack_public_path__ + \"static/media/profile-picture.e5117e8e.png\";","import React from \"react\";\r\nimport defaultPhotoProfile from \"../../assets/profile-picture.png\"\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    avatar: string | undefined\r\n    name: string\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\r\n\r\n    return (\r\n        <div >\r\n            <Grid container justifyContent={\"center\"}>\r\n                <Grid item justifyContent={\"center\"}>\r\n                    <div><img style={{maxWidth: \"150px\", maxHeight: \"150px\"}}\r\n                              src={props.avatar ? props.avatar : defaultPhotoProfile}/></div>\r\n                    <h3>{props.name}</h3>\r\n                    <h4>Front-end developer</h4>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo\r\n","import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\n\r\nimport defaultPhotoProfile from \"../../assets/profile-picture.png\";\r\nimport {updateProfileDataTC} from \"../../bll/login-reducer\";\r\n\r\ntype FormikErrorType = {\r\n    fullName?: string\r\n}\r\n\r\ntype UpdateProfileDataPropsType = {\r\n    offEditMode: (value: boolean) => void\r\n    avatar: string | undefined\r\n}\r\n\r\nconst UpdateProfileData = (props: UpdateProfileDataPropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            fullName: \"\",\r\n        },\r\n        onSubmit: values => {\r\n            if(values.fullName){\r\n                dispatch(updateProfileDataTC({name: values.fullName}))\r\n                formik.resetForm()\r\n                props.offEditMode(false)\r\n            }\r\n\r\n        },\r\n    });\r\n\r\n    const resetHandler = () => {\r\n        formik.resetForm()\r\n        props.offEditMode(false)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Grid container justifyContent={\"center\"}>\r\n                <Grid item justifyContent={\"center\"}>\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <FormControl>\r\n                            <FormLabel>\r\n                                <Grid container justifyContent={\"center\"}>\r\n                                    <Grid item justifyContent={\"center\"}>\r\n                                        <img style={{maxWidth: \"150px\", maxHeight: \"150px\"}}\r\n                                             src={props.avatar ? props.avatar :defaultPhotoProfile}/>\r\n                                        <Grid container justifyContent={\"center\"}>\r\n                                            <Grid item justifyContent={\"center\"}>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n\r\n                            </FormLabel>\r\n                            <FormGroup>\r\n                                <TextField label=\"Enter your name\"\r\n                                           margin=\"normal\" {...formik.getFieldProps(\"fullName\")}/>\r\n                                {formik.touched.fullName && formik.errors.fullName &&\r\n                                <div style={{color: \"red\"}}>{formik.errors.fullName}</div>}\r\n                                <Box>\r\n                                    <Grid container justifyContent={\"space-between\"}>\r\n                                        <Button onClick={resetHandler} variant={\"contained\"}\r\n                                                color={\"secondary\"}>Cancel</Button>\r\n                                        <Button type={\"submit\"} variant={\"contained\"}\r\n                                                color={\"primary\"}>Save</Button>\r\n                                    </Grid>\r\n                                </Box>\r\n                            </FormGroup>\r\n                        </FormControl>\r\n                    </form>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UpdateProfileData\r\n","import React, {useState} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport ProfileInfo from \"./ProfileInfo\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\n\r\nconst Profile = () => {\r\n    const name = useSelector<AppStateType, string>(state => state.login.user.name)\r\n    const avatar = useSelector<AppStateType, string | undefined>(state => state.login.user.avatar)\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.login.isAuth)\r\n    const [editProfile, setEditProfile] = useState(false)\r\n\r\n    const offEditModeHandler = (value: boolean) => {\r\n        setEditProfile(value)\r\n    }\r\n\r\n    if (!isAuth) {\r\n        return <Navigate to={\"/login\"}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={\"main\"}>\r\n            <div className=\"mainBlock\">\r\n                <Grid container justifyContent={\"center\"} alignItems={\"center\"}>\r\n                    <Grid item justifyContent={\"center\"}>\r\n                        {editProfile\r\n                            ?\r\n                            <ProfileDataForm avatar={avatar} offEditMode={(value) => {\r\n                                offEditModeHandler(value)\r\n                            }}/>\r\n                            :\r\n                            <div>\r\n                                <ProfileInfo name={name} avatar={avatar}/>\r\n                                <Button\r\n                                    variant={\"contained\"}\r\n                                    color={\"secondary\"}\r\n                                    onClick={() => {\r\n                                        setEditProfile(true)\r\n                                    }}>Edit profile</Button>\r\n                            </div>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Profile\r\n","import {Dispatch} from \"redux\";\r\nimport {restorePasswordApi} from \"../dal/restorePasswordApi\";\r\nimport {Params} from \"react-router-dom\";\r\n\r\nconst initialState = {\r\n    isNewPasswordSet: false,\r\n    message: null as string | null\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n//reducer\r\nexport const setNewPasswordReducer = (state: InitialStateType = initialState, action: ActionTypes): InitialStateType => {\r\n    switch(action.type) {\r\n        case SET_NEW_PASSWORD:\r\n            return {...state, isNewPasswordSet: action.isPasswordSet}\r\n        case SET_REQUEST_MESSAGE:\r\n            return {...state, message: action.message}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// actions\r\nconst  SET_NEW_PASSWORD  = \"card-learning/newPassword/SET_NEW_PASSWORD\";\r\nconst SET_REQUEST_MESSAGE   = 'card-learning/newPassword/SET_MESSAGE';\r\n\r\n//action creators\r\nexport const setNewPassword = (isPasswordSet: boolean) => ({ type: \"card-learning/newPassword/SET_NEW_PASSWORD\", isPasswordSet } as const);\r\nexport const setRequestMessage = (message: string | null) => ({ type: SET_REQUEST_MESSAGE , message } as const);\r\n//thunk\r\nexport const setNewPasswordTC = (password: string, resetPasswordToken: string) => (dispatch: Dispatch) => {\r\n    restorePasswordApi.setNewPassword({ password, resetPasswordToken })\r\n        .then(res => {\r\n            if(res.data.info) {\r\n                dispatch(setNewPassword(true))\r\n            } else if(res.data.error) {\r\n                dispatch(setRequestMessage(res.data.error))\r\n            } else {\r\n                dispatch(setRequestMessage(\"Some error occurred!\"))\r\n            }\r\n        })\r\n        .catch(error => {\r\n            dispatch(setRequestMessage(error.message ? error.message :\"Network error occurred!\"));\r\n        })\r\n}\r\n\r\n//action types\r\nexport type SetNewPasswordType = ReturnType<typeof setNewPassword>;\r\ntype SetRequestMessageType = ReturnType<typeof setRequestMessage>;\r\nexport type ActionTypes = SetRequestMessageType | SetNewPasswordType;\r\n","import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport {Navigate, useParams} from \"react-router-dom\";\r\nimport {useFormik} from \"formik\";\r\nimport {setNewPasswordTC} from \"../../bll/setNewPassword-reducer\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from '@material-ui/core/Box';\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Container from '@material-ui/core/Container';\r\nimport Button from '@material-ui/core/Button';\r\n\r\ntype RecoveryProps = {}\r\ntype FormikErrorType = {\r\n    password?: string\r\n}\r\n\r\nconst RecoveryPassword: React.FC<RecoveryProps> = React.memo(() => {\r\n\r\n    const isNewPasswordSend = useSelector<AppStateType, boolean>(state => state.newPassword.isNewPasswordSet);\r\n    const responseError = useSelector<AppStateType, string | null>(state => state.newPassword.message)\r\n    const dispatch = useDispatch();\r\n\r\n    const { token } = useParams() as {\r\n        token: string;\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if(!values.password) {\r\n                errors.password = 'Please type new password';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Must be 8 characters or more';\r\n            }\r\n            return errors;\r\n\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(setNewPasswordTC(values.password, token ))\r\n            formik.resetForm()\r\n        },\r\n    });\r\n\r\n    if(isNewPasswordSend) {\r\n        return <Navigate to='/login' />\r\n    }\r\n    return <div className={\"main\"}>\r\n        <Container maxWidth=\"sm\" style={{background: \"#F9F9FE\", height: \"50vh\", borderRadius: \"8px\"}}>\r\n            <Grid container spacing={3}>\r\n                <Grid item style={{\r\n                    marginTop: \"20px\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    justifyContent: 'center',\r\n                    alignItems: \"center\"\r\n                }}>\r\n                    <form onSubmit={formik.handleSubmit} style={{\r\n                        display: \"flex\",\r\n                        flexDirection: \"column\",\r\n                        justifyContent: \"center\"\r\n                    }}>\r\n                        <Box component=\"span\" sx={{marginTop: \"20px\", marginBottom: \"20px\"}}>\r\n                            <h2 style={{textAlign: 'center'}}>Create new password</h2>\r\n                        </Box>\r\n                        <Box component=\"span\" display=\"block\">\r\n                            <TextField\r\n                                variant={\"outlined\"}\r\n                                style={{marginTop: \"20px\", width: \"100%\"}}\r\n                                id={\"outlined-basic\"}\r\n                                type={\"password\"}\r\n                                color={\"primary\"}\r\n                                placeholder={\"password\"}\r\n                                {...formik.getFieldProps(\"password\")}\r\n                            />\r\n                            {formik.touched.password && formik.errors.password && <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                            {responseError &&  <div style={{color: 'red'}}>{responseError}</div>}\r\n                        </Box>\r\n                        <Box>\r\n                            <h4>Create new password and we will send you further instructions to email</h4>\r\n                        </Box>\r\n                        <Button variant=\"contained\"\r\n                                color=\"primary\"\r\n                                type=\"submit\"\r\n                                style={{\r\n                                    borderRadius: \"30px\",\r\n                                    background: \"#73926C\",\r\n                                    marginTop: \"30px\",\r\n                                    alignSelf: 'center',\r\n                                    boxShadow: '0px 4px 18px rgba(33, 38, 143, 0.35), inset 0px 1px 0px rgba(255, 255, 255, 0.3)'\r\n                                }}\r\n                            // disabled={forgotStatus === \"loading\"}\r\n                        >Create new password</Button>\r\n                    </form>\r\n                </Grid>\r\n            </Grid>\r\n        </Container></div>\r\n\r\n});\r\n\r\nexport default RecoveryPassword\r\n","import axios from \"axios\"\r\n\r\n\r\nconst instance = axios.create({\r\n    // baseURL: \"https://neko-back.herokuapp.com/2.0\",\r\n    baseURL: process.env.REACT_APP_API_PATH,\r\n    withCredentials: true,\r\n});\r\n\r\n\r\n\r\nexport const registrationAPI = {\r\n    registration(email:string, password: string) {\r\n        return instance.post(\"auth/register\", {email, password});\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {registrationAPI} from \"../dal/registration-api\";\r\n\r\nlet initialState = {\r\n    isRegistered: false\r\n};\r\n\r\nexport type LoginInitialStateType = typeof initialState;\r\n\r\n//Reducer\r\nexport const registrationReducer = (state = initialState, action: ActionsType): LoginInitialStateType => {\r\n    switch (action.type) {\r\n        case \"REGISTERED\":\r\n            return {...state, isRegistered: action.isRegistered}\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// actions\r\n\r\nconst isRegisteredAC = (isRegistered: boolean) => ({type: \"REGISTERED\", isRegistered})\r\n\r\n//thunks\r\nexport const registrationTC = (email: string, password: string) => (dispatch: Dispatch) => {\r\n    registrationAPI.registration(email, password)\r\n        .then((res)=> {\r\n            dispatch(isRegisteredAC(true))\r\n        })\r\n        .catch((error)=>{\r\n            alert(\"This email is already registered\")\r\n    })\r\n}\r\n\r\n// Action Creators\r\n//types\r\n\r\n// type ActionsTypes =\r\ntype ActionsType = ReturnType<typeof isRegisteredAC>","import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {registrationTC} from \"../../bll/registration-reducer\";\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    confirmPassword?: string\r\n}\r\n\r\nconst Registration = () => {\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.login.isAuth)\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            confirmPassword: \"\",\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Required\";\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\";\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"Required\";\r\n            } else if (values.password.length < 3) {\r\n                errors.password = \"Password must be more than two characters\"\r\n            }\r\n            if (!values.confirmPassword) {\r\n                errors.confirmPassword = \"Required\";\r\n            } else if (values.confirmPassword !== values.password) {\r\n                errors.confirmPassword = \"Passwords must match\"\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(registrationTC(values.email, values.password))\r\n            formik.resetForm()\r\n        },\r\n    });\r\n\r\n    const resetHandler = () => {\r\n        formik.resetForm()\r\n    }\r\n\r\n\r\n    if (isAuth) {\r\n        return <Navigate to={\"/profile\"}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"main\">\r\n            <div className=\"mainBlock authBlock\">\r\n                <Grid container justifyContent={\"center\"}>\r\n                    <Grid item justifyContent={\"center\"}>\r\n                        <form onSubmit={formik.handleSubmit}>\r\n                            <FormControl>\r\n                                <FormLabel>\r\n                                    <Grid container justifyContent={\"center\"}>\r\n                                        <Grid item justifyContent={\"center\"}>\r\n                                            <h1>It-incubator</h1>\r\n                                            <Grid container justifyContent={\"center\"}>\r\n                                                <Grid item justifyContent={\"center\"}>\r\n                                                    <h3>Sign up</h3>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n\r\n                                </FormLabel>\r\n                                <FormGroup>\r\n                                    <TextField label=\"Email\"\r\n                                               margin=\"normal\" {...formik.getFieldProps(\"email\")}/>\r\n                                    {formik.touched.email && formik.errors.email &&\r\n                                    <div style={{color: \"red\"}}>{formik.errors.email}</div>}\r\n                                    <TextField type=\"password\" label=\"Password\"\r\n                                               margin=\"normal\" {...formik.getFieldProps(\"password\")}\r\n                                    />\r\n                                    {formik.touched.password && formik.errors.password &&\r\n                                    <div style={{color: \"red\"}}>{formik.errors.password}</div>}\r\n\r\n                                    <TextField type=\"password\" label=\"Confirm password\"\r\n                                               margin=\"normal\" {...formik.getFieldProps(\"confirmPassword\")}\r\n                                    />\r\n                                    {formik.touched.confirmPassword && formik.errors.confirmPassword &&\r\n                                    <div style={{color: \"red\"}}>{formik.errors.confirmPassword}</div>}\r\n                                    <Box>\r\n                                        <Grid container justifyContent={\"space-between\"}>\r\n                                            <Button onClick={resetHandler} variant={\"contained\"}\r\n                                                    color={\"secondary\"}>Cancel</Button>\r\n                                            <Button type={\"submit\"} variant={\"contained\"}\r\n                                                    color={\"primary\"}>Register</Button>\r\n                                        </Grid>\r\n                                    </Box>\r\n                                </FormGroup>\r\n                            </FormControl>\r\n                        </form>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Registration\r\n","import React from \"react\";\r\n\r\nconst Main = () => {\r\n\r\n    return (\r\n        <div className={\"main\"}>Page not found</div>\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\n\r\nconst CheckEmail = () => {\r\n    const { email } = useParams() as {\r\n        email: string;\r\n    }\r\n    return (\r\n        <div className={\"main\"}>\r\n            <Container maxWidth=\"sm\" style={{background: \"#F9F9FE\", height: \"50vh\", borderRadius: \"8px\"}}>\r\n                <Grid container direction={\"column\"} justifyContent={\"center\"} alignItems={\"center\"} spacing={3}>\r\n                    <Grid item style={{\r\n                        marginTop: \"20px\",\r\n                        display: \"flex\",\r\n                        flexDirection: \"column\",\r\n                        justifyContent: 'center',\r\n                        alignItems: \"center\"\r\n                    }}>\r\n                        <Box component=\"span\" sx={{marginTop: \"20px\", marginBottom: \"20px\"}}>\r\n                            <h2 style={{textAlign: 'center'}}>Check Email</h2>\r\n                        </Box>\r\n                        <Box>\r\n                            <h4>We’ve sent an Email with instructions to {email}</h4>\r\n                        </Box>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CheckEmail\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype SearchType = {\r\n    searchResult: number\r\n    getSearchResult: (searchTerm: string) => void\r\n    title: string\r\n}\r\n\r\n\r\nconst Search = (props: SearchType) => {\r\n    const [searchTerm, setSearchTerm] = useState(\"\")\r\n    useEffect(() => {\r\n\r\n        const delayDebounceFn = setTimeout(() => {\r\n            props.getSearchResult(searchTerm)\r\n        }, 700)\r\n\r\n        return () => clearTimeout(delayDebounceFn)\r\n    }, [searchTerm])\r\n\r\n\r\n    return (\r\n        <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\", margin: 10}}>\r\n            <TextField style={{width: \"70%\"}} id=\"outlined-basic\" label=\"🔍 Search\" variant=\"outlined\"\r\n                       onChange={(e) => setSearchTerm(e.target.value)}/>\r\n            {props.searchResult && <h4>{props.searchResult} {props.title}</h4>}\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default Search\r\n","import axios, {AxiosResponse} from \"axios\"\r\n\r\nconst instance = axios.create({\r\n    // baseURL: \"https://neko-back.herokuapp.com/2.0\",\r\n    baseURL: process.env.REACT_APP_API_PATH,\r\n    withCredentials: true,\r\n})\r\n\r\nexport type GetPacksParamsType = {\r\n    packName?: string\r\n    min?: number\r\n    max?: number\r\n    sortPacks?: string\r\n    page?: number\r\n    pageCount?: number\r\n    user_id?: string\r\n}\r\n\r\nexport type AddPackParamsType = {\r\n    cardsPack: {\r\n        name: string\r\n        path?: string\r\n        grade?: number\r\n        shots?: number\r\n        rating?: number\r\n        deckCover?: string\r\n        private?: boolean\r\n        type?: string\r\n    }\r\n}\r\n\r\nexport type UpdatePackParamsType = {\r\n    _id: string\r\n    name?: string\r\n}\r\n\r\n\r\nexport type Pack = {\r\n    _id: string\r\n    user_id: string\r\n    name: string\r\n    cardsCount: number\r\n    created: string\r\n    updated: string\r\n}\r\n\r\nexport type ResponsePacksType = {\r\n    cardPacks: Pack[]\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n}\r\n\r\n\r\nexport const packsListAPI = {\r\n    getPacks(params: GetPacksParamsType) {\r\n        return instance.get<GetPacksParamsType, AxiosResponse<ResponsePacksType>>(\"cards/pack\", {\r\n            params: {...params}\r\n        })\r\n    },\r\n    addPack(pack: AddPackParamsType) {\r\n        return instance.post<AddPackParamsType, AxiosResponse<ResponsePacksType>>(\"/cards/pack\", {...pack})\r\n    },\r\n    deletePack(packId: string) {\r\n        return instance.delete<AxiosResponse<ResponsePacksType>>(\"/cards/pack\", {params: {id: packId}})\r\n    },\r\n    updatePack(params: UpdatePackParamsType) {\r\n        return instance.put<AddPackParamsType, AxiosResponse<ResponsePacksType>>(\"cards/pack\", {cardsPack: {...params}})\r\n    }\r\n}\r\n","import {GetPacksParamsType, Pack, packsListAPI, ResponsePacksType} from \"../dal/packsListApi\";\r\nimport {AppStateType} from \"./store\";\r\nimport {ThunkAction} from \"redux-thunk\"\r\n\r\nconst InitialState = {\r\n    cardPacks: [\r\n        {\r\n            _id: \"\",\r\n            user_id: \"\",\r\n            name: \"\",\r\n            cardsCount: 0,\r\n            created: \"\",\r\n            updated: \"\"\r\n        }],\r\n    cardPacksTotalCount: 0,\r\n    maxCardsCount: 0,\r\n    minCardsCount: 0,\r\n    packsParams: {\r\n        max: 0,\r\n        min: 0,\r\n        page: 0,\r\n        pageCount: 5,\r\n        sortPacks: \"\",\r\n        user_id: \"\",\r\n        packName: \"\",\r\n    },\r\n}\r\n\r\n\r\n//types\r\ntype InitialStateType = {\r\n    cardPacks: Pack[]\r\n    cardPacksTotalCount: number\r\n    packsParams: PacksParamsType\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n}\r\nexport type PacksParamsType = {\r\n    max: number,\r\n    min: number,\r\n    page: number,\r\n    pageCount: number,\r\n    sortPacks: string,\r\n    user_id: string,\r\n    packName: string,\r\n}\r\n\r\nexport const packsReducer = (state = InitialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case GET_PACKS:\r\n            return {\r\n                ...state,\r\n                cardPacks: action.data.cardPacks,\r\n                cardPacksTotalCount: action.data.cardPacksTotalCount,\r\n                maxCardsCount: action.data.maxCardsCount,//from here we get max allowed value for slider\r\n                minCardsCount: action.data.minCardsCount,//from here we get min allowed value for slider\r\n                packsParams: {\r\n                    ...state.packsParams,\r\n                    page: action.data.page,\r\n                    pageCount: action.data.pageCount\r\n                }\r\n            }\r\n        case SET_SORT_VALUE:\r\n            return {\r\n                ...state, packsParams: {...state.packsParams, sortPacks: action.sortValue}\r\n            }\r\n        case SET_PACKS_PAGE:\r\n            return {\r\n                ...state, packsParams: {...state.packsParams, page: action.page}\r\n            }\r\n        case SET_PACKS_CARD_RANGE:\r\n            return {\r\n                ...state, packsParams: {...state.packsParams, min: action.min, max: action.max}\r\n            }\r\n        case SET_PACKS_CARD_OWNER_FILTER:\r\n            return {\r\n                ...state, packsParams: {...state.packsParams, user_id: action.owner}\r\n            }\r\n        case SET_PACKS_SEARCH_NAME:\r\n            return {\r\n                ...state, packsParams: {...state.packsParams, packName: action.packName, page: 1}\r\n            }\r\n        case SET_PAGE_COUNT:\r\n            return {\r\n                ...state, packsParams: {...state.packsParams, pageCount: action.pageCount}\r\n            }\r\n        case DELETE_PACK:\r\n            return {\r\n                ...state,\r\n                cardPacks: state.cardPacks.filter((cardPack) => cardPack._id === action.packId)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nconst GET_PACKS = \"card-learning/packs/GET-CARDS\"\r\nconst SET_SORT_VALUE = \"card-learning/packs/SET_SORT_VALUE\"\r\nconst SET_PACKS_PAGE = \"card-learning/packs/SET_PACKS_PAGE\"\r\nconst SET_PACKS_CARD_RANGE = \"card-learning/packs/SET_PACKS_CARD_RANGE\"\r\nconst SET_PACKS_CARD_OWNER_FILTER = \"card-learning/packs/SET_PACKS_CARD_OWNER_FILTER\"\r\nconst SET_PACKS_SEARCH_NAME = \"card-learning/packs/SET_PACKS_SEARCH_NAME\"\r\nconst SET_PAGE_COUNT = \"card-learning/packs/SET-PAGE_COUNT\"\r\nconst DELETE_PACK = \"card-learning/packs/DELETE_PACK\"\r\n\r\nexport const GetPacksAC = (data: ResponsePacksType) => ({\r\n    type: GET_PACKS,\r\n    data: data,\r\n} as const);\r\n\r\nexport const SetSortValueAC = (sortValue: string) => ({\r\n    type: SET_SORT_VALUE,\r\n    sortValue\r\n} as const);\r\n\r\nexport const SetPacksPageAC = (page: number) => ({\r\n    type: SET_PACKS_PAGE,\r\n    page\r\n} as const);\r\n\r\nexport const SetPacksCardRangeAC = (min: number, max: number) => ({\r\n    type: SET_PACKS_CARD_RANGE,\r\n    min,\r\n    max\r\n} as const);\r\n\r\nexport const SetPacksCardOwnerFilterAC = (owner: string) => ({\r\n    type: SET_PACKS_CARD_OWNER_FILTER,\r\n    owner\r\n} as const);\r\nexport const SetPageCountAC = (pageCount: number) => ({\r\n    type: SET_PAGE_COUNT,\r\n    pageCount,\r\n} as const);\r\n\r\nexport const SetPacksSearchNameAC = (packName: string) => ({\r\n    type: SET_PACKS_SEARCH_NAME,\r\n    packName\r\n} as const);\r\n\r\nexport const DeletePackAC = (packId: string) => ({\r\n    type: DELETE_PACK,\r\n    packId\r\n} as const)\r\n\r\n\r\nexport const getPacksTC = (data: GetPacksParamsType): GetThunk => (dispatch, getState) => {\r\n    if (data.sortPacks && data.sortPacks !== getState().packs.packsParams.sortPacks) {\r\n        dispatch(SetSortValueAC(data.sortPacks))\r\n    }\r\n    if (data.page) {\r\n        dispatch(SetPacksPageAC(data.page))\r\n    }\r\n    if (data.min !== undefined && data.max !== undefined) {\r\n        dispatch(SetPacksCardRangeAC(data.min, data.max))\r\n    }\r\n    if (data.user_id) {\r\n        if (data.user_id === \"all\") {\r\n            dispatch(SetPacksCardOwnerFilterAC(\"\"))\r\n        } else {\r\n            dispatch(SetPacksCardOwnerFilterAC(data.user_id))\r\n        }\r\n    }\r\n    if (data.packName || data.packName === \"\") {\r\n        dispatch(SetPacksSearchNameAC(data.packName))\r\n    }\r\n\r\n    if (data.pageCount && data.pageCount !== getState().packs.packsParams.pageCount) {\r\n        dispatch(SetPageCountAC(data.pageCount))\r\n    }\r\n    const state = getState().packs.packsParams\r\n\r\n    packsListAPI.getPacks(state)\r\n        .then(res => {\r\n            dispatch(GetPacksAC(res.data))\r\n\r\n        })\r\n}\r\n\r\nexport const deletePackTC = (packId: string): GetThunk => (dispatch, getState: () => AppStateType) => {\r\n    const userId = getState().login.user._id\r\n    packsListAPI.deletePack(packId)\r\n        .then(() => {\r\n            //dispatch(DeletePackAC(packId))\r\n            dispatch(getPacksTC({user_id: userId}))\r\n        })\r\n        .catch(error => {\r\n            // dispatch(setErrorMessage(error.message ? error.message :\"Network error occurred!\"));\r\n            // dispatch(setForgotStatus(\"failed\"))\r\n        })\r\n}\r\n\r\nexport const updatePackTC = (_id: string, name: string): GetThunk => (dispatch, getState: () => AppStateType) => {\r\n    const userId = getState().login.user._id\r\n    packsListAPI.updatePack({name: name, _id: _id})\r\n        .then(() => {\r\n            dispatch(getPacksTC({}))\r\n        })\r\n        .catch(error => {\r\n            // dispatch(setErrorMessage(error.message ? error.message :\"Network error occurred!\"));\r\n            // dispatch(setForgotStatus(\"failed\"))\r\n        })\r\n}\r\n\r\nexport const addPackTC = (name: string): GetThunk => (dispatch, getState: () => AppStateType) => {\r\n\r\n    packsListAPI.addPack({cardsPack: {name: name}})\r\n        .then(() => {\r\n            dispatch(getPacksTC({}))\r\n        })\r\n        .catch(error => {\r\n            // dispatch(setErrorMessage(error.message ? error.message :\"Network error occurred!\"));\r\n            // dispatch(setForgotStatus(\"failed\"))\r\n        })\r\n}\r\n\r\n\r\nexport type GetPacksType = ReturnType<typeof GetPacksAC>\r\nexport type SetSortValueType = ReturnType<typeof SetSortValueAC>\r\nexport type SetPacksPageType = ReturnType<typeof SetPacksPageAC>\r\nexport type SetPacksCardRangeType = ReturnType<typeof SetPacksCardRangeAC>\r\nexport type SetPacksCardOwnerFilterType = ReturnType<typeof SetPacksCardOwnerFilterAC>\r\nexport type SetPacksSearchNameType = ReturnType<typeof SetPacksSearchNameAC>\r\nexport type SetPageCountType = ReturnType<typeof SetPageCountAC>\r\nexport type DeletePackType = ReturnType<typeof DeletePackAC>\r\n\r\n\r\ntype ActionsType = GetPacksType\r\n    | SetSortValueType\r\n    | SetPacksPageType\r\n    | SetPacksCardRangeType\r\n    | SetPacksCardOwnerFilterType\r\n    | SetPacksSearchNameType\r\n    | SetPageCountType\r\n    | DeletePackType\r\n\r\n\r\nexport type GetThunk<ReturnType = void> = ThunkAction<ReturnType, AppStateType, unknown, ActionsType>\r\n","import * as React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getPacksTC} from \"../../../bll/packs-reducer\";\r\nimport {AppStateType} from \"../../../bll/store\";\r\nimport {ToggleButton, ToggleButtonGroup} from \"@mui/material\";\r\n\r\n\r\nconst PacksToggle = () => {\r\n    const [packOwner, setPackOwner] = React.useState('all');\r\n    const dispatch = useDispatch()\r\n    const id = useSelector<AppStateType, string>(state => state.login.user._id)\r\n\r\n    const handleChange = (event: React.MouseEvent<HTMLElement>, packOwner: string) => {\r\n        if (packOwner !== null) {\r\n\r\n            if (packOwner === \"all\") {\r\n                dispatch(getPacksTC({user_id: packOwner}))\r\n            }\r\n            if (packOwner === \"my\") {\r\n                dispatch(getPacksTC({user_id: id}))\r\n            }\r\n            setPackOwner(packOwner);\r\n\r\n        }\r\n    };\r\n    return (\r\n        <div>\r\n            <h4>Show packs cards</h4>\r\n            <ToggleButtonGroup\r\n                size=\"large\"\r\n                color=\"primary\"\r\n                value={packOwner}\r\n                exclusive\r\n                onChange={handleChange}\r\n                aria-label=\"choose packs\"\r\n            >\r\n                <ToggleButton value=\"my\">\r\n                    MY\r\n                </ToggleButton>\r\n                <ToggleButton value=\"all\">\r\n                    All\r\n                </ToggleButton>\r\n            </ToggleButtonGroup>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default PacksToggle\r\n","import * as React from \"react\";\r\nimport {ChangeEvent} from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport {Card} from \"../../dal/cardsListApi\";\r\nimport {updateCardTC} from \"../../bll/cards-reducer\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport {IconButton} from \"@mui/material\";\r\nimport {Pack} from \"../../dal/packsListApi\";\r\nimport {updatePackTC} from \"../../bll/packs-reducer\";\r\n\r\n\r\ntype ModalUpdatePackPropsType = {\r\n    packId: string\r\n    packs: Array<Pack>\r\n}\r\n\r\nexport const ModalUpdatePack= (props: ModalUpdatePackPropsType) => {\r\n\r\n    const packUserId = props.packs.filter(c => c._id === props.packId)[0]\r\n    const pack= props.packs.filter(pack => pack._id === props.packId)[0]\r\n\r\n    const userId = useSelector<AppStateType, string>(state => state.login.user._id)\r\n    const [open, setOpen] = React.useState(false);\r\n    const [packName, setPackName] = React.useState(pack.name);\r\n    const dispatch = useDispatch()\r\n\r\n\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleUpdatePack = () => {\r\n        dispatch(updatePackTC(  props.packId, packName ))\r\n        setOpen(false);\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const onNameHandler = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        setPackName(event.currentTarget.value)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <IconButton\r\n                style={userId !== packUserId.user_id\r\n                    ?\r\n                    {\r\n                        color: \"blue\",\r\n                        opacity: 0.3\r\n                    }\r\n                    :\r\n                    {color: \"blue\"}}\r\n\r\n                disabled={userId !== packUserId.user_id}\r\n                        onClick={handleClickOpen}>\r\n                <EditIcon/>\r\n            </IconButton>\r\n\r\n            <Dialog open={open} onClose={handleClose}>\r\n                <DialogTitle>Update card</DialogTitle>\r\n                <DialogContent>\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"name\"\r\n                        label=\"Question\"\r\n                        type=\"email\"\r\n                        fullWidth\r\n                        variant=\"standard\"\r\n                        onChange={onNameHandler}\r\n                        value={packName}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose}>Cancel</Button>\r\n                    <Button onClick={handleUpdatePack}>Update</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","import * as React from \"react\";\r\nimport {ChangeEvent} from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {deleteCardTC} from \"../../bll/cards-reducer\";\r\nimport {IconButton} from \"@mui/material\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport {Card} from \"../../dal/cardsListApi\";\r\nimport {deletePackTC} from \"../../bll/packs-reducer\";\r\n\r\n\r\ntype ModalDeletePackPropsType = {\r\n    packId: string\r\n    packUserID: string\r\n}\r\n\r\nexport const ModalDeletePack = (props: ModalDeletePackPropsType) => {\r\n\r\n    //const cardsPack_id = useSelector<AppStateType, string>(state => state.cards.cardsParams.cardsPack_id)\r\n    //const card = props.cards.filter(c => c._id === props.cardId)[0]\r\n    const userId = useSelector<AppStateType,string>(state => state.login.user._id)\r\n    const [open, setOpen] = React.useState(false);\r\n    const [question, setQuestion] = React.useState(\"\");\r\n    const [answer, setAnswer] = React.useState(\"\");\r\n    const dispatch = useDispatch()\r\n\r\n\r\n\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleDeletePack = () => {\r\n        dispatch(deletePackTC(props.packId))\r\n        setOpen(false);\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <IconButton\r\n                style={userId !== props.packUserID\r\n                    ?\r\n                    {\r\n                        color: \"red\",\r\n                        opacity: 0.3\r\n                    }\r\n                    :\r\n                    {color: \"red\"}}\r\n                disabled={userId !== props.packUserID}\r\n                        onClick={handleClickOpen}><DeleteIcon/>\r\n            </IconButton>\r\n\r\n            <Dialog open={open} onClose={handleClose}>\r\n                <DialogTitle>Delete Pack</DialogTitle>\r\n                <DialogContent>\r\n                    Are you sure you want to delete the pack?\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose}>Cancel</Button>\r\n                    <Button onClick={handleDeletePack}>Delete</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","import * as React from \"react\";\r\nimport {useState} from \"react\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport Button from \"@mui/material/Button\";\r\nimport {Pack} from \"../../dal/packsListApi\";\r\nimport {getPacksTC} from \"../../bll/packs-reducer\";\r\nimport {IconButton, Paper} from \"@mui/material\";\r\nimport SchoolIcon from \"@mui/icons-material/School\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport StyleIcon from '@mui/icons-material/Style';\r\nimport {ModalUpdatePack} from \"../utils/ModalUpdatePack\";\r\nimport {ModalDeletePack} from \"../utils/ModalDeletePack\";\r\n\r\ntype PacksPropsType = {\r\n    packs: Array<Pack>\r\n}\r\n\r\nconst PacksTable = (props: PacksPropsType) => {\r\n\r\n    const [name, setName] = useState(true)\r\n    const [cardsCount, setCardsCount] = useState(true)\r\n    const [created, setCreated] = useState(true)\r\n    const [updated, setUpdated] = useState(true)\r\n    const dispatch = useDispatch()\r\n    const nav = useNavigate()\r\n\r\n    const sort = (value: boolean, sortName: string, dispatch: any) => {\r\n        if (value) {\r\n            dispatch(getPacksTC({sortPacks: `${0}${sortName}`}))\r\n        } else {\r\n            dispatch(getPacksTC({sortPacks: `${1}${sortName}`}))\r\n        }\r\n    }\r\n\r\n    const onSortHandler = (sortName: string) => {\r\n        if (sortName === \"name\") {\r\n            setName(!name)\r\n            sort(name, sortName, dispatch)\r\n        }\r\n        if (sortName === \"cardsCount\") {\r\n            setCardsCount(!cardsCount)\r\n            sort(cardsCount, sortName, dispatch)\r\n\r\n        }\r\n        if (sortName === \"created\") {\r\n            setCreated(!created)\r\n            sort(created, sortName, dispatch)\r\n        }\r\n        if (sortName === \"updated\") {\r\n            setUpdated(!updated)\r\n            sort(updated, sortName, dispatch)\r\n        }\r\n\r\n    }\r\n    const getCardsHandler = (cardsId: string) => {\r\n        nav(\"/cards-list/\" + cardsId)\r\n    }\r\n\r\n    const learnHandler = (cardsId: string)=> {\r\n        nav(\"/learn-page/\" + cardsId)\r\n    }\r\n\r\n    const styleHeaderButton = {\r\n        color: \"black\"\r\n    }\r\n    const styleActionsButton = {\r\n        marginLeft: \"10px\"\r\n    }\r\n\r\n    const styleHeader = {\r\n        backgroundColor: \"#8CE0EB\"\r\n    }\r\n\r\n    interface DateTimeFormatOptions {\r\n        weekday?: \"long\" | \"short\" | \"narrow\";\r\n        year?: \"numeric\" | \"2-digit\";\r\n        month?: \"numeric\" | \"2-digit\" | \"long\" | \"short\" | \"narrow\";\r\n        day?: \"numeric\" | \"2-digit\";\r\n        hour?: \"numeric\" | \"2-digit\";\r\n        minute?: \"numeric\" | \"2-digit\";\r\n    }\r\n\r\n    const dateOptions: DateTimeFormatOptions = {\r\n        weekday: \"long\",\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        day: \"numeric\",\r\n        hour: \"numeric\",\r\n        minute: \"numeric\"\r\n    };\r\n\r\n    return (\r\n        <TableContainer component={Paper }>\r\n            <Table aria-label=\"simple table\" stickyHeader={true}>\r\n                <TableHead>\r\n                    <TableRow style={{}}>\r\n                        <TableCell align=\"left\" style={styleHeader}>\r\n                            <Button style={styleHeaderButton} variant=\"text\"\r\n                                    onClick={() => onSortHandler(\"name\")}>Name⮃</Button>\r\n                        </TableCell>\r\n                        <TableCell align=\"left\" style={styleHeader}>\r\n                            <Button style={styleHeaderButton} variant=\"text\"\r\n                                    onClick={() => onSortHandler(\"cardsCount\")}>Cards⮃</Button>\r\n                        </TableCell>\r\n                        <TableCell align=\"left\" style={styleHeader}>\r\n                            <Button style={styleHeaderButton} variant=\"text\"\r\n                                    onClick={() => onSortHandler(\"created\")}>Created⮃</Button>\r\n                        </TableCell>\r\n                        <TableCell align=\"left\" style={styleHeader}>\r\n                            <Button style={styleHeaderButton} variant=\"text\"\r\n                                    onClick={() => onSortHandler(\"updated\")}>Updated⮃</Button>\r\n                        </TableCell>\r\n                        <TableCell align=\"left\" style={styleHeader}>\r\n                            ACTIONS\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {props.packs.map((row, index) => (\r\n                        <TableRow\r\n                            key={`${index}${row.name}`}\r\n                            sx={{\r\n                                \"&:last-child td, &:last-child th\": {border: 0}, \"&:nth-of-type(odd)\": {\r\n                                    backgroundColor: \"#F8F7FD\",\r\n                                },\r\n                            }}\r\n                        >\r\n                            <TableCell component=\"th\" scope=\"row\" align=\"left\"\r\n                                       style={{\r\n                                           maxWidth: 150,\r\n                                           width: 150,\r\n                                           textOverflow: \"ellipsis\",\r\n                                           overflow: \"hidden\"\r\n                                       }}>\r\n                                {row.name}\r\n                            </TableCell>\r\n                            <TableCell align=\"left\">{row.cardsCount}</TableCell>\r\n                            <TableCell\r\n                                align=\"left\">{new Date(row.created).toLocaleDateString(\"en-US\", dateOptions)}</TableCell>\r\n                            <TableCell\r\n                                align=\"left\">{new Date(row.updated).toLocaleDateString(\"en-US\", dateOptions)}</TableCell>\r\n                            <TableCell align=\"left\">\r\n                                <ModalDeletePack packId={row._id} packUserID={row.user_id}/>\r\n                                <ModalUpdatePack packId={row._id} packs={props.packs}/>\r\n\r\n                                <IconButton\r\n                                    style={styleActionsButton}\r\n                                    onClick={()=> learnHandler(row._id)}>\r\n                                    <SchoolIcon/>\r\n                                </IconButton>\r\n                                <IconButton\r\n                                    style={styleActionsButton}\r\n                                    onClick={() => getCardsHandler(row._id)}>\r\n                                    <StyleIcon/>\r\n                                </IconButton>\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\n\r\n\r\nexport default PacksTable\r\n","import React, {useEffect} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport {InputLabel, Select, SelectChangeEvent} from \"@mui/material\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport styles from \"./Select.module.css\"\r\n\r\n\r\ntype ShowItemsPerPagePropsType ={\r\n    setPageCount:(items: number)=> void\r\n    pageCount:number\r\n}\r\n\r\nconst ShowItemsPerPage = (props:ShowItemsPerPagePropsType) => {\r\n\r\n    const [page, setCards] = React.useState(props.pageCount)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const handleChange = (event: SelectChangeEvent) => {\r\n        setCards(+event.target.value as number)\r\n        props.setPageCount(+event.target.value)\r\n    }\r\n    useEffect(() => {\r\n        setCards(props.pageCount)\r\n    }, [props.pageCount])\r\n\r\n    return (<div className={styles.select}>\r\n        <FormControl sx={{minWidth: 80}}>\r\n            <InputLabel id=\"pageCount\">Cards</InputLabel>\r\n            <Select\r\n                style={{width: 80, height: 30}}\r\n                labelId=\"pageCount\"\r\n                id=\"pageCount\"\r\n                value={page.toString()}\r\n                label=\"Cards\"\r\n                onChange={handleChange}\r\n            >\r\n                <MenuItem value={5}>5</MenuItem>\r\n                <MenuItem value={10}>10</MenuItem>\r\n                <MenuItem value={15}>15</MenuItem>\r\n            </Select>\r\n        </FormControl>\r\n    </div>)\r\n\r\n}\r\n\r\nexport default ShowItemsPerPage\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getPacksTC} from \"../../../bll/packs-reducer\";\r\nimport {AppStateType} from \"../../../bll/store\";\r\nimport {Slider} from \"@mui/material\";\r\n\r\nconst DoubleRange = () => {\r\n    const dispatch = useDispatch()\r\n    const max = useSelector<AppStateType, number>(state => state.packs.maxCardsCount)\r\n    const min = useSelector<AppStateType, number>(state => state.packs.minCardsCount)\r\n    const [value, setValue] = useState<number[]>([min, max]);\r\n    const handleChange = (event: React.SyntheticEvent | Event, newValue: number | Array<number>) => {\r\n        setValue(newValue as number[]);\r\n        // @ts-ignore\r\n        dispatch(getPacksTC({min: newValue[0], max: newValue[1]}))\r\n    };\r\n    useEffect(() => {\r\n        setValue([min, max])\r\n    }, [max, min])\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h4>Number of cards</h4>\r\n            </div>\r\n            <div style={{padding: 15}}>\r\n                <Slider\r\n                    value={value}\r\n                    onChangeCommitted={handleChange}\r\n                    min={min}\r\n                    max={max}\r\n                    valueLabelDisplay=\"on\"\r\n                />\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default DoubleRange\r\n","import React from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addPackTC} from \"../../../bll/packs-reducer\";\r\n\r\nconst AddPack = () => {\r\n    const  dispatch = useDispatch()\r\n    const addPackHandler = () => {\r\n        dispatch(addPackTC( \"newPack\"))\r\n    }\r\n    return (\r\n        <Button variant=\"contained\" onClick={addPackHandler} color=\"success\">ADD PACK</Button>\r\n    )\r\n}\r\n\r\nexport default AddPack\r\n","import * as React from \"react\";\r\nimport Pagination from \"@mui/material/Pagination\";\r\nimport Stack from \"@mui/material/Stack\";\r\n\r\ntype PaginationPagePropsType = {\r\n    changePage: (page: number) => void\r\n    currentPage: number\r\n    pageCount: number\r\n    itemTotalCount: number\r\n}\r\n\r\n\r\nexport const PaginationPage = (props: PaginationPagePropsType) => {\r\n\r\n    let pagesCount = Math.ceil(props.itemTotalCount / props.pageCount)\r\n    return (\r\n        <div>\r\n            <Stack spacing={2}>\r\n                <Pagination page={props.currentPage}\r\n                            onChange={(event: React.ChangeEvent<unknown>, value: number) => {\r\n                                props.changePage(value)\r\n                            }} count={pagesCount}/>\r\n            </Stack>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport Search from \"../utils/Controls/Search\";\r\nimport PacksToggle from \"../utils/Controls/PacksToggle\";\r\nimport PacksTable from \"./PacksTable\";\r\nimport ShowItemsPerPage from \"../utils/Controls/ShowItemsPerPage\";\r\nimport DoubleRange from \"../utils/Controls/DoubleRange\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport AddPack from \"../utils/Controls/AddPack\";\r\nimport {getPacksTC} from \"../../bll/packs-reducer\";\r\nimport {Pack} from \"../../dal/packsListApi\";\r\nimport {PaginationPage} from \"../utils/Controls/PaginationPage\";\r\n\r\n\r\nconst PacksListsContainer = () => {\r\n    const packs = useSelector<AppStateType, Array<Pack>>(state => state.packs.cardPacks)\r\n    const packsAmount = useSelector<AppStateType, number>(state => state.packs.cardPacksTotalCount)\r\n    const currentPage: number = useSelector<AppStateType, number>(state => state.packs.packsParams.page)\r\n    const pageCount: number = useSelector<AppStateType, number>(state => state.packs.packsParams.pageCount)\r\n    const dispatch = useDispatch()\r\n    const getPacks = (searchTerm: string) => dispatch(getPacksTC({packName: searchTerm}))\r\n    const changePagePacks = (page: number) => dispatch(getPacksTC({page}))\r\n    const setItemsCountOnPage = (pageCount: number)=> dispatch(getPacksTC({pageCount}))\r\n\r\n    return (\r\n        <div className={\"main\"}>\r\n            <div className=\"mainBlock\">\r\n                <div className={\"left__panel\"}>\r\n                    <PacksToggle/>\r\n                    <DoubleRange/>\r\n                    <AddPack/>\r\n                </div>\r\n                <div className={\"center__panel\"}>\r\n                    <Search getSearchResult={getPacks} searchResult={packsAmount} title={\"packs were founded\"}/>\r\n                    <div className={\"table__panel\"}>\r\n                    <PacksTable packs={packs}/>\r\n                    </div>\r\n                    <div className={\"bottom__panel\"}>\r\n                        <PaginationPage changePage={changePagePacks} currentPage={currentPage} pageCount={pageCount} itemTotalCount={packsAmount}/>\r\n                        <ShowItemsPerPage setPageCount={setItemsCountOnPage} pageCount={pageCount} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PacksListsContainer\r\n","import axios, {AxiosResponse} from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    // baseURL: \"https://neko-back.herokuapp.com/2.0\",\r\n    baseURL: process.env.REACT_APP_API_PATH,\r\n    withCredentials: true,\r\n})\r\n\r\nexport type GetCardsParamsType = {\r\n    cardsPack_id: string\r\n    cardAnswer?: string\r\n    cardQuestion?: string\r\n    min?: number\r\n    max?: number\r\n    sortCards?: string\r\n    page?: number\r\n    pageCount?: number\r\n}\r\n\r\nexport type Card = {\r\n    answer: string\r\n    question: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    user_id: string\r\n    shots: number\r\n    cardsCount: number\r\n    created: string\r\n    updated: string\r\n    _id: string\r\n}\r\nexport type ResponseCardsType = {\r\n    cards: Card[]\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    packUserId: string\r\n    page: number\r\n    pageCount: number\r\n}\r\n\r\n\r\nexport type AddCardParamsType = {\r\n    cardsPack_id: string\r\n    question?: string\r\n    answer?: string\r\n    grade?: number\r\n    shots?: number\r\n}\r\n\r\nexport type UpdateCardParamsType = {\r\n    card: {\r\n        _id: string\r\n        question?: string\r\n        answer?: string\r\n    }\r\n\r\n}\r\nexport type GradeCardParamsType = {\r\n    card_id: string\r\n    grade: number\r\n}\r\n\r\nexport const cardsApi = {\r\n    getCards(params: GetCardsParamsType) {\r\n        return instance.get<GetCardsParamsType, AxiosResponse<ResponseCardsType>>(\"cards/card\", {params: {...params}})\r\n    },\r\n    addCard(card: AddCardParamsType) {\r\n        return instance.post<AddCardParamsType, AxiosResponse<ResponseCardsType>>(\"/cards/card\", {card: {...card}})\r\n    },\r\n    deleteCard(cardId: string) {\r\n        return instance.delete<AxiosResponse<ResponseCardsType>>(\"/cards/card\", {params: {id: cardId}})\r\n    },\r\n    updateCard(params: UpdateCardParamsType) {\r\n        return instance.put<UpdateCardParamsType, AxiosResponse<ResponseCardsType>>(\"cards/card\", params)\r\n    },\r\n    gradeCard(card:GradeCardParamsType) {\r\n        return instance.put<AxiosResponse<ResponseCardsType>>(\"cards/grade\", card)\r\n    }\r\n}\r\n\r\n\r\n","import {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./store\";\r\nimport {\r\n    AddCardParamsType,\r\n    Card,\r\n    cardsApi,\r\n    GetCardsParamsType, GradeCardParamsType,\r\n    ResponseCardsType,\r\n    UpdateCardParamsType\r\n} from \"../dal/cardsListApi\";\r\nimport {setAppStatusAC, SetAppStatusActionType} from \"./app-reducer\";\r\n\r\n\r\nconst InitialCardsState = {\r\n    cards: [\r\n        {\r\n            answer: \"\",\r\n            question: \"\",\r\n            cardsPack_id: \"\",\r\n            grade: 0,\r\n            user_id: \"\",\r\n            shots: 0,\r\n            cardsCount: 0,\r\n            created: \"\",\r\n            updated: \"\",\r\n            _id: \"\",\r\n        }],\r\n    cardPacksTotalCount: 0,\r\n    maxGrade: 0,\r\n    minGrade: 0,\r\n    cardsParams: {\r\n        max: 0,\r\n        min: 0,\r\n        page: 0,\r\n        pageCount: 5,\r\n        sortCards: \"\",\r\n        cardsPack_id: \"\",\r\n        cardAnswer: \"\",\r\n        cardQuestion: \"\",\r\n    },\r\n    cardId: \"\",\r\n}\r\n\r\n//types\r\n/*type InitialCardsStateType = {\r\n    cards: Card[]\r\n    cardPacksTotalCount: number\r\n    cardsParams: CardsParamsType\r\n    maxGrade: number\r\n    minGrade: number\r\n}\r\n\r\nexport type CardsParamsType = {\r\n    /!*cardsPack_id: string\r\n    cardAnswer?: string\r\n    cardQuestion?: string\r\n    min?: number\r\n    max?: number\r\n    sortCards?: string\r\n    page?: number\r\n    pageCount?: number*!/\r\n    cardsPack_id: string,\r\n    max?: number,\r\n    min?: number,\r\n    page?: number,\r\n    pageCount?: number,\r\n    sortCards?: string,\r\n    cardAnswer?: string,\r\n    cardQuestion?: string,\r\n}*/\r\ntype InitialStateType = {\r\n    cards: Card[]\r\n    cardPacksTotalCount: number\r\n    cardsParams: CardsParamsType\r\n    maxGrade: number\r\n    minGrade: number\r\n    cardId: string\r\n}\r\nexport type CardsParamsType = {\r\n    max: number,\r\n    min: number,\r\n    page: number,\r\n    pageCount: number,\r\n    sortCards: string,\r\n    cardsPack_id: string\r\n    cardAnswer: string\r\n    cardQuestion: string\r\n\r\n}\r\n\r\n\r\nexport const cardsReducer = (state = InitialCardsState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case GET_CARDS:\r\n            return {\r\n                ...state,\r\n                cards: action.data.cards,\r\n                cardPacksTotalCount: action.data.cardsTotalCount,\r\n                maxGrade: action.data.maxGrade,//from here we get max allowed value for slider\r\n                minGrade: action.data.minGrade,//from here we get min allowed value for slider\r\n                cardsParams: {\r\n                    ...state.cardsParams,\r\n                    //cardsPack_id: action.data.packUserId,\r\n                    page: action.data.page,\r\n                    pageCount: action.data.pageCount,\r\n                }\r\n            }\r\n        case SET_CARDS_SORT_VALUE:\r\n            return {\r\n                ...state, cardsParams: {...state.cardsParams, sortCards: action.sortValue}\r\n            }\r\n        case SET_CARDS_PAGE:\r\n            return {\r\n                ...state, cardsParams: {...state.cardsParams, page: action.page}\r\n            }\r\n        case SET_CARDS_PAGE_COUNT:\r\n            return {\r\n                ...state, cardsParams: {...state.cardsParams, pageCount: action.pageCount}\r\n            }\r\n        case SET_CARDS_PACK_ID:\r\n            return {\r\n                ...state, cardsParams: {...state.cardsParams, cardsPack_id: action.cardsPackId}\r\n            }\r\n        case SET_CARDS_SEARCH_NAME:\r\n            return {\r\n                ...state, cardsParams: {...state.cardsParams, cardQuestion: action.cardQuestion, page: 1}\r\n            }\r\n        case SET_CARD_ID:\r\n            return {...state, cardId: action.cardId}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nconst GET_CARDS = \"card-learning/cards/GET-CARDS\"\r\nconst SET_CARDS_SORT_VALUE = \"card-learning/cards/SET-CARDS-SORT-VALUE\"\r\nconst SET_CARDS_PAGE = \"card-learning/cards/SET-CARDS-PAGE\"\r\nconst SET_CARDS_PAGE_COUNT = \"card-learning/cards/SET-CARDS-PAGE_COUNT\"\r\nconst SET_CARDS_PACK_ID = \"card-learning/cards/SET-CARDS-PACK-ID\"\r\nconst SET_CARDS_SEARCH_NAME = \"card-learning/cards/SET_CARDS_SEARCH_NAME\"\r\nconst SET_CARD_ID = \"card-learning/cards/SET_CARD_ID\"\r\n\r\nexport const GetCardsAC = (data: ResponseCardsType) => ({\r\n    type: GET_CARDS,\r\n    data,\r\n} as const);\r\n\r\nexport const SetCardsSortValueAC = (sortValue: string) => ({\r\n    type: SET_CARDS_SORT_VALUE,\r\n    sortValue\r\n} as const);\r\n\r\nexport const SetCardsPageAC = (page: number) => ({\r\n    type: SET_CARDS_PAGE,\r\n    page\r\n} as const);\r\n\r\n\r\nexport const SetCardsPageCountAC = (pageCount: number) => ({\r\n    type: SET_CARDS_PAGE_COUNT,\r\n    pageCount,\r\n} as const);\r\n\r\n\r\nexport const SetCardsPackIdAC = (cardsPackId: string) => ({\r\n    type: SET_CARDS_PACK_ID,\r\n    cardsPackId\r\n} as const);\r\n\r\nexport const SetCardsSearchNameAC = (cardQuestion: string) => ({\r\n    type: SET_CARDS_SEARCH_NAME,\r\n    cardQuestion\r\n} as const);\r\n\r\nexport const SetCardIdAC = (cardId: string) => ({\r\n    type: SET_CARD_ID,\r\n    cardId\r\n} as const);\r\n\r\n\r\n//thunks\r\nexport const getCardsTC = (data: GetCardsParamsType): GetThunk => (dispatch, getState) => {\r\n    if (data.sortCards && data.sortCards !== getState().cards.cardsParams.sortCards) {\r\n        dispatch(SetCardsSortValueAC(data.sortCards))\r\n    }\r\n    if (data.page) {\r\n        dispatch(SetCardsPageAC(data.page))\r\n    }\r\n    if (data.cardQuestion || data.cardQuestion === \"\") {\r\n        dispatch(SetCardsSearchNameAC(data.cardQuestion))\r\n    }\r\n\r\n    if (data.pageCount && data.pageCount !== getState().cards.cardsParams.pageCount) {\r\n        dispatch(SetCardsPageCountAC(data.pageCount))\r\n    }\r\n\r\n    if (data.cardsPack_id) {\r\n        dispatch(SetCardsPackIdAC(data.cardsPack_id))\r\n    }\r\n\r\n    const state = getState().cards.cardsParams\r\n    cardsApi.getCards(state)\r\n        .then(res => {\r\n            dispatch(GetCardsAC(res.data))\r\n        })\r\n}\r\n\r\nexport const addCardTC = (data: AddCardParamsType): GetThunk => (dispatch, getState: () => AppStateType) => {\r\n    cardsApi.addCard(data)\r\n        .then(() => {\r\n            const cardsPackId = getState().cards.cardsParams.cardsPack_id\r\n            dispatch(getCardsTC({cardsPack_id: cardsPackId}))\r\n        })\r\n        .catch(error => {\r\n            // dispatch(setErrorMessage(error.message ? error.message :\"Network error occurred!\"));\r\n            // dispatch(setForgotStatus(\"failed\"))\r\n        })\r\n}\r\n\r\nexport const updateCardTC = (data: UpdateCardParamsType): GetThunk => (dispatch, getState: () => AppStateType) => {\r\n    cardsApi.updateCard(data)\r\n        .then(() => {\r\n            const cardsPackId = getState().cards.cardsParams.cardsPack_id\r\n            dispatch(getCardsTC({cardsPack_id: cardsPackId}))\r\n        })\r\n        .catch(error => {\r\n            // dispatch(setErrorMessage(error.message ? error.message :\"Network error occurred!\"));\r\n            // dispatch(setForgotStatus(\"failed\"))\r\n        })\r\n}\r\nexport const deleteCardTC = (cardId: string): GetThunk => (dispatch, getState: () => AppStateType) => {\r\n    cardsApi.deleteCard(cardId)\r\n        .then(() => {\r\n            const cardsPackId = getState().cards.cardsParams.cardsPack_id\r\n            dispatch(getCardsTC({cardsPack_id: cardsPackId}))\r\n        })\r\n        .catch(error => {\r\n            // dispatch(setErrorMessage(error.message ? error.message :\"Network error occurred!\"));\r\n            // dispatch(setForgotStatus(\"failed\"))\r\n        })\r\n}\r\n\r\nexport const answerCardTC = (card:GradeCardParamsType, packId: string): GetThunk => (dispatch, getState: () => AppStateType) => {\r\n        cardsApi.gradeCard(card)\r\n            .then(()=> {\r\n            dispatch(getCardsTC({cardsPack_id:packId}))\r\n            })\r\n}\r\n\r\n//types\r\nexport type GetCardsType = ReturnType<typeof GetCardsAC>\r\nexport type SetCardsSortValueType = ReturnType<typeof SetCardsSortValueAC>\r\nexport type SetCardsPageType = ReturnType<typeof SetCardsPageAC>\r\nexport type SetCardsPageCountType = ReturnType<typeof SetCardsPageCountAC>\r\nexport type SetCardsPackIdType = ReturnType<typeof SetCardsPackIdAC>\r\nexport type SetCardsSearchNameType = ReturnType<typeof SetCardsSearchNameAC>\r\nexport type SetCardIdType = ReturnType<typeof SetCardIdAC>\r\n\r\ntype ActionsType = GetCardsType\r\n    | SetCardsSortValueType\r\n    | SetCardsPageType\r\n    | SetCardsPageCountType\r\n    | SetCardsPackIdType\r\n    | SetCardsSearchNameType\r\n    | SetCardIdType\r\n    |SetAppStatusActionType\r\n\r\n\r\nexport type GetThunk<ReturnType = void> = ThunkAction<ReturnType, AppStateType, unknown, ActionsType>\r\n","import * as React from \"react\";\r\nimport {ChangeEvent} from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport {Card} from \"../../dal/cardsListApi\";\r\nimport {updateCardTC} from \"../../bll/cards-reducer\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport {IconButton} from \"@mui/material\";\r\n\r\n\r\ntype ModalUpdateCardPropsType = {\r\n    cardId: string\r\n    cards: Array<Card>\r\n}\r\n\r\nexport const ModalUpdateCard = (props: ModalUpdateCardPropsType) => {\r\n\r\n    const cardUserId = props.cards.filter(c => c._id === props.cardId)[0]\r\n    const card= props.cards.filter(c => c._id === props.cardId)[0]\r\n    const userId = useSelector<AppStateType, string>(state => state.login.user._id)\r\n    const [open, setOpen] = React.useState(false);\r\n    const [question, setQuestion] = React.useState(card.question);\r\n    const [answer, setAnswer] = React.useState(card.answer);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleUpdateCard = () => {\r\n        dispatch(updateCardTC({card: {question, answer, _id: props.cardId}}))\r\n        setOpen(false);\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const onQuestionHandler = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        setQuestion(event.currentTarget.value)\r\n    }\r\n    const onAnswerHandler = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        setAnswer(event.currentTarget.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <IconButton disabled={userId !== cardUserId.user_id}\r\n                        onClick={handleClickOpen}>\r\n                <EditIcon/>\r\n            </IconButton>\r\n\r\n            <Dialog open={open} onClose={handleClose}>\r\n                <DialogTitle>Update card</DialogTitle>\r\n                <DialogContent>\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"name\"\r\n                        label=\"Question\"\r\n                        type=\"email\"\r\n                        fullWidth\r\n                        variant=\"standard\"\r\n                        onChange={onQuestionHandler}\r\n                        value={question}\r\n                    />\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"name\"\r\n                        label=\"Answer\"\r\n                        type=\"email\"\r\n                        fullWidth\r\n                        variant=\"standard\"\r\n                        onChange={onAnswerHandler}\r\n                        value={answer}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose}>Cancel</Button>\r\n                    <Button onClick={handleUpdateCard}>Update</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","import * as React from \"react\";\r\nimport {ChangeEvent} from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {deleteCardTC} from \"../../bll/cards-reducer\";\r\nimport {IconButton} from \"@mui/material\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport {Card} from \"../../dal/cardsListApi\";\r\n\r\n\r\ntype ModalDeleteCardPropsType = {\r\n    cardId: string\r\n    cards: Array<Card>\r\n}\r\n\r\nexport const ModalDeleteCard = (props: ModalDeleteCardPropsType) => {\r\n\r\n    //const cardsPack_id = useSelector<AppStateType, string>(state => state.cards.cardsParams.cardsPack_id)\r\n    //const card = props.cards.filter(c => c._id === props.cardId)[0]\r\n    const userId = useSelector<AppStateType,string>(state => state.login.user._id)\r\n    const [open, setOpen] = React.useState(false);\r\n    const [question, setQuestion] = React.useState(\"\");\r\n    const [answer, setAnswer] = React.useState(\"\");\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const cardUserId = props.cards.filter(c => c._id === props.cardId)[0]\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleDeleteCard = () => {\r\n        dispatch(deleteCardTC(props.cardId))\r\n        setOpen(false);\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const onQuestionHandler = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        setQuestion(event.currentTarget.value)\r\n    }\r\n    const onAnswerHandler = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        setAnswer(event.currentTarget.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            {/*<SuperButton callback={handleClickOpen} title={\"Delete\"}/>*/}\r\n            <IconButton disabled={userId !== cardUserId.user_id}\r\n                        onClick={handleClickOpen}><DeleteIcon/>\r\n            </IconButton>\r\n\r\n            <Dialog open={open} onClose={handleClose}>\r\n                <DialogTitle>Delete card</DialogTitle>\r\n                <DialogContent>\r\n                    Are you sure you want to delete the card?\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose}>Cancel</Button>\r\n                    <Button onClick={handleDeleteCard}>Delete</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","import Paper from \"@mui/material/Paper\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport Button from \"@mui/material/Button\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport * as React from \"react\";\r\nimport {useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport {getCardsTC, SetCardIdAC} from \"../../bll/cards-reducer\";\r\nimport {Card} from \"../../dal/cardsListApi\";\r\nimport Rating from \"@mui/material/Rating\";\r\nimport {ModalUpdateCard} from \"../utils/ModalUpdateCard\";\r\nimport {ModalDeleteCard} from \"../utils/ModalDeleteCard\";\r\n\r\ntype CardsPropsType = {\r\n    cards: Array<Card>\r\n}\r\n\r\nexport const CardsTable = (props: CardsPropsType) => {\r\n\r\n    const cardsPack_id = useSelector<AppStateType, string>(state => state.cards.cardsParams.cardsPack_id)\r\n\r\n\r\n    const [name, setName] = useState(true)\r\n    const [cardsCount, setCardsCount] = useState(true)\r\n    const [created, setCreated] = useState(true)\r\n    const [updated, setUpdated] = useState(true)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const sort = (value: boolean, sortName: string, dispatch: any) => {\r\n        if (value) {\r\n            dispatch(getCardsTC({sortCards: `${1}${sortName}`, cardsPack_id}))\r\n        } else {\r\n            dispatch(getCardsTC({sortCards: `${0}${sortName}`, cardsPack_id}))\r\n        }\r\n    }\r\n\r\n    const onSortHandler = (sortName: string) => {\r\n        if (sortName === \"name\") {\r\n            setName(!name)\r\n            sort(name, sortName, dispatch)\r\n        }\r\n        if (sortName === \"cardsCount\") {\r\n            setCardsCount(!cardsCount)\r\n            sort(cardsCount, sortName, dispatch)\r\n\r\n        }\r\n        if (sortName === \"created\") {\r\n            setCreated(!created)\r\n            sort(created, sortName, dispatch)\r\n        }\r\n        if (sortName === \"updated\") {\r\n            setUpdated(!updated)\r\n            sort(updated, sortName, dispatch)\r\n        }\r\n\r\n    }\r\n\r\n    const updateCardHandler = (cardId: string) => {\r\n        dispatch(SetCardIdAC(cardId))\r\n    }\r\n\r\n\r\n    const styleHeaderButton = {\r\n        color: \"black\"\r\n    }\r\n    const styleActionsButton = {\r\n        backgroundColor: \"#D7D8EF\",\r\n        marginLeft: \"10px\"\r\n    }\r\n    return (\r\n        <div>\r\n            <TableContainer component={Paper}\r\n                            style={{maxHeight: 500, minHeight: 500, minWidth: 1350, maxWidth: 1350, marginTop: 20}}>\r\n                <Table aria-label=\"simple table\">\r\n                    <TableHead style={{backgroundColor: \"#8CE0EB\"}}>\r\n                        <TableRow>\r\n                            <TableCell align=\"left\">\r\n                                <Button style={styleHeaderButton} variant=\"text\"\r\n                                        onClick={() => onSortHandler(\"name\")}>Question⮃</Button>\r\n                            </TableCell>\r\n                            <TableCell align=\"left\">\r\n                                <Button style={styleHeaderButton} variant=\"text\"\r\n                                        onClick={() => onSortHandler(\"cardsCount\")}>Answer⮃</Button>\r\n                            </TableCell>\r\n                            <TableCell align=\"left\">\r\n                                <Button style={styleHeaderButton} variant=\"text\"\r\n                                        onClick={() => onSortHandler(\"created\")}>Last Updated⮃</Button>\r\n                            </TableCell>\r\n                            <TableCell align=\"left\">\r\n                                <Button style={styleHeaderButton} variant=\"text\"\r\n                                        onClick={() => onSortHandler(\"updated\")}>Grade⮃</Button>\r\n                            </TableCell>\r\n                            <TableCell align=\"left\">\r\n                                ACTIONS\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {props.cards.map((row, index) => (\r\n                            <TableRow\r\n                                key={`${index}${row.question}`}\r\n                                sx={{\r\n                                    \"&:last-child td, &:last-child th\": {border: 0}, \"&:nth-of-type(odd)\": {\r\n                                        backgroundColor: \"#F8F7FD\",\r\n                                    },\r\n                                }}\r\n                            >\r\n                                <TableCell component=\"th\" scope=\"row\" align=\"left\"\r\n                                           style={{maxWidth: 100, minWidth: 100, wordWrap: \"break-word\"}}>\r\n                                    {row.question}\r\n                                </TableCell>\r\n                                <TableCell align=\"left\">{row.answer}</TableCell>\r\n                                <TableCell align=\"left\">{row.created.substring(0, 10)}</TableCell>\r\n                                <TableCell align=\"left\">\r\n                                    <Rating\r\n                                        value={row.grade}\r\n                                        readOnly\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell align=\"left\" style={{display: \"flex\"}}>\r\n                                    <ModalUpdateCard cardId={row._id} cards={props.cards}/>\r\n                                    <ModalDeleteCard cardId={row._id} cards={props.cards}/>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\n\r\n\r\ntype SuperButtonPropsType = {\r\n    callback: () => void\r\n    title: string\r\n}\r\n\r\nexport const SuperButton: React.FC<SuperButtonPropsType> = ({callback, title}) => {\r\n\r\n    return (<>\r\n            <Button style={{backgroundColor: \"white\", color: \"#2D2E46\"}} onClick={callback} variant={\"contained\"}>{title}</Button>\r\n        </>\r\n\r\n    )\r\n}\r\n","import * as React from \"react\";\r\nimport {ChangeEvent} from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addCardTC} from \"../../bll/cards-reducer\";\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport {SuperButton} from \"./Controls/SuperButton\";\r\n\r\nexport const ModalAddCard = () => {\r\n\r\n    const cardsPack_id = useSelector<AppStateType, string>(state => state.cards.cardsParams.cardsPack_id)\r\n    const [open, setOpen] = React.useState(false);\r\n    const [question, setQuestion] = React.useState(\"\");\r\n    const [answer, setAnswer] = React.useState(\"\");\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleAddCard = () => {\r\n\r\n        dispatch(addCardTC({question, answer, cardsPack_id}))\r\n        setOpen(false);\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const onQuestionHandler = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        setQuestion(event.currentTarget.value)\r\n    }\r\n    const onAnswerHandler = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        setAnswer(event.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            <SuperButton callback={handleClickOpen} title={\"Create new card\"}/>\r\n\r\n            <Dialog open={open} onClose={handleClose}>\r\n                <DialogTitle>Create new card</DialogTitle>\r\n                <DialogContent>\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"name\"\r\n                        label=\"Question\"\r\n                        type=\"email\"\r\n                        fullWidth\r\n                        variant=\"standard\"\r\n                        onChange={onQuestionHandler}\r\n                    />\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"name\"\r\n                        label=\"Answer\"\r\n                        type=\"email\"\r\n                        fullWidth\r\n                        variant=\"standard\"\r\n                        onChange={onAnswerHandler}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose}>Cancel</Button>\r\n                    <Button onClick={handleAddCard}>Add</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport Search from \"../utils/Controls/Search\";\r\nimport ShowItemsPerPage from \"../utils/Controls/ShowItemsPerPage\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport {CardsTable} from \"./CardsTable\";\r\nimport {Card} from \"../../dal/cardsListApi\";\r\nimport {useNavigate, useParams} from \"react-router-dom\";\r\nimport {getCardsTC} from \"../../bll/cards-reducer\";\r\nimport {SuperButton} from \"../utils/Controls/SuperButton\";\r\nimport {ModalAddCard} from \"../utils/ModalAddCard\";\r\nimport {PaginationPage} from \"../utils/Controls/PaginationPage\";\r\n\r\n\r\nconst CardListsContainer = () => {\r\n\r\n    const cards = useSelector<AppStateType, Array<Card>>(state => state.cards.cards)\r\n    const packsAmount = useSelector<AppStateType, number>(state => state.cards.cardPacksTotalCount)\r\n    const currentPage: number = useSelector<AppStateType, number>(state => state.cards.cardsParams.page)\r\n    const pageCount: number = useSelector<AppStateType, number>(state => state.cards.cardsParams.pageCount)\r\n    const dispatch = useDispatch()\r\n    const nav = useNavigate()\r\n    const {packId} = useParams() as {\r\n        packId: string;\r\n    }\r\n\r\n    const getCards = (searchTerm: string) => dispatch(getCardsTC({cardQuestion: searchTerm, cardsPack_id: packId}))\r\n    const changePageCards = (page: number) => dispatch(getCardsTC({page, cardsPack_id: packId}))\r\n    const setItemsCountOnPage = (pageCount: number) => dispatch(getCardsTC({pageCount, cardsPack_id: packId}))\r\n    const getBackPacksTableHandler = () => {\r\n        nav(\"/packs-list\")\r\n    }\r\n    const addCardHandler = () => {\r\n        return\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={\"main\"}>\r\n            <div className=\"mainBlock\">\r\n                <div>\r\n                    <SuperButton callback={getBackPacksTableHandler} title={\"← Go to packs\"}/>\r\n                    <Search getSearchResult={getCards} searchResult={packsAmount} title={\"cards were founded\"}/>\r\n                    <ModalAddCard/>\r\n                    <CardsTable cards={cards}/>\r\n                    <div className={\"bottom__panel\"}>\r\n                        <PaginationPage changePage={changePageCards} currentPage={currentPage} pageCount={pageCount}\r\n                                        itemTotalCount={packsAmount}/>\r\n                        <ShowItemsPerPage setPageCount={setItemsCountOnPage} pageCount={pageCount}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardListsContainer\r\n","import React from \"react\"\r\nimport Grid from \"@mui/material/Grid\";\r\nimport style from \"./Learn.module.css\"\r\nimport {useNavigate, useParams} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {answerCardTC, getCardsTC} from \"../../bll/cards-reducer\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Radio from \"@mui/material/Radio\";\r\nimport RadioGroup from \"@mui/material/RadioGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport {RequestStatusType} from \"../../bll/app-reducer\";\r\n\r\ntype LearnPropsType = {\r\n    card: {\r\n        answer: string\r\n        question: string\r\n        cardsPack_id: string\r\n        grade: number\r\n        user_id: string\r\n        shots: number\r\n        cardsCount: number\r\n        created: string\r\n        updated: string\r\n        _id: string\r\n    }\r\n    grades: Array<string>\r\n    packId: string\r\n\r\n}\r\n\r\n\r\nexport const Learn = (props: LearnPropsType) => {\r\n    const isLoading = useSelector<AppStateType, RequestStatusType>(state => state.app.status)\r\n    const [showAnswer, setShowAnswer] = React.useState(false)\r\n    const [gradeChoose, setGradeChoose] = React.useState<string>(\"\")\r\n    const dispatch = useDispatch();\r\n    const nav = useNavigate();\r\n    const gradesObj = {\r\n        \"не знал\": 1,\r\n        \"знал, но забыл\": 2,\r\n        \"сомневался\": 3,\r\n        \"перепутал\": 4,\r\n        \"знал\": 5,\r\n    }\r\n\r\n\r\n    const {packId} = useParams() as {\r\n        packId: string;\r\n    }\r\n\r\n    const gradeHandler = () => {\r\n        // @ts-ignore\r\n        const value = gradesObj[gradeChoose]\r\n        dispatch(answerCardTC({grade: value, card_id: props.card._id}, props.packId))\r\n        setShowAnswer(false)\r\n        setGradeChoose(\"\")\r\n    }\r\n\r\n\r\n\r\n    const resetQuestionHandler = () => {\r\n        dispatch(getCardsTC({cardsPack_id: props.packId}))\r\n        setGradeChoose(\"\")\r\n    }\r\n    const onChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setGradeChoose((event.target as HTMLInputElement).value)\r\n    }\r\n\r\n    const showAnswerHandler = () => {\r\n        setShowAnswer(true)\r\n    }\r\n\r\n\r\n    return <div className={\"main\"}>\r\n        <div className={style.learnBlock}>\r\n            <div className={style.container}>\r\n                <Grid container justifyContent={\"center\"}>\r\n                    <Grid item justifyContent={\"center\"}>\r\n                        <div className={style.questionBlock}>\r\n                            <div>\r\n                                <h3>{props.card.question}</h3>\r\n                            </div>\r\n                            <div className={!showAnswer ? style.answerBlock : \"\"}>\r\n                                {props.card.answer}\r\n                            </div>\r\n                            <div>\r\n                                <Button variant={\"contained\"} onClick={\r\n                                    showAnswerHandler}>Show answer</Button>\r\n                            </div>\r\n                        </div>\r\n                        <div className={style.radioBlock}>\r\n                            <div className={style.gradesBlock}>\r\n\r\n                                <FormControl component=\"fieldset\">\r\n                                    <FormLabel component=\"legend\"><h3>Rate yourself:</h3></FormLabel>\r\n                                    <RadioGroup\r\n                                        aria-label=\"gender\"\r\n                                        defaultValue=\"female\"\r\n                                        name=\"radio-buttons-group\"\r\n                                        value={gradeChoose}\r\n                                        onChange={onChangeHandler}\r\n                                    >\r\n                                        {props.grades.map((grade, index) => {\r\n                                            return (\r\n                                                <Box key={index}>\r\n                                                    <FormControlLabel value={grade} control={<Radio/>} label={grade}/>\r\n                                                </Box>)\r\n                                        })}\r\n                                    </RadioGroup>\r\n                                </FormControl>\r\n                            </div>\r\n                            <div className={style.buttonBlock}>\r\n                                <Button variant={\"contained\"} onClick={resetQuestionHandler}>Cancel</Button>\r\n                                <Button onClick={gradeHandler} variant={\"contained\"}\r\n                                        disabled={gradeChoose === \"\"}>Next</Button>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n","import {useEffect, useState} from \"react\";\r\nimport {Card} from \"../../dal/cardsListApi\";\r\nimport {Learn} from \"./Learn\";\r\n\r\n\r\nconst grades = [\"не знал\", \"знал, но забыл\", \"сомневался\", \"перепутал\", \"знал\"]\r\n\r\n\r\nconst randomCount = (min: number, max: number) => {\r\n    return Math.floor(max / (Math.random() * max + min))\r\n}\r\n\r\nconst getRandomCard = (arr: Array<Card>) => {\r\n    let newArr = []\r\n    while (newArr.length < 1) {\r\n        for(let i = 0; i<arr.length; i+=1){\r\n            if (arr[i].grade === randomCount(1, 6)) {\r\n                newArr.push(arr[i])\r\n            }\r\n        }\r\n    }\r\n    return newArr\r\n}\r\n\r\ntype CardsPropsType = {\r\n    cards: Array<Card>\r\n    packId: string\r\n    maxGrade: number\r\n    minGrade: number\r\n}\r\n\r\n\r\nexport const LearnPage = (props: CardsPropsType) => {\r\n\r\n    const [newArray, setNewArray] = useState<Array<Card>>([...props.cards])\r\n    const newData = getRandomCard(newArray)\r\n    const question = newData[Math.floor(Math.random() * newData.length)]\r\n\r\n    useEffect(() => {\r\n        setNewArray([...props.cards])\r\n    }, [props.cards])\r\n\r\n    return <div>\r\n        {question && <Learn card={question} grades={grades} packId={props.packId}/>}\r\n    </div>\r\n}\r\n","import React from \"react\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\nconst Preloader = () => {\r\n    return (<div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%', opacity: 0.5}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader\r\n","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport {Card} from \"../../dal/cardsListApi\";\r\nimport {useEffect} from \"react\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {getCardsTC} from \"../../bll/cards-reducer\";\r\nimport {LearnPage} from \"./LearnPage\";\r\nimport Preloader from \"../utils/Preloader\";\r\n\r\n\r\nexport const LearnPageContainer = () => {\r\n    const cards = useSelector<AppStateType, Array<Card>>(state => state.cards.cards)\r\n    const totalCardsAmount = useSelector<AppStateType, number>(state => state.cards.cardPacksTotalCount)\r\n    const maxGrade = useSelector<AppStateType, number>(state => state.cards.maxGrade)\r\n    const minGrade = useSelector<AppStateType, number>(state => state.cards.minGrade)\r\n\r\n    const {packId} = useParams() as {\r\n        packId: string;\r\n    }\r\n\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(getCardsTC({cardsPack_id: packId, pageCount:totalCardsAmount}))\r\n    }, [])\r\n\r\n    if(!cards[0]._id) {\r\n        return <Preloader/>\r\n    }\r\n\r\n\r\n    return <div><LearnPage cards={cards} packId={packId} maxGrade={maxGrade} minGrade={minGrade}/></div>\r\n}\r\n","import React from 'react';\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport ForgotPassword from \"../../components/forgotPassword/ForgotPassword\";\r\nimport Login from \"../../components/login/Login\";\r\nimport Profile from \"../../components/profile/Profile\";\r\nimport RecoveryPassword from \"../../components/recoveryPassword/RecoveryPassword\";\r\nimport Registration from \"../../components/registration/Registration\";\r\nimport NotFound from \"../../components/notFound/NotFound\";\r\nimport CheckEmail from \"../../components/forgotPassword/CheckEmail\";\r\nimport PacksListsContainer from \"../../components/PacksList/PackLIstsContainer\";\r\nimport CardListsContainer from \"../../components/PacksList/CardLIstsContainer\";\r\nimport {LearnPageContainer} from '../../components/PacksList/LearnPageContainer';\r\n\r\nconst Main = () => {\r\n\r\n    return (\r\n        <Routes >\r\n            <Route path='/login' element={<Login/>}/>\r\n            <Route path='/' element={<Login/>}/>\r\n            <Route path='/forgot-password' element={<ForgotPassword/>}/>\r\n            <Route path='/profile' element={<Profile/>}/>\r\n            <Route path='/recovery-password/:token' element={<RecoveryPassword/>}/>\r\n            <Route path='/packs-list' element={<PacksListsContainer/>}/>\r\n            <Route path='/cards-list/:packId' element={<CardListsContainer/>}/>\r\n            <Route path='/registration' element={<Registration/>}/>\r\n            <Route path='/404' element={<NotFound/>}/>\r\n            <Route path='/check-email/:email' element={<CheckEmail/>}/>\r\n            <Route path=\"*\" element={<Navigate to=\"/404\" />}/>\r\n            <Route path='/learn-page/:packId' element={<LearnPageContainer/>}/>\r\n        </Routes>\r\n    )\r\n}\r\n\r\nexport default Main;\r\n","import { createTheme } from '@material-ui/core/styles';\r\n\r\nexport default createTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#73926C',\r\n            contrastText: '#fff',\r\n        },\r\n        secondary: {\r\n            main: '#EDA909',\r\n            contrastText: '#fff',\r\n        },\r\n\r\n    }\r\n});\r\n","import React, {useEffect} from \"react\";\r\nimport \"./App.css\";\r\nimport Header from \"./ui/ui-header/Header\";\r\nimport Main from \"./ui/ui-main/Main\";\r\nimport {MuiThemeProvider} from \"@material-ui/core/styles\";\r\nimport MyTheme from \"./MyTheme\";\r\nimport {initializeAppTC, RequestStatusType} from \"./bll/app-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"./bll/store\";\r\nimport Preloader from \"./components/utils/Preloader\";\r\n\r\nfunction App() {\r\n    const isLoading = useSelector<AppStateType, RequestStatusType>(state => state.app.status)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (isLoading === 'loading')\r\n        return <Preloader />\r\n\r\n    return (\r\n        <MuiThemeProvider theme={MyTheme}>\r\n            <div className={\"App\"}>\r\n                <Header/>\r\n                <Main/>\r\n            </div>\r\n        </MuiThemeProvider>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","let initialState = {\r\n\r\n};\r\n\r\nexport type LoginInitialStateType = typeof initialState\r\n\r\n//Reducer\r\nexport const profileReducer = (state = initialState, action: any): LoginInitialStateType => {\r\n    switch (action.type) {\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\n\r\n// actions\r\n\r\n\r\n//thunks\r\n\r\n// Action Creators\r\n\r\n\r\n\r\n// type ActionsTypes\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from 'redux-thunk';\r\nimport {loginReducer} from \"./login-reducer\";\r\nimport {forgotPasswordReducer} from \"./forgotPassword-reducer\";\r\nimport {setNewPasswordReducer} from \"./setNewPassword-reducer\";\r\nimport {registrationReducer} from \"./registration-reducer\";\r\nimport {profileReducer} from \"./profile-reducer\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {packsReducer} from \"./packs-reducer\";\r\nimport {cardsReducer} from \"./cards-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    login: loginReducer,\r\n    forgot: forgotPasswordReducer,\r\n    newPassword: setNewPasswordReducer,\r\n    registration: registrationReducer,\r\n    profile: profileReducer,\r\n    app: appReducer,\r\n    packs: packsReducer,\r\n    cards: cardsReducer\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never;\r\nexport type InferActionTypes<T extends { [key: string]: (...args: any) => any }> = ReturnType<PropertiesType<T>>\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\nexport default // @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport App from \"./App\";\r\nimport store from \"./bll/store\";\r\n//comment\r\nReactDOM.render(\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App />\r\n            </Provider>\r\n        </HashRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"learnBlock\":\"Learn_learnBlock__26kqk\",\"container\":\"Learn_container__2x0wW\",\"answerBlock\":\"Learn_answerBlock__2h-Gi\",\"questionBlock\":\"Learn_questionBlock__1QZDA\",\"gradesBlock\":\"Learn_gradesBlock__1pcYl\",\"buttonBlock\":\"Learn_buttonBlock__3b-Cy\",\"radioBlock\":\"Learn_radioBlock__dOxUM\"};"],"sourceRoot":""}