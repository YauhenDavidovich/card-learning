{"version":3,"sources":["reportWebVitals.ts","dal/authApi.ts","bll/login-reducer.ts","ui/ui-header/Header.tsx","dal/restorePasswordApi.ts","bll/forgotPassword-reducer.ts","components/forgotPassword/ForgotPassword.tsx","components/login/Login.tsx","dal/initialize-api.ts","bll/app-reducer.ts","components/profile/Profile.tsx","bll/setNewPassword-reducer.ts","components/recoveryPassword/RecoveryPassword.tsx","dal/registration-api.ts","bll/registration-reducer.ts","components/registration/Registration.tsx","components/notFound/NotFound.tsx","components/forgotPassword/CheckEmail.tsx","ui/ui-main/Main.tsx","App.tsx","bll/profile-reducer.ts","bll/store.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","authApi","data","post","delete","initialState","email","login","idUser","isAuth","user","_id","name","avatar","publicCardPacksCount","created","Date","updated","isAdmin","verified","rememberMe","error","LOGIN","LOGOUT","SETUSER","SetUserAC","type","loginTC","dispatch","res","catch","err","logOutTC","Header","useDispatch","useSelector","state","className","to","Button","color","onClick","restorePasswordApi","IsRequestNewPasswordSent","message","IS_REQUEST_NEW_PASSWORD_SENT","SET_REQUEST_MESSAGE","setRequestMessage","requestForgotPasswordTC","from","success","ForgotPassword","React","memo","isEmailRequestSend","forgot","responseError","useState","setEmail","history","useNavigate","formik","useFormik","initialValues","validate","values","errors","test","onSubmit","resetForm","Grid","container","justifyContent","item","handleSubmit","FormControl","FormLabel","Box","component","sx","marginTop","marginBottom","style","textAlign","FormGroup","direction","alignItems","TextField","label","margin","placeholder","getFieldProps","touched","variant","Login","password","padding","value","onChange","handleChange","onBlur","handleBlur","Link","RouterLink","authAPI","status","isInitialized","Profile","app","navigate","useEffect","finally","isInitialazed","src","position","top","width","CircularProgress","isNewPasswordSet","SET_NEW_PASSWORD","RecoveryPassword","isNewPasswordSend","newPassword","token","useParams","length","resetPasswordToken","info","isPasswordSet","Container","maxWidth","background","height","borderRadius","spacing","display","flexDirection","id","alignSelf","boxShadow","registrationAPI","isRegistered","Registration","confirmPassword","alert","m","Main","CheckEmail","path","element","NotFound","theme","createTheme","palette","primary","main","secondary","App","rootReducer","combineReducers","action","registration","profile","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b91a1e2.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios, { AxiosResponse } from 'axios'\r\n\r\n\r\nexport type LoginParamsType={\r\n    email:string\r\n    password: string\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0\",\r\n    withCredentials: true,\r\n})\r\n\r\nexport const authApi = {\r\n    logIn(data:LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseUserType>>('/auth/login',data)\r\n    },\r\n    logOut(){\r\n        return instance.delete('/auth/me')\r\n    }\r\n}\r\n\r\nexport type ResponseUserType = {\r\n    _id:string\r\n    email:string\r\n    name:string\r\n    avatar?:string\r\n    publicCardPacksCount: number\r\n    created: Date\r\n    updated: Date\r\n    isAdmin: boolean\r\n    verified: boolean\r\n    rememberMe: boolean\r\n    error?: string\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {authApi, LoginParamsType, ResponseUserType} from \"../dal/authApi\";\r\n\r\nlet initialState:LoginInitialStateType = {\r\n    email: \"\",\r\n    login: \"\",\r\n    idUser: \"\",\r\n    isAuth: false,\r\n    user: {\r\n        _id:'',\r\n        email:'',\r\n        name:'',\r\n        avatar:'',\r\n        publicCardPacksCount: 0,\r\n        created: new Date,\r\n        updated: new Date,\r\n        isAdmin: false,\r\n        verified: false,\r\n        rememberMe: false,\r\n        error: ''\r\n    }\r\n};\r\n\r\nexport type LoginInitialStateType = {\r\n    email: string\r\n    login: string\r\n    idUser:string\r\n    isAuth: boolean\r\n    user: ResponseUserType\r\n}\r\n\r\n//Reducer\r\nexport const loginReducer = (state:LoginInitialStateType = initialState, action: ActionsTypes): LoginInitialStateType => {\r\n    switch (action.type) {\r\n        case LOGIN:\r\n            return {\r\n                ...state,\r\n                email: action.email,\r\n                idUser: action._id,\r\n                isAuth: action.isAuth,\r\n            }\r\n        case LOGOUT:\r\n            return {\r\n                ...state,\r\n                email: action.email,\r\n                idUser: action._id,\r\n                isAuth: action.isAuth,\r\n            }\r\n        case SETUSER:\r\n            return {\r\n                ...state,\r\n                user: action.data\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// actions\r\nconst LOGIN = 'card-learning/login/LOG-IN';\r\nconst LOGOUT = 'card-learning/login/LOG-OUT';\r\nconst SETUSER = 'card-learning/login/SET-USER';\r\n\r\n// Action Creators\r\nexport const SetIsLoggedIn = (email: string, _id: string,isAuth: boolean) => ({\r\n    type: LOGIN,\r\n    email,\r\n    _id,\r\n    isAuth,\r\n} as const);\r\n\r\nexport const SetIsLoggedOut = (email: string, _id: string, isAuth: boolean) => ({\r\n    type: LOGOUT,\r\n    email,\r\n    _id,\r\n    isAuth\r\n} as const);\r\n\r\nexport const SetUserAC = (data:ResponseUserType) => ({\r\n    type: SETUSER,\r\n    data,\r\n} as const);\r\n\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    authApi.logIn(data)\r\n\r\n        .then(res => {\r\n            dispatch(SetIsLoggedIn(res.data.email, res.data._id,true))\r\n            dispatch(SetUserAC(res.data))\r\n        })\r\n        .catch(err => {\r\n            // console.log({...err})\r\n            // const error = err.res ?\r\n            //     err.res.data.error :\r\n            //     (err.message + ', more details in the console')\r\n        })\r\n}\r\n\r\nexport const logOutTC=()=>(dispatch: Dispatch)=>{\r\n     authApi.logOut()\r\n        .then(res => {\r\n            dispatch(SetIsLoggedOut('','',false))\r\n            dispatch(SetUserAC(res.data))\r\n\r\n        })}\r\n\r\n\r\nexport type SetUserType = ReturnType<typeof SetUserAC>\r\nexport type SetIsLoggedInType = ReturnType<typeof SetIsLoggedIn>;\r\nexport type SetIsLoggedOutType = ReturnType<typeof SetIsLoggedOut>;\r\ntype ActionsTypes = SetIsLoggedOutType | SetIsLoggedInType | SetUserType\r\n","import React, {useEffect} from 'react';\r\nimport {NavLink, useNavigate} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {logOutTC} from \"../../bll/login-reducer\";\r\nimport {initializeAppTC} from \"../../bll/app-reducer\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\nconst Header = () => {\r\n    const dispatch = useDispatch()\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.login.isAuth)\r\n    function handleLogout() {\r\n        dispatch(logOutTC())\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={\"header\"}>\r\n            <NavLink to=\"/login\">Login</NavLink>\r\n            <NavLink to=\"/forgot-password\">Forgot Password</NavLink>\r\n            <NavLink to=\"/recovery-password\">Recovery Password</NavLink>\r\n            <NavLink to=\"/profile\">Profile</NavLink>\r\n            <NavLink to=\"/registration\">Registration</NavLink>\r\n            {isAuth && <Button color='inherit' onClick={handleLogout}>Logout</Button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0\",\r\n    // baseURL: process.env.REACT_APP_API_PATH,\r\n    withCredentials: true\r\n});\r\n\r\nexport const restorePasswordApi = {\r\n\r\n    requestForgotPassword(data: ForgotRequestDataType) {\r\n        return instance.post<CheckEmailResponseType>('auth/forgot', data )\r\n    },\r\n    setNewPassword(data: NewPasswordRequestType) {\r\n        return instance.post<NewPasswordResponseType>('auth/set-new-password', data)\r\n    }\r\n}\r\n\r\nexport type ForgotRequestDataType = {\r\n    email: string\r\n    from: string\r\n    message: string\r\n}\r\n\r\nexport type CheckEmailResponseType = {\r\n    info: string | null\r\n    answer: boolean\r\n    html: boolean\r\n    success: boolean\r\n}\r\n\r\nexport type NewPasswordRequestType = {\r\n    password: string\r\n    resetPasswordToken: string\r\n}\r\n\r\nexport type NewPasswordResponseType = {\r\n    info: string\r\n    error: string\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {restorePasswordApi} from \"../dal/restorePasswordApi\";\r\n\r\nlet initialState = {\r\n    IsRequestNewPasswordSent: false,\r\n    message: null as string | null\r\n\r\n};\r\n\r\nexport type LoginInitialStateType = typeof initialState;\r\n\r\n//Reducer\r\nexport const forgotPasswordReducer = (state = initialState, action: ActionTypes): LoginInitialStateType => {\r\n    switch(action.type) {\r\n        case IS_REQUEST_NEW_PASSWORD_SENT :\r\n            return {...state, IsRequestNewPasswordSent: action.IsRequestNewPasswordSent}\r\n        case SET_REQUEST_MESSAGE:\r\n            return {...state, message: action.message}\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// actions\r\nconst IS_REQUEST_NEW_PASSWORD_SENT   = 'card-learning/forgot/IS_REQUEST_NEW_PASSWORD_SENT';\r\nconst SET_REQUEST_MESSAGE   = 'card-learning/forgot/SET_MESSAGE';\r\n\r\n// action Creators\r\nexport const checkIsRequestNewPasswordSent = (IsRequestNewPasswordSent: boolean) => ({ type: IS_REQUEST_NEW_PASSWORD_SENT, IsRequestNewPasswordSent } as const);\r\nexport const setRequestMessage = (message: string | null) => ({ type: SET_REQUEST_MESSAGE , message } as const);\r\n\r\n//thunks\r\nexport const requestForgotPasswordTC = (email: string, from: string, message: string) => (dispatch: Dispatch) => {\r\n\r\n    restorePasswordApi.requestForgotPassword({ email, from, message })\r\n        // @ts-ignore\r\n        .then(res => {\r\n            if(res.data.success) {\r\n                dispatch(checkIsRequestNewPasswordSent(true))\r\n                dispatch(setRequestMessage(\"Check your email please\"))\r\n            } else {\r\n                dispatch(setRequestMessage(\"Something went wrong\"))\r\n            }\r\n        }\r\n        )\r\n        .catch(error => {\r\n            dispatch(setRequestMessage(error.message ? error.message :\"Network error occurred!\"));\r\n        })\r\n\r\n\r\n}\r\n\r\n\r\n// type ActionsTypes =\r\nexport type CheckIsRequestNewPasswordSentType = ReturnType<typeof checkIsRequestNewPasswordSent>;\r\nexport type SetRequestMessageType = ReturnType<typeof setRequestMessage>;\r\nexport type ActionTypes = CheckIsRequestNewPasswordSentType | SetRequestMessageType;\r\n","import React, {useState} from 'react';\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {Navigate, useNavigate} from \"react-router-dom\";\r\nimport {requestForgotPasswordTC} from \"../../bll/forgotPassword-reducer\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from '@material-ui/core/Box';\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Container from '@material-ui/core/Container';\r\nimport Button from '@material-ui/core/Button';\r\n\r\ntype ForgotProps = {}\r\ntype FormikErrorType = {\r\n    email?: string\r\n}\r\n\r\nconst ForgotPassword: React.FC<ForgotProps> = React.memo(() => {\r\n\r\n    //ForgotPassword component state\r\n    const isEmailRequestSend = useSelector<AppStateType, boolean>(state => state.forgot.IsRequestNewPasswordSent);\r\n    const responseError = useSelector<AppStateType, string | null>(state => state.forgot.message)\r\n    const dispatch = useDispatch();\r\n    const [email, setEmail] = useState('')\r\n\r\n\r\n    const message =\r\n        `<div style=\"background-color: lime; padding: 15px\">\r\n            password recovery link:\r\n            <a href=\"http://localhost:3000/recovery-password/$token$\">link</a> \r\n          </div>`\r\n\r\n    let history = useNavigate();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Please type your email!';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            return errors;\r\n\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(requestForgotPasswordTC(values.email, \"davidovich336@gmail.com\", message))\r\n            setEmail(\"/check-email/\" + values.email)\r\n            formik.resetForm()\r\n        },\r\n    });\r\n\r\n    if (isEmailRequestSend) {\r\n        return <Navigate to={email}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={\"main\"}>\r\n            <div className='mainBlock'>\r\n                <Grid container justifyContent={\"center\"}>\r\n                    <Grid item justifyContent={\"center\"}>\r\n                        <form onSubmit={formik.handleSubmit}                        >\r\n                            <FormControl>\r\n                                <FormLabel>\r\n                                    <Box component=\"span\" sx={{marginTop: \"20px\", marginBottom: \"10px\"}}>\r\n                                        <h2 style={{textAlign: 'center'}}>Forgot your password?</h2>\r\n                                    </Box>\r\n                                </FormLabel>\r\n\r\n                                <FormGroup>\r\n                                    <Grid container justifyContent={\"space-between\"} direction={\"column\"}\r\n                                          alignItems={'center'}>\r\n                                        <TextField  type=\"email\" label=\"Email\"\r\n                                                   margin=\"normal\"\r\n                                            color={\"primary\"}\r\n                                            placeholder={\"Email\"}\r\n                                            {...formik.getFieldProps(\"email\")}\r\n                                        />\r\n                                        {formik.touched.email && formik.errors.email &&\r\n                                        <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                                        {responseError && <div style={{color: 'red'}}>{responseError}</div>}\r\n\r\n                                        <Grid container justifyContent={\"center\"}>\r\n                                            <Grid item justifyContent={\"center\"}>\r\n                                            <h4>Enter your email address and we will send you further instructions</h4>\r\n                                            </Grid>\r\n                                            </Grid>\r\n                                        <Button variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                type=\"submit\"\r\n                                            // disabled={forgotStatus === \"loading\"}\r\n                                        >Send Instructions</Button>\r\n                                        <Box>\r\n                                            <h4>Did you remember your password?</h4>\r\n                                        </Box>\r\n                                        <Button variant=\"contained\"\r\n                                                color=\"secondary\"\r\n                                            // disabled={forgotStatus === \"loading\"}\r\n                                                onClick={() => {\r\n                                                    history('/login')\r\n                                                }}>Try logging in\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </FormGroup>\r\n                            </FormControl>\r\n                        </form>\r\n\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\n\r\nexport default ForgotPassword;\r\n;\r\n","import {useFormik} from 'formik';\r\nimport React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport Grid from '@mui/material/Grid';\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport {Button, FormControl, FormGroup, FormLabel, Paper, TextField} from \"@mui/material\";\r\nimport {Navigate} from 'react-router-dom';\r\nimport {loginTC} from \"../../bll/login-reducer\";\r\nimport {useNavigate} from 'react-router-dom';\r\nimport {Link} from \"@material-ui/core\";\r\nimport { BrowserRouter as Router, Link as RouterLink } from \"react-router-dom\"\r\n\r\n\r\nconst Login = () => {\r\n    const history = useNavigate()\r\n    const dispatch = useDispatch()\r\n    const isAuth = useSelector<AppStateType>(state => state.login.isAuth)\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'required fill';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'password must have'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        }\r\n    });\r\n    if (isAuth) {\r\n        return <Navigate to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <div className='main'>\r\n            <div className='mainBlock'>\r\n                <Grid container justifyContent={\"center\"}>\r\n                    <Grid item justifyContent={\"center\"}>\r\n                        <form onSubmit={formik.handleSubmit}>\r\n                            <FormControl>\r\n                                <FormLabel>\r\n                                    <h2 style={{padding: '20px'}}>SIGN-IN</h2>\r\n                                </FormLabel>\r\n                                <FormGroup>\r\n                                    <Grid container justifyContent={\"center\"}  direction={\"column\"}>\r\n\r\n                                    <TextField label='Email'\r\n                                               margin='normal'\r\n                                               {...formik.getFieldProps('email')}\r\n                                               value={formik.values.email}\r\n                                               onChange={formik.handleChange}\r\n                                               onBlur={formik.handleBlur}/>\r\n                                    {formik.touched.email && formik.errors.email\r\n                                        ? <div style={{color: 'red'}}>\r\n                                            {formik.errors.email}\r\n                                        </div> : null}\r\n                                    <TextField type='password'\r\n                                               label='Password'\r\n                                               margin='normal'\r\n                                               {...formik.getFieldProps('password')}\r\n                                               value={formik.values.password}\r\n                                               onChange={formik.handleChange}\r\n                                               onBlur={formik.handleBlur}/>\r\n                                    {formik.touched.password && formik.errors.password\r\n                                        ? <div style={{color: 'red'}}>\r\n                                            {formik.errors.password}\r\n                                        </div>\r\n                                        : null}\r\n                                        <Link component={RouterLink} to=\"/forgot-password\" color=\"secondary\">\r\n                                            {'Forgot Password'}\r\n                                        </Link>\r\n                                    <Button type={'submit'}\r\n                                            variant={'contained'}\r\n                                            color={'primary'}>\r\n                                        Login\r\n                                    </Button>\r\n                                    <div> Don`t have an account?</div>\r\n                                    <Button onClick={() => {\r\n                                        history('/registration')\r\n                                    }}\r\n                                            variant={'contained'}\r\n                                            color={'secondary'}\r\n                                    >Sign Up</Button>\r\n\r\n                                    {/*<div className={\"main\"}>LoginPage</div>*/}\r\n\r\n                                                </Grid>\r\n                                </FormGroup>\r\n                            </FormControl>\r\n                        </form>\r\n\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n","import axios, {AxiosResponse} from \"axios\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0\",\r\n    withCredentials: true,\r\n})\r\n\r\n\r\nexport const authAPI = {\r\n    me(){\r\n        return instance.post('auth/me')\r\n    }\r\n}\r\n","import { authAPI } from \"../dal/initialize-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst initialState = {\r\n    status: \"idle\",\r\n    isInitialized: false\r\n};\r\n\r\nexport type AppInitialStateType = typeof initialState;\r\n\r\n//Reducer\r\nexport const appReducer = (state = initialState, action: any): AppInitialStateType => {\r\n    switch (action.type) {\r\n        case \"APP/SET-STATUS\":\r\n            return {...state, status: action.status}\r\n        case \"APP/INITIALAZE\":\r\n            return {...state, isInitialized: action.isInitialazed}\r\n        default:\r\n            return {...state}\r\n    }\r\n};\r\n\r\n\r\n// Action Creators\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: \"APP/SET-STATUS\", status} as const)\r\nexport const setIsInitializedAC = (isInitialazed: boolean) => ({type: \"APP/INITIALAZE\", isInitialazed} as const)\r\n\r\n//thunks\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then(res => {\r\n    })\r\n        .catch(()=> {\r\n        }).finally(()=>{\r\n        dispatch(setIsInitializedAC(true))\r\n    })\r\n}\r\n\r\n\r\n//types\r\nexport type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\"\r\n\r\n\r\ntype ActionsType =\r\n    | SetAppStatusActionType\r\n    | SetAppInitialazeActionType\r\n\r\n\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppInitialazeActionType = ReturnType<typeof setIsInitializedAC>\r\n\r\n\r\n","import React, {useEffect} from 'react';\r\nimport {ResponseUserType} from \"../../dal/authApi\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {initializeAppTC} from \"../../bll/app-reducer\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\n\r\n\r\nconst Profile = () => {\r\n    const user = useSelector<AppStateType,ResponseUserType>(state=>state.login.user)\r\n    const dispatch = useDispatch()\r\n    const isInitialized = useSelector<AppStateType, boolean>(state => state.app.isInitialized)\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.login.isAuth)\r\n    let navigate = useNavigate();\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n        if (!isAuth) {\r\n            navigate('/login')\r\n        }\r\n    }, [isAuth])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n    return ( <div> {user ? <div>\r\n            <img src={user.avatar}/>\r\n            {user.name}\r\n\r\n        </div>: '' }</div>\r\n    )\r\n}\r\n\r\nexport default Profile\r\n","import {Dispatch} from \"redux\";\r\nimport {restorePasswordApi} from \"../dal/restorePasswordApi\";\r\nimport {Params} from \"react-router-dom\";\r\n\r\nconst initialState = {\r\n    isNewPasswordSet: false,\r\n    message: null as string | null\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n//reducer\r\nexport const setNewPasswordReducer = (state: InitialStateType = initialState, action: ActionTypes): InitialStateType => {\r\n    switch(action.type) {\r\n        case SET_NEW_PASSWORD:\r\n            return {...state, isNewPasswordSet: action.isPasswordSet}\r\n        case SET_REQUEST_MESSAGE:\r\n            return {...state, message: action.message}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// actions\r\nconst  SET_NEW_PASSWORD  = \"card-learning/newPassword/SET_NEW_PASSWORD\";\r\nconst SET_REQUEST_MESSAGE   = 'card-learning/newPassword/SET_MESSAGE';\r\n\r\n//action creators\r\nexport const setNewPassword = (isPasswordSet: boolean) => ({ type: \"card-learning/newPassword/SET_NEW_PASSWORD\", isPasswordSet } as const);\r\nexport const setRequestMessage = (message: string | null) => ({ type: SET_REQUEST_MESSAGE , message } as const);\r\n//thunk\r\nexport const setNewPasswordTC = (password: string, resetPasswordToken: string) => (dispatch: Dispatch) => {\r\n    restorePasswordApi.setNewPassword({ password, resetPasswordToken })\r\n        .then(res => {\r\n            if(res.data.info) {\r\n                dispatch(setNewPassword(true))\r\n            } else if(res.data.error) {\r\n                dispatch(setRequestMessage(res.data.error))\r\n            } else {\r\n                dispatch(setRequestMessage(\"Some error occurred!\"))\r\n            }\r\n        })\r\n        .catch(error => {\r\n            dispatch(setRequestMessage(error.message ? error.message :\"Network error occurred!\"));\r\n        })\r\n}\r\n\r\n//action types\r\nexport type SetNewPasswordType = ReturnType<typeof setNewPassword>;\r\ntype SetRequestMessageType = ReturnType<typeof setRequestMessage>;\r\nexport type ActionTypes = SetRequestMessageType | SetNewPasswordType;\r\n","import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport {Navigate, useParams} from \"react-router-dom\";\r\nimport {useFormik} from \"formik\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {setNewPasswordTC} from \"../../bll/setNewPassword-reducer\";\r\n\r\ntype RecoveryProps = {}\r\ntype FormikErrorType = {\r\n    password?: string\r\n}\r\n\r\nconst RecoveryPassword: React.FC<RecoveryProps> = React.memo(() => {\r\n\r\n    const isNewPasswordSend = useSelector<AppStateType, boolean>(state => state.newPassword.isNewPasswordSet);\r\n    const responseError = useSelector<AppStateType, string | null>(state => state.newPassword.message)\r\n    const dispatch = useDispatch();\r\n\r\n    const { token } = useParams() as {\r\n        token: string;\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if(!values.password) {\r\n                errors.password = 'Please type new password';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Must be 8 characters or more';\r\n            }\r\n            return errors;\r\n\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(setNewPasswordTC(values.password, token ))\r\n            formik.resetForm()\r\n        },\r\n    });\r\n\r\n    if(isNewPasswordSend) {\r\n        return <Navigate to='/login' />\r\n    }\r\n    return <div className={\"main\"}>\r\n        <Container maxWidth=\"sm\" style={{background: \"#F9F9FE\", height: \"50vh\", borderRadius: \"8px\"}}>\r\n            <Grid container spacing={3}>\r\n                <Grid item style={{\r\n                    marginTop: \"20px\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    justifyContent: 'center',\r\n                    alignItems: \"center\"\r\n                }}>\r\n                    <form onSubmit={formik.handleSubmit} style={{\r\n                        display: \"flex\",\r\n                        flexDirection: \"column\",\r\n                        justifyContent: \"center\"\r\n                    }}>\r\n                        <Box component=\"span\" sx={{marginTop: \"20px\", marginBottom: \"20px\"}}>\r\n                            <h2 style={{textAlign: 'center'}}>Create new password</h2>\r\n                        </Box>\r\n                        <Box component=\"span\" display=\"block\">\r\n                            <TextField\r\n                                variant={\"outlined\"}\r\n                                style={{marginTop: \"20px\", width: \"100%\"}}\r\n                                id={\"outlined-basic\"}\r\n                                type={\"password\"}\r\n                                color={\"primary\"}\r\n                                placeholder={\"password\"}\r\n                                {...formik.getFieldProps(\"password\")}\r\n                            />\r\n                            {formik.touched.password && formik.errors.password && <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                            {responseError &&  <div style={{color: 'red'}}>{responseError}</div>}\r\n                        </Box>\r\n                        <Box>\r\n                            <h4>Create new password and we will send you further instructions to email</h4>\r\n                        </Box>\r\n                        <Button variant=\"contained\"\r\n                                color=\"primary\"\r\n                                type=\"submit\"\r\n                                style={{\r\n                                    borderRadius: \"30px\",\r\n                                    background: \"#73926C\",\r\n                                    marginTop: \"30px\",\r\n                                    alignSelf: 'center',\r\n                                    boxShadow: '0px 4px 18px rgba(33, 38, 143, 0.35), inset 0px 1px 0px rgba(255, 255, 255, 0.3)'\r\n                                }}\r\n                            // disabled={forgotStatus === \"loading\"}\r\n                        >Create new password</Button>\r\n                    </form>\r\n                </Grid>\r\n            </Grid>\r\n        </Container></div>\r\n\r\n});\r\n\r\nexport default RecoveryPassword\r\n","import axios from \"axios\"\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0\",\r\n    withCredentials: true,\r\n\r\n});\r\n\r\n\r\n\r\nexport const registrationAPI = {\r\n    registration(email:string, password: string) {\r\n        return instance.post(\"auth/register\", {email, password});\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {registrationAPI} from \"../dal/registration-api\";\r\n\r\nlet initialState = {\r\n    isRegistered: false\r\n};\r\n\r\nexport type LoginInitialStateType = typeof initialState;\r\n\r\n//Reducer\r\nexport const registrationReducer = (state = initialState, action: ActionsType): LoginInitialStateType => {\r\n    switch (action.type) {\r\n        case \"REGISTERED\":\r\n            return {...state, isRegistered: action.isRegistered}\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// actions\r\n\r\nconst isRegisteredAC = (isRegistered: boolean) => ({type: \"REGISTERED\", isRegistered})\r\n\r\n//thunks\r\nexport const registrationTC = (email: string, password: string) => (dispatch: Dispatch) => {\r\n    registrationAPI.registration(email, password)\r\n        .then((res)=> {\r\n            dispatch(isRegisteredAC(true))\r\n        })\r\n        .catch((error)=>{\r\n            alert(\"This email is already registered\")\r\n    })\r\n}\r\n\r\n// Action Creators\r\n//types\r\n\r\n// type ActionsTypes =\r\ntype ActionsType = ReturnType<typeof isRegisteredAC>","import React from \"react\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from \"@mui/material/Button\";\r\nimport {useFormik} from \"formik\";\r\nimport {Box} from \"@mui/material\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {registrationTC} from \"../../bll/registration-reducer\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    confirmPassword?: string\r\n}\r\n\r\nconst Registration = () => {\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            confirmPassword: \"\",\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Required\";\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\";\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"Required\";\r\n            } else if (values.password.length < 3) {\r\n                errors.password = \"Password must be more than two characters\"\r\n            }\r\n            if (!values.confirmPassword) {\r\n                errors.confirmPassword = \"Required\";\r\n            } else if (values.confirmPassword !== values.password) {\r\n                errors.confirmPassword = \"Passwords must match\"\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(registrationTC(values.email, values.password))\r\n            formik.resetForm()\r\n        },\r\n    });\r\n\r\n    const resetHandler = () => {\r\n        formik.resetForm()\r\n    }\r\n\r\n    return (\r\n        <div className='main'>\r\n            <div className='mainBlock'>\r\n                <Grid container justifyContent={\"center\"}>\r\n                    <Grid item justifyContent={\"center\"}>\r\n                        <form onSubmit={formik.handleSubmit}>\r\n                            <FormControl>\r\n                                <FormLabel>\r\n                                    <Grid container justifyContent={\"center\"}>\r\n                                        <Grid item justifyContent={\"center\"}>\r\n                                            <h1>It-incubator</h1>\r\n                                            <Grid container justifyContent={\"center\"}>\r\n                                                <Grid item justifyContent={\"center\"}>\r\n                                                    <h3>Sign up</h3>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n\r\n                                </FormLabel>\r\n                                <FormGroup>\r\n                                    <TextField label=\"Email\"\r\n                                               margin=\"normal\" {...formik.getFieldProps(\"email\")}/>\r\n                                    {formik.touched.email && formik.errors.email &&\r\n                                    <div style={{color: \"red\"}}>{formik.errors.email}</div>}\r\n                                    <TextField type=\"password\" label=\"Password\"\r\n                                               margin=\"normal\" {...formik.getFieldProps(\"password\")}\r\n                                    />\r\n                                    {formik.touched.password && formik.errors.password &&\r\n                                    <div style={{color: \"red\"}}>{formik.errors.password}</div>}\r\n\r\n                                    <TextField type=\"password\" label=\"Confirm password\"\r\n                                               margin=\"normal\" {...formik.getFieldProps(\"confirmPassword\")}\r\n                                    />\r\n                                    {formik.touched.confirmPassword && formik.errors.confirmPassword &&\r\n                                    <div style={{color: \"red\"}}>{formik.errors.confirmPassword}</div>}\r\n                                    <Box\r\n\r\n                                        sx={{\r\n                                            \"& > :not(style)\": {m: 1, width: \"34ch\"},\r\n                                        }}\r\n                                    >\r\n                                        <Grid container justifyContent={\"space-between\"}>\r\n                                            <Button onClick={resetHandler} variant={\"contained\"}\r\n                                                    color={\"secondary\"} className={'button-primary'}>Cancel</Button>\r\n                                            <Button type={\"submit\"} variant={\"contained\"}\r\n                                                    color={\"primary\"}>Register</Button>\r\n                                        </Grid>\r\n                                    </Box>\r\n                                </FormGroup>\r\n                            </FormControl>\r\n                        </form>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Registration\r\n","import React from \"react\";\r\n\r\nconst Main = () => {\r\n\r\n    return (\r\n        <div className={\"main\"}>Page not found</div>\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport {useNavigate, useParams} from \"react-router-dom\";\r\n\r\n\r\nconst CheckEmail = () => {\r\n    const { email } = useParams() as {\r\n        email: string;\r\n    }\r\n    return (\r\n        <div className={\"main\"}>\r\n            <Container maxWidth=\"sm\" style={{background: \"#F9F9FE\", height: \"50vh\", borderRadius: \"8px\"}}>\r\n                <Grid container direction={\"column\"} justifyContent={\"center\"} alignItems={\"center\"} spacing={3}>\r\n                    <Grid item style={{\r\n                        marginTop: \"20px\",\r\n                        display: \"flex\",\r\n                        flexDirection: \"column\",\r\n                        justifyContent: 'center',\r\n                        alignItems: \"center\"\r\n                    }}>\r\n                        <Box component=\"span\" sx={{marginTop: \"20px\", marginBottom: \"20px\"}}>\r\n                            <h2 style={{textAlign: 'center'}}>Check Email</h2>\r\n                        </Box>\r\n                        <Box>\r\n                            <h4>We’ve sent an Email with instructions to {email}</h4>\r\n                        </Box>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CheckEmail\r\n","import React from 'react';\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport ForgotPassword from \"../../components/forgotPassword/ForgotPassword\";\r\nimport Login from \"../../components/login/Login\";\r\nimport Profile from \"../../components/profile/Profile\";\r\nimport RecoveryPassword from \"../../components/recoveryPassword/RecoveryPassword\";\r\nimport Registration from \"../../components/registration/Registration\";\r\nimport NotFound from \"../../components/notFound/NotFound\";\r\nimport CheckEmail from \"../../components/forgotPassword/CheckEmail\";\r\n\r\nconst Main = () => {\r\n\r\n    return (\r\n        <Routes >\r\n            <Route path='/login' element={<Login/>}/>\r\n            <Route path='/forgot-password' element={<ForgotPassword/>}/>\r\n            <Route path='/profile' element={<Profile/>}/>\r\n            <Route path='/recovery-password/:token' element={<RecoveryPassword/>}/>\r\n            <Route path='/registration' element={<Registration/>}/>\r\n            <Route path='/404' element={<NotFound/>}/>*/\r\n            <Route path='/check-email/:email' element={<CheckEmail/>}/>*/\r\n            <Route path=\"*\" element={<Navigate to=\"/404\" />}/>\r\n        </Routes>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Main;\r\n","import React, {useEffect} from \"react\";\r\nimport \"./App.css\";\r\nimport Header from \"./ui/ui-header/Header\";\r\nimport Main from \"./ui/ui-main/Main\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {initializeAppTC} from \"./bll/app-reducer\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport {AppStateType} from \"./bll/store\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport { MuiThemeProvider, createTheme } from '@material-ui/core/styles';\r\n\r\n\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#73926C',\r\n        },\r\n        secondary: {\r\n            main: '#EDA909',\r\n        },\r\n    },\r\n});\r\n\r\nfunction App() {\r\n    return (\r\n        <MuiThemeProvider  theme={theme}>\r\n            <div className={\"App\"}>\r\n                <Header/>\r\n                <Main/>\r\n            </div>\r\n        </MuiThemeProvider >\r\n    )\r\n}\r\n\r\nexport default App;\r\n","let initialState = {\r\n\r\n};\r\n\r\nexport type LoginInitialStateType = typeof initialState;\r\n\r\n//Reducer\r\nexport const profileReducer = (state = initialState, action: any): LoginInitialStateType => {\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// actions\r\n\r\n\r\n// Action Creators\r\n\r\n// type ActionsTypes =\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from 'redux-thunk';\r\nimport {loginReducer} from \"./login-reducer\";\r\nimport {forgotPasswordReducer} from \"./forgotPassword-reducer\";\r\nimport {setNewPasswordReducer} from \"./setNewPassword-reducer\";\r\nimport {registrationReducer} from \"./registration-reducer\";\r\nimport {profileReducer} from \"./profile-reducer\";\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    login: loginReducer,\r\n    forgot: forgotPasswordReducer,\r\n    newPassword: setNewPasswordReducer,\r\n    registration: registrationReducer,\r\n    profile: profileReducer,\r\n    app: appReducer\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never;\r\nexport type InferActionTypes<T extends { [key: string]: (...args: any) => any }> = ReturnType<PropertiesType<T>>\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\nexport default // @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport App from \"./App\";\r\nimport store from \"./bll/store\";\r\n//comment\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n                <App />\r\n            </Provider>\r\n        </BrowserRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}