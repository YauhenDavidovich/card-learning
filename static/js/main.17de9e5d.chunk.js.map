{"version":3,"sources":["components/utils/Controls/Select.module.css","reportWebVitals.ts","dal/authApi.ts","dal/initialize-api.ts","bll/app-reducer.ts","bll/login-reducer.ts","ui/ui-header/Header.tsx","dal/restorePasswordApi.ts","bll/forgotPassword-reducer.ts","components/forgotPassword/ForgotPassword.tsx","components/login/Login.tsx","components/profile/Profile.tsx","bll/setNewPassword-reducer.ts","components/recoveryPassword/RecoveryPassword.tsx","dal/registration-api.ts","bll/registration-reducer.ts","components/registration/Registration.tsx","components/notFound/NotFound.tsx","components/forgotPassword/CheckEmail.tsx","components/utils/Controls/Search.tsx","dal/packsListApi.ts","bll/packs-reducer.ts","components/utils/Controls/PacksToggle.tsx","components/utils/Controls/Paginator.tsx","components/PacksList/PacksTable.tsx","components/utils/Controls/ShowItemsPerPage.tsx","components/utils/Controls/DoubleRange.tsx","components/utils/Controls/AddPack.tsx","components/PacksList/PackLIstsContainer.tsx","ui/ui-main/Main.tsx","MyTheme.ts","components/utils/Preloader.tsx","App.tsx","bll/profile-reducer.ts","bll/store.ts","index.tsx","components/utils/Controls/Paginator.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","process","withCredentials","authApi","data","post","delete","authAPI","initialState","status","setAppStatusAC","type","isAuth","user","_id","email","name","avatar","publicCardPacksCount","created","Date","updated","isAdmin","verified","rememberMe","error","LOGIN","SETUSER","SetIsLoggedIn","SetUserAC","Header","dispatch","useDispatch","useSelector","state","login","className","to","Button","color","onClick","res","restorePasswordApi","IsRequestNewPasswordSent","message","IS_REQUEST_NEW_PASSWORD_SENT","SET_REQUEST_MESSAGE","setRequestMessage","requestForgotPasswordTC","from","checkIsRequestNewPasswordSent","catch","response","ForgotPassword","React","memo","isEmailRequestSend","forgot","responseError","emailSent","history","useNavigate","formik","useFormik","initialValues","validate","values","errors","test","onSubmit","resetForm","Grid","container","justifyContent","item","handleSubmit","FormControl","FormLabel","Box","component","sx","marginTop","marginBottom","style","textAlign","FormGroup","direction","alignItems","TextField","label","margin","placeholder","getFieldProps","touched","variant","Login","password","err","padding","value","onChange","handleChange","onBlur","handleBlur","FormControlLabel","control","Checkbox","Link","RouterLink","Profile","src","isNewPasswordSet","SET_NEW_PASSWORD","RecoveryPassword","isNewPasswordSend","newPassword","token","useParams","length","resetPasswordToken","info","isPasswordSet","Container","maxWidth","background","height","borderRadius","spacing","display","flexDirection","width","id","alignSelf","boxShadow","registrationAPI","isRegistered","Registration","confirmPassword","alert","Main","CheckEmail","Search","props","useState","searchTerm","setSearchTerm","packsAmount","packs","cardPacksTotalCount","useEffect","delayDebounceFn","setTimeout","getSearchResult","clearTimeout","e","target","packsListAPI","params","get","pack","packId","put","cardsPack","InitialState","cardPacks","user_id","cardsCount","maxCardsCount","minCardsCount","packsParams","max","min","page","pageCount","sortPacks","packName","GET_PACKS","SET_SORT_VALUE","SET_PACKS_PAGE","SET_PACKS_CARD_RANGE","SET_PACKS_CARD_OWNER_FILTER","SET_PACKS_SEARCH_NAME","SET_PAGE_COUNT","DELETE_PACK","SetPacksCardOwnerFilterAC","owner","getCardsTC","getState","sortValue","undefined","GetCardsAC","deletePackTC","userId","DeletePackAC","PacksToggle","packOwner","setPackOwner","ToggleButtonGroup","size","exclusive","event","aria-label","ToggleButton","Paginator","currentPage","pagesCount","Math","ceil","pages","i","push","portionCount","portionNumber","setPortionNumber","leftPortionNumber","rightPortionPageNumber","styles","paginator","disabled","arrowLeft","filter","p","map","cn","selectedPage","pageNumber","onPageChanged","arrowRight","PacksTable","userID","setName","setCardsCount","setCreated","setUpdated","sort","sortName","onSortHandler","updatePackHandler","updatePackTC","styleHeaderButton","styleActionsButton","marginLeft","styleHeader","backgroundColor","dateOptions","weekday","year","month","day","hour","minute","TableContainer","Paper","maxHeight","minHeight","minWidth","Table","stickyHeader","TableHead","TableRow","TableCell","align","TableBody","row","index","border","scope","textOverflow","overflow","toLocaleDateString","IconButton","opacity","cardsId","ShowItemsPerPage","setCards","select","InputLabel","Select","labelId","toString","MenuItem","DoubleRange","setValue","Slider","onChangeCommitted","newValue","valueLabelDisplay","AddPack","PacksListsContainer","searchResult","path","element","NotFound","createTheme","palette","primary","main","contrastText","secondary","Preloader","position","top","CircularProgress","App","isLoading","app","theme","MyTheme","rootReducer","combineReducers","action","registration","profile","cardPack","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.17de9e5d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"Select_select__DpgNI\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios, { AxiosResponse } from 'axios'\r\n\r\n\r\nexport type LoginParamsType={\r\n    email:string\r\n    password: string\r\n}\r\n\r\nconst instance = axios.create({\r\n    // baseURL: \"https://neko-back.herokuapp.com/2.0\",\r\n    baseURL: process.env.REACT_APP_API_PATH,\r\n    withCredentials: true,\r\n})\r\n\r\nexport const authApi = {\r\n    logIn(data:LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseUserType>>('/auth/login',data)\r\n    },\r\n    logOut(){\r\n        return instance.delete('/auth/me')\r\n    }\r\n}\r\n\r\nexport type ResponseUserType = {\r\n    _id:string\r\n    email:string\r\n    name:string\r\n    avatar?:string\r\n    publicCardPacksCount: number\r\n    created: Date\r\n    updated: Date\r\n    isAdmin: boolean\r\n    verified: boolean\r\n    rememberMe: boolean\r\n    error?: string\r\n}\r\n","import axios, {AxiosResponse} from \"axios\"\r\n\r\nconst instance = axios.create({\r\n    // baseURL: \"https://neko-back.herokuapp.com/2.0\",\r\n    baseURL: process.env.REACT_APP_API_PATH,\r\n    withCredentials: true,\r\n})\r\n\r\n\r\nexport const authAPI = {\r\n    me(){\r\n        return instance.post('auth/me')\r\n    }\r\n}\r\n","import {authAPI} from \"../dal/initialize-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {SetIsLoggedIn, SetUserAC} from \"./login-reducer\";\r\n\r\nconst initialState = {\r\n    status: \"loading\" as RequestStatusType\r\n};\r\n\r\nexport type AppInitialStateType = typeof initialState;\r\n\r\n//Reducer\r\nexport const appReducer = (state = initialState, action: ActionsType): AppInitialStateType => {\r\n    switch (action.type) {\r\n        case \"APP/SET-STATUS\":\r\n            return {...state, status: action.status}\r\n\r\n        default:\r\n            return {...state}\r\n    }\r\n};\r\n\r\n\r\n// Action Creators\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: \"APP/SET-STATUS\", status} as const)\r\nexport const setIsInitializedAC = (isInitialazed: boolean) => ({type: \"APP/INITIALAZE\", isInitialazed} as const)\r\n\r\n//thunks\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.me()\r\n        .then(res => {\r\n            dispatch(SetIsLoggedIn(true))\r\n            dispatch(SetUserAC(res.data))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n    })\r\n        .catch(()=> {\r\n            dispatch(SetIsLoggedIn(false))\r\n            dispatch(setAppStatusAC(\"failed\"))\r\n        })\r\n}\r\n\r\n\r\n//types\r\nexport type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\"\r\n\r\n\r\ntype ActionsType =\r\n    | SetAppStatusActionType\r\n    | SetAppInitialazeActionType\r\n\r\n\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppInitialazeActionType = ReturnType<typeof setIsInitializedAC>\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authApi, LoginParamsType, ResponseUserType} from \"../dal/authApi\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\n\r\nlet initialState:LoginInitialStateType = {\r\n    isAuth: false,\r\n    user: {\r\n        _id:'',\r\n        email:'',\r\n        name:'',\r\n        avatar:'',\r\n        publicCardPacksCount: 0,\r\n        created: new Date,\r\n        updated: new Date,\r\n        isAdmin: false,\r\n        verified: false,\r\n        rememberMe: false,\r\n        error: ''\r\n    }\r\n};\r\n\r\nexport type LoginInitialStateType = {\r\n    isAuth: boolean\r\n    user: ResponseUserType\r\n}\r\n\r\n//Reducer\r\nexport const loginReducer = (state:LoginInitialStateType = initialState, action: ActionsTypes): LoginInitialStateType => {\r\n    switch (action.type) {\r\n        case LOGIN:\r\n            return {\r\n                ...state,\r\n                isAuth: action.isAuth,\r\n            }\r\n        case SETUSER:\r\n            return {\r\n                ...state,\r\n                user: action.data\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// actions\r\nconst LOGIN = 'card-learning/login/LOG-IN';\r\nconst SETUSER = 'card-learning/login/SET-USER';\r\n\r\n// Action Creators\r\nexport const SetIsLoggedIn = (isAuth: boolean) => ({\r\n    type: LOGIN,\r\n    isAuth,\r\n} as const);\r\n\r\nexport const SetUserAC = (data:ResponseUserType) => ({\r\n    type: SETUSER,\r\n    data,\r\n} as const);\r\n\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    authApi.logIn(data)\r\n        .then(res => {\r\n            dispatch(SetIsLoggedIn(true))\r\n            dispatch(SetUserAC(res.data))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n        .catch(err => {\r\n            dispatch(setAppStatusAC(\"failed\"))\r\n        })\r\n}\r\n\r\nexport const logOutTC=()=>(dispatch: Dispatch)=>{\r\n     authApi.logOut()\r\n        .then(res => {\r\n            dispatch(SetIsLoggedIn(false))\r\n            dispatch(SetUserAC(res.data))\r\n        })}\r\n\r\n\r\nexport type SetUserType = ReturnType<typeof SetUserAC>\r\nexport type SetIsLoggedInType = ReturnType<typeof SetIsLoggedIn>;\r\ntype ActionsTypes = SetIsLoggedInType | SetUserType\r\n","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {logOutTC} from \"../../bll/login-reducer\";\r\nimport Button from \"@mui/material/Button\";\r\n\r\nconst Header = () => {\r\n    const dispatch = useDispatch()\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.login.isAuth)\r\n    function handleLogout() {\r\n        dispatch(logOutTC())\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={\"header\"}>\r\n            <NavLink to=\"/profile\">Profile</NavLink>\r\n            <NavLink to=\"/packs-list\">Packs List</NavLink>\r\n            {isAuth && <Button color='inherit' onClick={handleLogout}>Logout</Button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    // baseURL: \"https://neko-back.herokuapp.com/2.0\",\r\n    baseURL: process.env.REACT_APP_API_PATH,\r\n    withCredentials: true\r\n});\r\n\r\nexport const restorePasswordApi = {\r\n\r\n    requestForgotPassword(data: ForgotRequestDataType) {\r\n        return instance.post<CheckEmailResponseType>('auth/forgot', data )\r\n    },\r\n    setNewPassword(data: NewPasswordRequestType) {\r\n        return instance.post<NewPasswordResponseType>('auth/set-new-password', data)\r\n    }\r\n}\r\n\r\nexport type ForgotRequestDataType = {\r\n    email: string\r\n    from: string\r\n    message: string\r\n}\r\n\r\nexport type CheckEmailResponseType = {\r\n    info: string | null\r\n    answer: boolean\r\n    html: boolean\r\n    success: boolean\r\n}\r\n\r\nexport type NewPasswordRequestType = {\r\n    password: string\r\n    resetPasswordToken: string\r\n}\r\n\r\nexport type NewPasswordResponseType = {\r\n    info: string\r\n    error: string\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {restorePasswordApi} from \"../dal/restorePasswordApi\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\n\r\nlet initialState = {\r\n    IsRequestNewPasswordSent: false,\r\n    email: \"\",\r\n    message: null as string | null\r\n\r\n};\r\n\r\nexport type LoginInitialStateType = typeof initialState;\r\n\r\n//Reducer\r\nexport const forgotPasswordReducer = (state = initialState, action: ActionTypes): LoginInitialStateType => {\r\n    switch (action.type) {\r\n        case IS_REQUEST_NEW_PASSWORD_SENT :\r\n            return {...state, email: action.email, IsRequestNewPasswordSent: action.IsRequestNewPasswordSent}\r\n        case SET_REQUEST_MESSAGE:\r\n            return {...state, message: action.message}\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// actions\r\nconst IS_REQUEST_NEW_PASSWORD_SENT = 'card-learning/forgot/IS_REQUEST_NEW_PASSWORD_SENT';\r\nconst SET_REQUEST_MESSAGE = 'card-learning/forgot/SET_MESSAGE';\r\n\r\n// action Creators\r\nexport const checkIsRequestNewPasswordSent = (email: string, IsRequestNewPasswordSent: boolean) => ({\r\n    type: IS_REQUEST_NEW_PASSWORD_SENT,\r\n    email,\r\n    IsRequestNewPasswordSent\r\n} as const);\r\nexport const setRequestMessage = (message: string | null) => ({type: SET_REQUEST_MESSAGE, message} as const);\r\n\r\n//thunks\r\nexport const requestForgotPasswordTC = (email: string, from: string, message: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    restorePasswordApi.requestForgotPassword({email, from, message})\r\n        .then(res => {\r\n                    dispatch(checkIsRequestNewPasswordSent(email,true))\r\n                    dispatch(setRequestMessage(\"Check your email please\"))\r\n                    dispatch(setAppStatusAC(\"succeeded\"))\r\n            }\r\n        )\r\n        .catch(error => {\r\n            dispatch(setRequestMessage(error.response ? error.response.data.error : error.message + \"more details in the console\"));\r\n            dispatch(setAppStatusAC(\"failed\"))\r\n        })\r\n\r\n\r\n}\r\n\r\n\r\n// type ActionsTypes =\r\nexport type CheckIsRequestNewPasswordSentType = ReturnType<typeof checkIsRequestNewPasswordSent>;\r\nexport type SetRequestMessageType = ReturnType<typeof setRequestMessage>;\r\nexport type ActionTypes = CheckIsRequestNewPasswordSentType | SetRequestMessageType;\r\n","import React from \"react\";\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {Navigate, useNavigate} from \"react-router-dom\";\r\nimport {requestForgotPasswordTC} from \"../../bll/forgotPassword-reducer\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n\r\n\r\ntype ForgotProps = {}\r\ntype FormikErrorType = {\r\n    email?: string\r\n}\r\n\r\nconst ForgotPassword: React.FC<ForgotProps> = React.memo(() => {\r\n\r\n    const isEmailRequestSend = useSelector<AppStateType, boolean>(state => state.forgot.IsRequestNewPasswordSent);\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.login.isAuth)\r\n    const responseError = useSelector<AppStateType, string | null>(state => state.forgot.message)\r\n    const dispatch = useDispatch();\r\n    const emailSent = useSelector<AppStateType, string>(state => state.forgot.email)\r\n\r\n\r\n    const message =\r\n        `<div style=\"background-color: lime; padding: 15px\">\r\n            password recovery link:\r\n            <a href=\"https://yauhendavidovich.github.io/card-learning/#/recovery-password/$token$\">link</a> \r\n          </div>`\r\n\r\n    const history = useNavigate();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Please type your email!\";\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\";\r\n            }\r\n            return errors;\r\n\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(requestForgotPasswordTC(values.email, \"davidovich336@gmail.com\", message))\r\n            formik.resetForm()\r\n        },\r\n    });\r\n\r\n\r\n\r\n    if (isEmailRequestSend) {\r\n        return <Navigate to={\"/check-email/\"+emailSent}/>\r\n    }\r\n    if (isAuth) {\r\n        return <Navigate to={\"/profile\"}/>\r\n    }\r\n\r\n    return (\r\n        <div className={\"main\"}>\r\n            <div className=\"mainBlock authBlock\">\r\n                <Grid container justifyContent={\"center\"}>\r\n                    <Grid item justifyContent={\"center\"}>\r\n                        <form onSubmit={formik.handleSubmit}>\r\n                            <FormControl>\r\n                                <FormLabel>\r\n                                    <Box component=\"span\" sx={{marginTop: \"20px\", marginBottom: \"10px\"}}>\r\n                                        <h2 style={{textAlign: \"center\"}}>Forgot your password?</h2>\r\n                                    </Box>\r\n                                </FormLabel>\r\n\r\n                                <FormGroup>\r\n                                    <Grid container justifyContent={\"space-between\"} direction={\"column\"}\r\n                                          alignItems={\"center\"}>\r\n                                        <TextField type=\"email\" label=\"Email\"\r\n                                                   margin=\"normal\"\r\n                                                   color={\"primary\"}\r\n                                                   placeholder={\"Email\"}\r\n                                                   {...formik.getFieldProps(\"email\")}\r\n                                        />\r\n                                        {formik.touched.email && formik.errors.email &&\r\n                                        <div style={{color: \"red\"}}>{formik.errors.email}</div>}\r\n                                        {responseError && <div style={{color: \"red\"}}>{responseError}</div>}\r\n\r\n                                        <Grid container justifyContent={\"center\"}>\r\n                                            <Grid item justifyContent={\"center\"}>\r\n                                                <h4>Enter your email address and we will send you further\r\n                                                    instructions</h4>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Button variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                type=\"submit\"\r\n                                            // disabled={forgotStatus === \"loading\"}\r\n                                        >Send Instructions</Button>\r\n                                        <Box>\r\n                                            <h4>Did you remember your password?</h4>\r\n                                        </Box>\r\n                                        <Button variant=\"contained\"\r\n                                                color=\"secondary\"\r\n                                            // disabled={forgotStatus === \"loading\"}\r\n                                                onClick={() => {\r\n                                                    history(\"/login\")\r\n                                                }}>Try logging in\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </FormGroup>\r\n                            </FormControl>\r\n                        </form>\r\n\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\n\r\nexport default ForgotPassword;\r\n;\r\n","import {useFormik} from 'formik';\r\nimport React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport Grid from '@mui/material/Grid';\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from '@material-ui/core/Button';\r\nimport {Link as RouterLink, Navigate, useNavigate} from 'react-router-dom';\r\nimport {loginTC} from \"../../bll/login-reducer\";\r\nimport {Checkbox, Link} from \"@material-ui/core\";\r\nimport {FormControlLabel} from \"@mui/material\";\r\n\r\n\r\nconst Login = () => {\r\n    const history = useNavigate()\r\n    const dispatch = useDispatch()\r\n    const isAuth = useSelector<AppStateType>(state => state.login.isAuth)\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'required fill';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'password must have'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        }\r\n    });\r\n    if (isAuth) {\r\n        return <Navigate to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <div className='main'>\r\n            <div className='mainBlock authBlock'>\r\n                <Grid container justifyContent={\"center\"}>\r\n                    <Grid item justifyContent={\"center\"}>\r\n                        <form onSubmit={formik.handleSubmit}>\r\n                            <FormControl>\r\n                                <FormLabel>\r\n                                    <h2 style={{padding: '20px'}}>SIGN-IN</h2>\r\n                                </FormLabel>\r\n                                <FormGroup>\r\n                                    <Grid container justifyContent={\"center\"} direction={\"column\"}>\r\n\r\n                                        <TextField label='Email'\r\n                                                   margin='normal'\r\n                                                   {...formik.getFieldProps('email')}\r\n                                                   value={formik.values.email}\r\n                                                   onChange={formik.handleChange}\r\n                                                   onBlur={formik.handleBlur}/>\r\n                                        {formik.touched.email && formik.errors.email\r\n                                            ? <div style={{color: 'red'}}>\r\n                                                {formik.errors.email}\r\n                                            </div> : null}\r\n                                        <TextField type='password'\r\n                                                   label='Password'\r\n                                                   margin='normal'\r\n                                                   {...formik.getFieldProps('password')}\r\n                                                   value={formik.values.password}\r\n                                                   onChange={formik.handleChange}\r\n                                                   onBlur={formik.handleBlur}/>\r\n                                        {formik.touched.password && formik.errors.password\r\n                                            ? <div style={{color: 'red'}}>\r\n                                                {formik.errors.password}\r\n                                            </div>\r\n                                            : null}\r\n                                        <FormControlLabel\r\n                                            label={'Remember me'}\r\n                                            control={<Checkbox\r\n                                                name=\"rememberMe\"\r\n                                                onChange={formik.handleChange}\r\n                                                value={formik.values.rememberMe}\r\n                                            />}\r\n                                        />\r\n                                        <Link component={RouterLink} to=\"/forgot-password\" color=\"secondary\">\r\n                                            {'Forgot Password'}\r\n                                        </Link>\r\n                                        <Button color={'primary'}\r\n                                                type={'submit'}\r\n                                                variant={'contained'}>\r\n\r\n                                            Login\r\n                                        </Button>\r\n                                        <div> Don`t have an account?</div>\r\n                                        <Button onClick={() => {\r\n                                            history('/registration')\r\n                                        }}\r\n                                                variant={'contained'}\r\n                                                color={'secondary'}\r\n                                        >Sign Up</Button>\r\n                                    </Grid>\r\n                                </FormGroup>\r\n                            </FormControl>\r\n                        </form>\r\n\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\nimport {ResponseUserType} from \"../../dal/authApi\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\n\r\nconst Profile = () => {\r\n    const user = useSelector<AppStateType, ResponseUserType>(state => state.login.user)\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.login.isAuth)\r\n\r\n    if (!isAuth) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={\"main\"}>\r\n            <div className=\"mainBlock\">\r\n                <div>\r\n                    <h4>{user.name}</h4>\r\n                    <div><img src={user.avatar}/></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile\r\n","import {Dispatch} from \"redux\";\r\nimport {restorePasswordApi} from \"../dal/restorePasswordApi\";\r\nimport {Params} from \"react-router-dom\";\r\n\r\nconst initialState = {\r\n    isNewPasswordSet: false,\r\n    message: null as string | null\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n//reducer\r\nexport const setNewPasswordReducer = (state: InitialStateType = initialState, action: ActionTypes): InitialStateType => {\r\n    switch(action.type) {\r\n        case SET_NEW_PASSWORD:\r\n            return {...state, isNewPasswordSet: action.isPasswordSet}\r\n        case SET_REQUEST_MESSAGE:\r\n            return {...state, message: action.message}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// actions\r\nconst  SET_NEW_PASSWORD  = \"card-learning/newPassword/SET_NEW_PASSWORD\";\r\nconst SET_REQUEST_MESSAGE   = 'card-learning/newPassword/SET_MESSAGE';\r\n\r\n//action creators\r\nexport const setNewPassword = (isPasswordSet: boolean) => ({ type: \"card-learning/newPassword/SET_NEW_PASSWORD\", isPasswordSet } as const);\r\nexport const setRequestMessage = (message: string | null) => ({ type: SET_REQUEST_MESSAGE , message } as const);\r\n//thunk\r\nexport const setNewPasswordTC = (password: string, resetPasswordToken: string) => (dispatch: Dispatch) => {\r\n    restorePasswordApi.setNewPassword({ password, resetPasswordToken })\r\n        .then(res => {\r\n            if(res.data.info) {\r\n                dispatch(setNewPassword(true))\r\n            } else if(res.data.error) {\r\n                dispatch(setRequestMessage(res.data.error))\r\n            } else {\r\n                dispatch(setRequestMessage(\"Some error occurred!\"))\r\n            }\r\n        })\r\n        .catch(error => {\r\n            dispatch(setRequestMessage(error.message ? error.message :\"Network error occurred!\"));\r\n        })\r\n}\r\n\r\n//action types\r\nexport type SetNewPasswordType = ReturnType<typeof setNewPassword>;\r\ntype SetRequestMessageType = ReturnType<typeof setRequestMessage>;\r\nexport type ActionTypes = SetRequestMessageType | SetNewPasswordType;\r\n","import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport {Navigate, useParams} from \"react-router-dom\";\r\nimport {useFormik} from \"formik\";\r\nimport {setNewPasswordTC} from \"../../bll/setNewPassword-reducer\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from '@material-ui/core/Box';\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Container from '@material-ui/core/Container';\r\nimport Button from '@material-ui/core/Button';\r\n\r\ntype RecoveryProps = {}\r\ntype FormikErrorType = {\r\n    password?: string\r\n}\r\n\r\nconst RecoveryPassword: React.FC<RecoveryProps> = React.memo(() => {\r\n\r\n    const isNewPasswordSend = useSelector<AppStateType, boolean>(state => state.newPassword.isNewPasswordSet);\r\n    const responseError = useSelector<AppStateType, string | null>(state => state.newPassword.message)\r\n    const dispatch = useDispatch();\r\n\r\n    const { token } = useParams() as {\r\n        token: string;\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if(!values.password) {\r\n                errors.password = 'Please type new password';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Must be 8 characters or more';\r\n            }\r\n            return errors;\r\n\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(setNewPasswordTC(values.password, token ))\r\n            formik.resetForm()\r\n        },\r\n    });\r\n\r\n    if(isNewPasswordSend) {\r\n        return <Navigate to='/login' />\r\n    }\r\n    return <div className={\"main\"}>\r\n        <Container maxWidth=\"sm\" style={{background: \"#F9F9FE\", height: \"50vh\", borderRadius: \"8px\"}}>\r\n            <Grid container spacing={3}>\r\n                <Grid item style={{\r\n                    marginTop: \"20px\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    justifyContent: 'center',\r\n                    alignItems: \"center\"\r\n                }}>\r\n                    <form onSubmit={formik.handleSubmit} style={{\r\n                        display: \"flex\",\r\n                        flexDirection: \"column\",\r\n                        justifyContent: \"center\"\r\n                    }}>\r\n                        <Box component=\"span\" sx={{marginTop: \"20px\", marginBottom: \"20px\"}}>\r\n                            <h2 style={{textAlign: 'center'}}>Create new password</h2>\r\n                        </Box>\r\n                        <Box component=\"span\" display=\"block\">\r\n                            <TextField\r\n                                variant={\"outlined\"}\r\n                                style={{marginTop: \"20px\", width: \"100%\"}}\r\n                                id={\"outlined-basic\"}\r\n                                type={\"password\"}\r\n                                color={\"primary\"}\r\n                                placeholder={\"password\"}\r\n                                {...formik.getFieldProps(\"password\")}\r\n                            />\r\n                            {formik.touched.password && formik.errors.password && <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                            {responseError &&  <div style={{color: 'red'}}>{responseError}</div>}\r\n                        </Box>\r\n                        <Box>\r\n                            <h4>Create new password and we will send you further instructions to email</h4>\r\n                        </Box>\r\n                        <Button variant=\"contained\"\r\n                                color=\"primary\"\r\n                                type=\"submit\"\r\n                                style={{\r\n                                    borderRadius: \"30px\",\r\n                                    background: \"#73926C\",\r\n                                    marginTop: \"30px\",\r\n                                    alignSelf: 'center',\r\n                                    boxShadow: '0px 4px 18px rgba(33, 38, 143, 0.35), inset 0px 1px 0px rgba(255, 255, 255, 0.3)'\r\n                                }}\r\n                            // disabled={forgotStatus === \"loading\"}\r\n                        >Create new password</Button>\r\n                    </form>\r\n                </Grid>\r\n            </Grid>\r\n        </Container></div>\r\n\r\n});\r\n\r\nexport default RecoveryPassword\r\n","import axios from \"axios\"\r\n\r\n\r\nconst instance = axios.create({\r\n    // baseURL: \"https://neko-back.herokuapp.com/2.0\",\r\n    baseURL: process.env.REACT_APP_API_PATH,\r\n    withCredentials: true,\r\n});\r\n\r\n\r\n\r\nexport const registrationAPI = {\r\n    registration(email:string, password: string) {\r\n        return instance.post(\"auth/register\", {email, password});\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {registrationAPI} from \"../dal/registration-api\";\r\n\r\nlet initialState = {\r\n    isRegistered: false\r\n};\r\n\r\nexport type LoginInitialStateType = typeof initialState;\r\n\r\n//Reducer\r\nexport const registrationReducer = (state = initialState, action: ActionsType): LoginInitialStateType => {\r\n    switch (action.type) {\r\n        case \"REGISTERED\":\r\n            return {...state, isRegistered: action.isRegistered}\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// actions\r\n\r\nconst isRegisteredAC = (isRegistered: boolean) => ({type: \"REGISTERED\", isRegistered})\r\n\r\n//thunks\r\nexport const registrationTC = (email: string, password: string) => (dispatch: Dispatch) => {\r\n    registrationAPI.registration(email, password)\r\n        .then((res)=> {\r\n            dispatch(isRegisteredAC(true))\r\n        })\r\n        .catch((error)=>{\r\n            alert(\"This email is already registered\")\r\n    })\r\n}\r\n\r\n// Action Creators\r\n//types\r\n\r\n// type ActionsTypes =\r\ntype ActionsType = ReturnType<typeof isRegisteredAC>","import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {registrationTC} from \"../../bll/registration-reducer\";\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    confirmPassword?: string\r\n}\r\n\r\nconst Registration = () => {\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.login.isAuth)\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            confirmPassword: \"\",\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Required\";\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\";\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"Required\";\r\n            } else if (values.password.length < 3) {\r\n                errors.password = \"Password must be more than two characters\"\r\n            }\r\n            if (!values.confirmPassword) {\r\n                errors.confirmPassword = \"Required\";\r\n            } else if (values.confirmPassword !== values.password) {\r\n                errors.confirmPassword = \"Passwords must match\"\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(registrationTC(values.email, values.password))\r\n            formik.resetForm()\r\n        },\r\n    });\r\n\r\n    const resetHandler = () => {\r\n        formik.resetForm()\r\n    }\r\n\r\n\r\n    if (isAuth) {\r\n        return <Navigate to={\"/profile\"}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"main\">\r\n            <div className=\"mainBlock authBlock\">\r\n                <Grid container justifyContent={\"center\"}>\r\n                    <Grid item justifyContent={\"center\"}>\r\n                        <form onSubmit={formik.handleSubmit}>\r\n                            <FormControl>\r\n                                <FormLabel>\r\n                                    <Grid container justifyContent={\"center\"}>\r\n                                        <Grid item justifyContent={\"center\"}>\r\n                                            <h1>It-incubator</h1>\r\n                                            <Grid container justifyContent={\"center\"}>\r\n                                                <Grid item justifyContent={\"center\"}>\r\n                                                    <h3>Sign up</h3>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n\r\n                                </FormLabel>\r\n                                <FormGroup>\r\n                                    <TextField label=\"Email\"\r\n                                               margin=\"normal\" {...formik.getFieldProps(\"email\")}/>\r\n                                    {formik.touched.email && formik.errors.email &&\r\n                                    <div style={{color: \"red\"}}>{formik.errors.email}</div>}\r\n                                    <TextField type=\"password\" label=\"Password\"\r\n                                               margin=\"normal\" {...formik.getFieldProps(\"password\")}\r\n                                    />\r\n                                    {formik.touched.password && formik.errors.password &&\r\n                                    <div style={{color: \"red\"}}>{formik.errors.password}</div>}\r\n\r\n                                    <TextField type=\"password\" label=\"Confirm password\"\r\n                                               margin=\"normal\" {...formik.getFieldProps(\"confirmPassword\")}\r\n                                    />\r\n                                    {formik.touched.confirmPassword && formik.errors.confirmPassword &&\r\n                                    <div style={{color: \"red\"}}>{formik.errors.confirmPassword}</div>}\r\n                                    <Box>\r\n                                        <Grid container justifyContent={\"space-between\"}>\r\n                                            <Button onClick={resetHandler} variant={\"contained\"}\r\n                                                    color={\"secondary\"}>Cancel</Button>\r\n                                            <Button type={\"submit\"} variant={\"contained\"}\r\n                                                    color={\"primary\"}>Register</Button>\r\n                                        </Grid>\r\n                                    </Box>\r\n                                </FormGroup>\r\n                            </FormControl>\r\n                        </form>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Registration\r\n","import React from \"react\";\r\n\r\nconst Main = () => {\r\n\r\n    return (\r\n        <div className={\"main\"}>Page not found</div>\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\n\r\nconst CheckEmail = () => {\r\n    const { email } = useParams() as {\r\n        email: string;\r\n    }\r\n    return (\r\n        <div className={\"main\"}>\r\n            <Container maxWidth=\"sm\" style={{background: \"#F9F9FE\", height: \"50vh\", borderRadius: \"8px\"}}>\r\n                <Grid container direction={\"column\"} justifyContent={\"center\"} alignItems={\"center\"} spacing={3}>\r\n                    <Grid item style={{\r\n                        marginTop: \"20px\",\r\n                        display: \"flex\",\r\n                        flexDirection: \"column\",\r\n                        justifyContent: 'center',\r\n                        alignItems: \"center\"\r\n                    }}>\r\n                        <Box component=\"span\" sx={{marginTop: \"20px\", marginBottom: \"20px\"}}>\r\n                            <h2 style={{textAlign: 'center'}}>Check Email</h2>\r\n                        </Box>\r\n                        <Box>\r\n                            <h4>We’ve sent an Email with instructions to {email}</h4>\r\n                        </Box>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CheckEmail\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {TextField} from \"@mui/material\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getCardsTC, PacksParamsType} from \"../../../bll/packs-reducer\";\r\nimport {AppStateType} from \"../../../bll/store\";\r\n\r\ntype SearchType = {\r\n    searchResult: number\r\n    getSearchResult:(searchTerm: string)=> void\r\n}\r\n\r\n\r\nconst Search = (props: SearchType) => {\r\n    const [searchTerm, setSearchTerm] = useState('')\r\n    const packsAmount = useSelector<AppStateType, number>(state => state.packs.cardPacksTotalCount)\r\n\r\n    useEffect(() => {\r\n        const delayDebounceFn = setTimeout(() => {\r\n            props.getSearchResult(searchTerm)\r\n        }, 700)\r\n\r\n        return () => clearTimeout(delayDebounceFn)\r\n    }, [searchTerm])\r\n\r\n\r\n    return (\r\n        <div style={{display: \"flex\", flexDirection: \"row\", justifyContent:\"space-between\"}}>\r\n            <TextField id=\"outlined-basic\" label=\"Search pack\" variant=\"outlined\"\r\n                       onChange={(e) => setSearchTerm(e.target.value)}/>\r\n            {packsAmount && <h4>{packsAmount} packs were founded</h4>}\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default Search\r\n","import axios, {AxiosResponse} from \"axios\"\r\n\r\nconst instance = axios.create({\r\n    // baseURL: \"https://neko-back.herokuapp.com/2.0\",\r\n    baseURL: process.env.REACT_APP_API_PATH,\r\n    withCredentials: true,\r\n})\r\n\r\nexport type GetPacksParamsType = {\r\n    packName?: string\r\n    min?:number\r\n    max?:number\r\n    sortPacks?:string\r\n    page?:number\r\n    pageCount?:number\r\n    user_id?:string\r\n}\r\n\r\nexport type AddPackParamsType = {\r\n    cardsPack: {\r\n        name: string\r\n        path?: string\r\n        grade?: number\r\n        shots?: number\r\n        rating?: number\r\n        deckCover?: string\r\n        private?: boolean\r\n        type?: string\r\n    }\r\n}\r\n\r\nexport type UpdatePackParamsType = {\r\n    _id: string\r\n    name?: string\r\n}\r\n\r\n\r\nexport type CardsPack = {\r\n    _id:string\r\n    user_id:string\r\n    name:string\r\n    cardsCount:number\r\n    created: string\r\n    updated: string\r\n}\r\n\r\nexport type ResponsePacksType = {\r\n    cardPacks: CardsPack[]\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n}\r\n\r\n\r\nexport const packsListAPI = {\r\n    getPacks(params: GetPacksParamsType){\r\n        return instance.get<GetPacksParamsType, AxiosResponse<ResponsePacksType>>('cards/pack', {\r\n            params: {...params}\r\n        })},\r\n    addPack(pack:AddPackParamsType){\r\n        return instance.post<AddPackParamsType, AxiosResponse<ResponsePacksType>>('/cards/pack', {...pack})\r\n    },\r\n    deletePack(packId: string){\r\n        return instance.delete<AxiosResponse<ResponsePacksType>>('/cards/pack', {params: {id: packId}})\r\n    },\r\n    updatePack(params: UpdatePackParamsType) {\r\n        return instance.put<AddPackParamsType, AxiosResponse<ResponsePacksType>>('cards/pack', {cardsPack:{...params}})\r\n    }\r\n}\r\n","import {CardsPack, GetPacksParamsType, packsListAPI, ResponsePacksType} from \"../dal/packsListApi\";\r\nimport {AppStateType} from \"./store\";\r\nimport {ThunkAction} from \"redux-thunk\"\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\n\r\nconst InitialState = {\r\n    cardPacks: [\r\n        {\r\n            _id: \"\",\r\n            user_id: \"\",\r\n            name: \"\",\r\n            cardsCount: 0,\r\n            created: \"\",\r\n            updated: \"\"\r\n        }],\r\n    cardPacksTotalCount: 0,\r\n    maxCardsCount: 0,\r\n    minCardsCount: 0,\r\n    packsParams: {\r\n        max: 0,\r\n        min: 0,\r\n        page: 0,\r\n        pageCount: 10,\r\n        sortPacks: \"\",\r\n        user_id: \"\",\r\n        packName: \"\",\r\n    },\r\n}\r\n\r\n\r\n\r\n//types\r\ntype InitialStateType = {\r\n    cardPacks: CardsPack[]\r\n    cardPacksTotalCount: number\r\n    packsParams: PacksParamsType\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n}\r\nexport type PacksParamsType = {\r\n    max: number,\r\n    min: number,\r\n    page: number,\r\n    pageCount: number,\r\n    sortPacks: string,\r\n    user_id: string,\r\n    packName: string,\r\n}\r\n\r\nexport const packsReducer = (state = InitialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case GET_PACKS:\r\n            return {\r\n                ...state,\r\n                cardPacks: action.data.cardPacks,\r\n                cardPacksTotalCount: action.data.cardPacksTotalCount,\r\n                maxCardsCount: action.data.maxCardsCount,//from here we get max allowed value for slider\r\n                minCardsCount: action.data.minCardsCount,//from here we get min allowed value for slider\r\n                packsParams: {\r\n                    ...state.packsParams,\r\n                    page: action.data.page,\r\n                    pageCount: action.data.pageCount\r\n                }\r\n            }\r\n        case SET_SORT_VALUE:\r\n            return {\r\n                ...state, packsParams: {...state.packsParams, sortPacks: action.sortValue}\r\n            }\r\n        case SET_PACKS_PAGE:\r\n            return {\r\n                ...state, packsParams: {...state.packsParams, page: action.page}\r\n            }\r\n        case SET_PACKS_CARD_RANGE:\r\n            return {\r\n                ...state, packsParams: {...state.packsParams, min: action.min, max: action.max}\r\n            }\r\n        case SET_PACKS_CARD_OWNER_FILTER:\r\n            return {\r\n                ...state, packsParams: {...state.packsParams, user_id: action.owner}\r\n            }\r\n        case SET_PACKS_SEARCH_NAME:\r\n            return {\r\n                ...state, packsParams: {...state.packsParams, packName: action.packName, page: 1}\r\n            }\r\n        case SET_PAGE_COUNT:\r\n            return {\r\n                ...state, packsParams:{...state.packsParams, pageCount:action.pageCount}\r\n            }\r\n        case DELETE_PACK:\r\n            return {\r\n                ...state,\r\n                cardPacks: state.cardPacks.filter((cardPack) => cardPack._id === action.packId)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nconst GET_PACKS = \"card-learning/packs/GET-CARDS\"\r\nconst SET_SORT_VALUE = \"card-learning/packs/SET_SORT_VALUE\"\r\nconst SET_PACKS_PAGE = \"card-learning/packs/SET_PACKS_PAGE\"\r\nconst SET_PACKS_CARD_RANGE = \"card-learning/packs/SET_PACKS_CARD_RANGE\"\r\nconst SET_PACKS_CARD_OWNER_FILTER = \"card-learning/packs/SET_PACKS_CARD_OWNER_FILTER\"\r\nconst SET_PACKS_SEARCH_NAME = \"card-learning/packs/SET_PACKS_SEARCH_NAME\"\r\nconst SET_PAGE_COUNT = 'card-learning/packs/SET-PAGE_COUNT'\r\nconst DELETE_PACK = 'card-learning/packs/DELETE_PACK'\r\n\r\nexport const GetCardsAC = (data: ResponsePacksType) => ({\r\n    type: GET_PACKS,\r\n    data: data,\r\n} as const);\r\n\r\nexport const SetSortValueAC = (sortValue: string) => ({\r\n    type: SET_SORT_VALUE,\r\n    sortValue\r\n} as const);\r\n\r\nexport const SetPacksPageAC = (page: number) => ({\r\n    type: SET_PACKS_PAGE,\r\n    page\r\n} as const);\r\n\r\nexport const SetPacksCardRangeAC = (min: number, max: number) => ({\r\n    type: SET_PACKS_CARD_RANGE,\r\n    min,\r\n    max\r\n} as const);\r\n\r\nexport const SetPacksCardOwnerFilterAC = (owner: string) => ({\r\n    type: SET_PACKS_CARD_OWNER_FILTER,\r\n    owner\r\n} as const);\r\nexport const SetPageCountAC = (pageCount: number) => ({\r\n    type: SET_PAGE_COUNT,\r\n    pageCount,\r\n} as const);\r\n\r\nexport const SetPacksSearchNameAC = (packName: string) => ({\r\n    type: SET_PACKS_SEARCH_NAME,\r\n    packName\r\n} as const);\r\n\r\nexport const DeletePackAC = (packId: string) => ({\r\n    type: DELETE_PACK,\r\n    packId\r\n} as const)\r\n\r\n\r\n\r\n\r\nexport const getCardsTC = (data: GetPacksParamsType): GetThunk => (dispatch, getState) => {\r\n    if (data.sortPacks && data.sortPacks !== getState().packs.packsParams.sortPacks) {\r\n        dispatch(SetSortValueAC(data.sortPacks))\r\n    }\r\n    if (data.page) {\r\n        dispatch(SetPacksPageAC(data.page))\r\n    }\r\n    if (data.min !== undefined && data.max !== undefined) {\r\n        dispatch(SetPacksCardRangeAC(data.min, data.max))\r\n    }\r\n    if (data.user_id) {\r\n        if (data.user_id === \"all\") {\r\n            dispatch(SetPacksCardOwnerFilterAC(\"\"))\r\n        } else {\r\n            dispatch(SetPacksCardOwnerFilterAC(data.user_id))\r\n        }\r\n    }\r\n    if (data.packName || data.packName===\"\") {\r\n        dispatch(SetPacksSearchNameAC(data.packName))\r\n    }\r\n\r\n    if( data.pageCount && data.pageCount !== getState().packs.packsParams.pageCount) {\r\n        dispatch(SetPageCountAC(data.pageCount))\r\n    }\r\n    const state = getState().packs.packsParams\r\n    // @ts-ignore\r\n    packsListAPI.getPacks(state)\r\n        .then(res => {\r\n            dispatch(GetCardsAC(res.data))\r\n            // @ts-ignore\r\n\r\n        })\r\n}\r\n\r\nexport const deletePackTC = (packId: string):GetThunk => (dispatch, getState: () => AppStateType) => {\r\n    const userId = getState().login.user._id\r\n    packsListAPI.deletePack(packId)\r\n        .then(() => {\r\n            dispatch(DeletePackAC(packId))\r\n            dispatch(getCardsTC({user_id: userId}))\r\n        })\r\n        .catch(error => {\r\n            // dispatch(setErrorMessage(error.message ? error.message :\"Network error occurred!\"));\r\n            // dispatch(setForgotStatus(\"failed\"))\r\n        })\r\n}\r\n\r\nexport const updatePackTC = (_id: string, name: string):GetThunk => (dispatch, getState: () => AppStateType) => {\r\n    const userId = getState().login.user._id\r\n    packsListAPI.updatePack({name:name, _id: _id})\r\n        .then(() => {\r\n            dispatch(getCardsTC({}))\r\n        })\r\n        .catch(error => {\r\n            // dispatch(setErrorMessage(error.message ? error.message :\"Network error occurred!\"));\r\n            // dispatch(setForgotStatus(\"failed\"))\r\n        })\r\n}\r\n\r\nexport const addPackTC = (name: string):GetThunk => (dispatch, getState: () => AppStateType) => {\r\n\r\n    packsListAPI.addPack({cardsPack:{name:name}} )\r\n        .then(() => {\r\n            dispatch(getCardsTC({}))\r\n        })\r\n        .catch(error => {\r\n            // dispatch(setErrorMessage(error.message ? error.message :\"Network error occurred!\"));\r\n            // dispatch(setForgotStatus(\"failed\"))\r\n        })\r\n}\r\n\r\n\r\nexport type GetPacksType = ReturnType<typeof GetCardsAC>\r\nexport type SetSortValueType = ReturnType<typeof SetSortValueAC>\r\nexport type SetPacksPageType = ReturnType<typeof SetPacksPageAC>\r\nexport type SetPacksCardRangeType = ReturnType<typeof SetPacksCardRangeAC>\r\nexport type SetPacksCardOwnerFilterType = ReturnType<typeof SetPacksCardOwnerFilterAC>\r\nexport type SetPacksSearchNameType = ReturnType<typeof SetPacksSearchNameAC>\r\nexport type SetPageCountType = ReturnType<typeof SetPageCountAC>\r\nexport type DeletePackType = ReturnType<typeof DeletePackAC>\r\n\r\n\r\ntype ActionsType = GetPacksType\r\n    | SetSortValueType\r\n    | SetPacksPageType\r\n    | SetPacksCardRangeType\r\n    | SetPacksCardOwnerFilterType\r\n    | SetPacksSearchNameType\r\n    | SetPageCountType\r\n    | DeletePackType\r\n\r\n\r\nexport type GetThunk<ReturnType = void> = ThunkAction<ReturnType, AppStateType, unknown, ActionsType>\r\n","import * as React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getCardsTC} from \"../../../bll/packs-reducer\";\r\nimport {AppStateType} from \"../../../bll/store\";\r\nimport {ToggleButton, ToggleButtonGroup} from \"@mui/material\";\r\n\r\n\r\nconst PacksToggle = () => {\r\n    const [packOwner, setPackOwner] = React.useState('all');\r\n    const dispatch = useDispatch()\r\n    const id = useSelector<AppStateType, string>(state => state.login.user._id)\r\n\r\n    const handleChange = (event: React.MouseEvent<HTMLElement>, packOwner: string) => {\r\n        if (packOwner !== null) {\r\n\r\n            if (packOwner === \"all\") {\r\n                dispatch(getCardsTC({user_id: packOwner}))\r\n            }\r\n            if (packOwner === \"my\") {\r\n                dispatch(getCardsTC({user_id: id}))\r\n            }\r\n            setPackOwner(packOwner);\r\n\r\n        }\r\n    };\r\n    return (\r\n        <div>\r\n            <h4>Show packs cards</h4>\r\n            <ToggleButtonGroup\r\n                size=\"large\"\r\n                color=\"primary\"\r\n                value={packOwner}\r\n                exclusive\r\n                onChange={handleChange}\r\n                aria-label=\"choose packs\"\r\n            >\r\n                <ToggleButton value=\"my\">\r\n                    MY\r\n                </ToggleButton>\r\n                <ToggleButton value=\"all\">\r\n                    All\r\n                </ToggleButton>\r\n            </ToggleButtonGroup>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default PacksToggle\r\n","import React, {useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../bll/store\";\r\nimport styles from \"./Paginator.module.css\"\r\nimport cn from \"classnames\";\r\nimport {getCardsTC, PacksParamsType} from \"../../../bll/packs-reducer\";\r\n\r\nconst Paginator = () => {\r\n    const pageCount: number = useSelector<AppStateType, number>(state => state.packs.packsParams.pageCount)\r\n    const cardPacksTotalCount: number = useSelector<AppStateType, number>(state => state.packs.cardPacksTotalCount)\r\n    const currentPage: number = useSelector<AppStateType, number>(state => state.packs.packsParams.page)\r\n\r\n\r\n    let pagesCount = Math.ceil(cardPacksTotalCount / pageCount)\r\n    let pages = []\r\n\r\n    for (let i = 1; i < pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    let page = 10;\r\n    let portionCount = Math.ceil(pagesCount / page)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionNumber = (portionNumber - 1) * page + 1\r\n    let rightPortionPageNumber = portionNumber * page\r\n\r\n    const dispatch = useDispatch()\r\n    const onPageChanged = (page: number) => {\r\n        dispatch(getCardsTC({page}))\r\n    }\r\n\r\n    return <div className={styles.paginator}>\r\n         <button disabled={portionNumber===1} className={styles.arrowLeft} onClick={() => {\r\n            setPortionNumber(portionNumber - 1)\r\n        }}></button>\r\n        {pages.filter(p => p >= leftPortionNumber && p <= rightPortionPageNumber)\r\n            .map((p) => {\r\n                return <span className={cn({\r\n                    [styles.selectedPage]: currentPage === p\r\n                }, styles.pageNumber)}\r\n                             key={p}\r\n                             onClick={(e) => {\r\n                                 onPageChanged(p)\r\n                             }}>{p}</span>\r\n            })}\r\n        {portionCount > portionNumber &&\r\n        <button className={styles.arrowRight} onClick={() => {\r\n            setPortionNumber(portionNumber + 1)\r\n        }}></button>}\r\n    </div>\r\n\r\n}\r\n\r\nexport default Paginator\r\n","import * as React from \"react\";\r\nimport {useState} from \"react\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport Button from \"@mui/material/Button\";\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport {CardsPack} from \"../../dal/packsListApi\";\r\nimport {deletePackTC, getCardsTC, updatePackTC} from \"../../bll/packs-reducer\";\r\nimport {IconButton} from \"@mui/material\";\r\nimport SchoolIcon from '@mui/icons-material/School';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\n\r\ntype PacksPropsType = {\r\n    packs: Array<CardsPack>\r\n}\r\n\r\nconst PacksTable = (props: PacksPropsType) => {\r\n\r\n    const userID = useSelector<AppStateType, string>(state => state.login.user._id)\r\n    const [name, setName] = useState(true)\r\n    const [cardsCount, setCardsCount] = useState(true)\r\n    const [created, setCreated] = useState(true)\r\n    const [updated, setUpdated] = useState(true)\r\n    const dispatch = useDispatch()\r\n\r\n    const sort = (value: boolean, sortName: string, dispatch: any) => {\r\n        if (value) {\r\n            dispatch(getCardsTC({sortPacks: `${1}${sortName}`}))\r\n        } else {\r\n            dispatch(getCardsTC({sortPacks: `${0}${sortName}`}))\r\n        }\r\n    }\r\n\r\n    const onSortHandler = (sortName: string) => {\r\n        if (sortName === \"name\") {\r\n            setName(!name)\r\n            sort(name, sortName, dispatch)\r\n        }\r\n        if (sortName === \"cardsCount\") {\r\n            setCardsCount(!cardsCount)\r\n            sort(cardsCount, sortName, dispatch)\r\n\r\n        }\r\n        if (sortName === \"created\") {\r\n            setCreated(!created)\r\n            sort(created, sortName, dispatch)\r\n        }\r\n        if (sortName === \"updated\") {\r\n            setUpdated(!updated)\r\n            sort(updated, sortName, dispatch)\r\n        }\r\n\r\n    }\r\n    const getCardsHandler = (cardsId: string) => {\r\n        alert(cardsId)\r\n    }\r\n\r\n    const deletePackHandler = (packId: string) => {\r\n        return props.packs.map(pack => {\r\n            if(pack.user_id === userID) {\r\n                dispatch(deletePackTC(packId))\r\n            }\r\n        })\r\n    }\r\n    const updatePackHandler = (_id:string, name:string) => {\r\n                dispatch(updatePackTC(_id,name))\r\n    }\r\n\r\n    const styleHeaderButton = {\r\n        color: \"black\"\r\n    }\r\n    const styleActionsButton = {\r\n        marginLeft: \"10px\"\r\n    }\r\n\r\n    const styleHeader = {\r\n        backgroundColor: \"#8CE0EB\"\r\n    }\r\n\r\n    interface DateTimeFormatOptions {\r\n        weekday?: \"long\" | \"short\" | \"narrow\";\r\n        year?: \"numeric\" | \"2-digit\";\r\n        month?: \"numeric\" | \"2-digit\" |\"long\" | \"short\" | \"narrow\";\r\n        day?: \"numeric\" | \"2-digit\";\r\n        hour?: \"numeric\" | \"2-digit\";\r\n        minute?: \"numeric\" | \"2-digit\";\r\n    }\r\n\r\n    const dateOptions:DateTimeFormatOptions = { weekday: 'long', year: 'numeric', month: 'long',day:\"numeric\", hour: \"numeric\", minute: \"numeric\" };\r\n\r\n    return (\r\n        <TableContainer component={Paper} style={{maxHeight: 500, minHeight: 500, minWidth: 1000, marginTop: 20}}>\r\n            <Table aria-label=\"simple table\" stickyHeader={true}>\r\n                <TableHead>\r\n                    <TableRow style={{}}>\r\n                        <TableCell align=\"left\" style={styleHeader}>\r\n                            <Button style={styleHeaderButton} variant=\"text\"\r\n                                    onClick={() => onSortHandler(\"name\")}>Name⮃</Button>\r\n                        </TableCell>\r\n                        <TableCell align=\"left\" style={styleHeader}>\r\n                            <Button style={styleHeaderButton} variant=\"text\"\r\n                                    onClick={() => onSortHandler(\"cardsCount\")}>Cards⮃</Button>\r\n                        </TableCell>\r\n                        <TableCell align=\"left\" style={styleHeader}>\r\n                            <Button style={styleHeaderButton} variant=\"text\"\r\n                                    onClick={() => onSortHandler(\"created\")}>Created⮃</Button>\r\n                        </TableCell>\r\n                        <TableCell align=\"left\" style={styleHeader}>\r\n                            <Button style={styleHeaderButton} variant=\"text\"\r\n                                    onClick={() => onSortHandler(\"updated\")}>Updated⮃</Button>\r\n                        </TableCell>\r\n                        <TableCell align=\"left\" style={styleHeader}>\r\n                            ACTIONS\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {props.packs.map((row, index) => (\r\n                        <TableRow\r\n                            key={`${index}${row.name}`}\r\n                            sx={{\r\n                                \"&:last-child td, &:last-child th\": {border: 0}, \"&:nth-of-type(odd)\": {\r\n                                    backgroundColor: \"#F8F7FD\",\r\n                                },\r\n                            }}\r\n                        >\r\n                            <TableCell component=\"th\" scope=\"row\" align=\"left\"\r\n                                       style={{\r\n                                           maxWidth: 150,\r\n                                           width: 150,\r\n                                           textOverflow: \"ellipsis\",\r\n                                           overflow: \"hidden\"\r\n                                       }}>\r\n                                {row.name}\r\n                            </TableCell>\r\n                            <TableCell align=\"left\">{row.cardsCount}</TableCell>\r\n                            <TableCell align=\"left\">{new Date(row.created).toLocaleDateString(\"en-US\",dateOptions)}</TableCell>\r\n                            <TableCell align=\"left\">{new Date(row.updated).toLocaleDateString(\"en-US\",dateOptions)}</TableCell>\r\n                            <TableCell align=\"left\">\r\n                                <IconButton style={row.user_id !== userID\r\n                                    ?\r\n                                    {\r\n                                        color: \"red\",\r\n                                        opacity: 0.3\r\n                                    }\r\n                                    :\r\n                                    {color: \"red\"}}\r\n                                            disabled={row.user_id !== userID}\r\n                                            onClick={() => deletePackHandler(row._id)}><DeleteIcon/>\r\n                                </IconButton>\r\n                                <IconButton style={styleActionsButton} disabled={row.user_id !== userID}\r\n                                            onClick={() => updatePackHandler(row._id, \"super new Pack_name\")}>\r\n                                    <EditIcon/>\r\n                                </IconButton>\r\n                                <IconButton\r\n                                    style={styleActionsButton}\r\n                                    onClick={() => getCardsHandler(row.user_id)}>\r\n                                    <SchoolIcon/>\r\n                                </IconButton>\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\n\r\n\r\nexport default PacksTable\r\n","import React, { useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getCardsTC} from \"../../../bll/packs-reducer\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport {Input, InputLabel, Select, SelectChangeEvent} from \"@mui/material\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {AppStateType} from \"../../../bll/store\";\r\nimport styles from './Select.module.css'\r\n\r\n\r\nconst ShowItemsPerPage = () => {\r\n    const pageCount=useSelector<AppStateType,number>(state=>state.packs.packsParams.pageCount)\r\n    const [page, setCards]=React.useState(pageCount)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const handleChange=(event: SelectChangeEvent)=>{\r\n        setCards(+event.target.value as number)\r\n        dispatch(getCardsTC({pageCount: +event.target.value}))\r\n    }\r\n    useEffect(() => {\r\n        setCards(pageCount)\r\n    }, [pageCount])\r\n\r\n    return (<div className={styles.select}>\r\n    <FormControl sx={{ minWidth: 80 }}>\r\n        <InputLabel id=\"pageCount\">Per page</InputLabel>\r\n        <Select\r\n            labelId=\"pageCount\"\r\n            id=\"pageCount\"\r\n            value={page.toString()}\r\n            label=\"Per Page\"\r\n            onChange={handleChange}\r\n        >\r\n            <MenuItem value={5}>5</MenuItem>\r\n            <MenuItem value={10}>10</MenuItem>\r\n            <MenuItem value={15}>15</MenuItem>\r\n        </Select>\r\n    </FormControl>\r\n    </div>)\r\n\r\n}\r\n\r\nexport default ShowItemsPerPage\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getCardsTC} from \"../../../bll/packs-reducer\";\r\nimport {AppStateType} from \"../../../bll/store\";\r\nimport {Slider} from \"@mui/material\";\r\n\r\nconst DoubleRange = () => {\r\n    const dispatch = useDispatch()\r\n    const max = useSelector<AppStateType, number>(state => state.packs.maxCardsCount)\r\n    const min = useSelector<AppStateType, number>(state => state.packs.minCardsCount)\r\n    const [value, setValue] = useState<number[]>([min, max]);\r\n    const handleChange = (event: React.SyntheticEvent | Event, newValue: number | Array<number>) => {\r\n        setValue(newValue as number[]);\r\n        // @ts-ignore\r\n        dispatch(getCardsTC({min: newValue[0], max: newValue[1]}))\r\n    };\r\n    useEffect(() => {\r\n        setValue([min, max])\r\n    }, [max, min])\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h4>Number of cards</h4>\r\n            </div>\r\n            <div style={{padding: 15}}>\r\n                <Slider\r\n                    value={value}\r\n                    onChangeCommitted={handleChange}\r\n                    min={min}\r\n                    max={max}\r\n                    valueLabelDisplay=\"on\"\r\n                />\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default DoubleRange\r\n","import React from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport {packsListAPI} from \"../../../dal/packsListApi\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addPackTC} from \"../../../bll/packs-reducer\";\r\n\r\nconst AddPack = () => {\r\n    const  dispatch = useDispatch()\r\n    const addPackHandler = () => {\r\n        dispatch(addPackTC( \"newPack\"))\r\n    }\r\n    return (\r\n        <Button variant=\"contained\" onClick={addPackHandler} color=\"success\">ADD PACK</Button>\r\n    )\r\n}\r\n\r\nexport default AddPack\r\n","import React from \"react\";\r\nimport Search from \"../utils/Controls/Search\";\r\nimport PacksToggle from \"../utils/Controls/PacksToggle\";\r\nimport Paginator from \"../utils/Controls/Paginator\";\r\nimport PacksTable from \"./PacksTable\";\r\nimport ShowItemsPerPage from \"../utils/Controls/ShowItemsPerPage\";\r\nimport DoubleRange from \"../utils/Controls/DoubleRange\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport {getCardsTC} from \"../../bll/packs-reducer\";\r\nimport {CardsPack} from \"../../dal/packsListApi\";\r\nimport AddPack from \"../utils/Controls/AddPack\";\r\n\r\n\r\nconst PacksListsContainer = () => {\r\n    const packs = useSelector<AppStateType, Array<CardsPack>>(state => state.packs.cardPacks)\r\n    const packsAmount = useSelector<AppStateType, number>(state => state.packs.cardPacksTotalCount)\r\n    const dispatch = useDispatch()\r\n    const getPacks = (searchTerm: string) => dispatch(getCardsTC({packName: searchTerm}))\r\n    // const dispatch = useDispatch()\r\n    // useEffect(() => {\r\n    //     dispatch(getCardsTC({}))\r\n    // }, [])\r\n\r\n    return (\r\n        <div className={\"main\"}>\r\n            <div className=\"mainBlock\">\r\n                <div className={\"left__panel\"}>\r\n                    <PacksToggle/>\r\n                    <DoubleRange/>\r\n                    <AddPack/>\r\n                </div>\r\n                <div>\r\n                    <Search getSearchResult={getPacks} searchResult={packsAmount}/>\r\n                    <PacksTable packs={packs}/>\r\n                    <div className={\"bottom__panel\"}>\r\n                        <Paginator/>\r\n                        <ShowItemsPerPage/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PacksListsContainer\r\n","import React from 'react';\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport ForgotPassword from \"../../components/forgotPassword/ForgotPassword\";\r\nimport Login from \"../../components/login/Login\";\r\nimport Profile from \"../../components/profile/Profile\";\r\nimport RecoveryPassword from \"../../components/recoveryPassword/RecoveryPassword\";\r\nimport Registration from \"../../components/registration/Registration\";\r\nimport NotFound from \"../../components/notFound/NotFound\";\r\nimport CheckEmail from \"../../components/forgotPassword/CheckEmail\";\r\nimport PacksListsContainer from \"../../components/PacksList/PackLIstsContainer\";\r\n\r\nconst Main = () => {\r\n\r\n    return (\r\n        <Routes >\r\n            <Route path='/login' element={<Login/>}/>\r\n            <Route path='/' element={<Login/>}/>\r\n            <Route path='/forgot-password' element={<ForgotPassword/>}/>\r\n            <Route path='/profile' element={<Profile/>}/>\r\n            <Route path='/recovery-password/:token' element={<RecoveryPassword/>}/>\r\n            <Route path='/packs-list' element={<PacksListsContainer/>}/>\r\n            <Route path='/registration' element={<Registration/>}/>\r\n            <Route path='/404' element={<NotFound/>}/>\r\n            <Route path='/check-email/:email' element={<CheckEmail/>}/>\r\n            <Route path=\"*\" element={<Navigate to=\"/404\" />}/>\r\n        </Routes>\r\n    )\r\n}\r\n\r\nexport default Main;\r\n","import { createTheme } from '@material-ui/core/styles';\r\n\r\nexport default createTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#73926C',\r\n            contrastText: '#fff',\r\n        },\r\n        secondary: {\r\n            main: '#EDA909',\r\n            contrastText: '#fff',\r\n        },\r\n\r\n    }\r\n});\r\n","import React from \"react\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\nconst Preloader = () => {\r\n    return (<div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%', opacity: 0.5}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader\r\n","import React, {useEffect} from \"react\";\r\nimport \"./App.css\";\r\nimport Header from \"./ui/ui-header/Header\";\r\nimport Main from \"./ui/ui-main/Main\";\r\nimport {MuiThemeProvider} from \"@material-ui/core/styles\";\r\nimport MyTheme from \"./MyTheme\";\r\nimport {initializeAppTC, RequestStatusType} from \"./bll/app-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"./bll/store\";\r\nimport Preloader from \"./components/utils/Preloader\";\r\n\r\nfunction App() {\r\n    const isLoading = useSelector<AppStateType, RequestStatusType>(state => state.app.status)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (isLoading === 'loading')\r\n        return <Preloader />\r\n\r\n    return (\r\n        <MuiThemeProvider theme={MyTheme}>\r\n            <div className={\"App\"}>\r\n                <Header/>\r\n                <Main/>\r\n            </div>\r\n        </MuiThemeProvider>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","let initialState = {\r\n\r\n};\r\n\r\nexport type LoginInitialStateType = typeof initialState;\r\n\r\n//Reducer\r\nexport const profileReducer = (state = initialState, action: any): LoginInitialStateType => {\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// actions\r\n\r\n\r\n// Action Creators\r\n\r\n// type ActionsTypes =\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from 'redux-thunk';\r\nimport {loginReducer} from \"./login-reducer\";\r\nimport {forgotPasswordReducer} from \"./forgotPassword-reducer\";\r\nimport {setNewPasswordReducer} from \"./setNewPassword-reducer\";\r\nimport {registrationReducer} from \"./registration-reducer\";\r\nimport {profileReducer} from \"./profile-reducer\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {packsReducer} from \"./packs-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    login: loginReducer,\r\n    forgot: forgotPasswordReducer,\r\n    newPassword: setNewPasswordReducer,\r\n    registration: registrationReducer,\r\n    profile: profileReducer,\r\n    app: appReducer,\r\n    packs: packsReducer\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never;\r\nexport type InferActionTypes<T extends { [key: string]: (...args: any) => any }> = ReturnType<PropertiesType<T>>\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\nexport default // @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport App from \"./App\";\r\nimport store from \"./bll/store\";\r\n//comment\r\nReactDOM.render(\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App />\r\n            </Provider>\r\n        </HashRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__1u1Cm\",\"paginator\":\"Paginator_paginator__1VFdz\",\"pageNumber\":\"Paginator_pageNumber__MoS0k\",\"arrowLeft\":\"Paginator_arrowLeft__bvzOo\",\"arrowRight\":\"Paginator_arrowRight__2Jh-l\"};"],"sourceRoot":""}