{"version":3,"sources":["reportWebVitals.ts","dal/authApi.ts","dal/initialize-api.ts","bll/app-reducer.ts","bll/login-reducer.ts","ui/ui-header/Header.tsx","dal/restorePasswordApi.ts","bll/forgotPassword-reducer.ts","components/forgotPassword/ForgotPassword.tsx","components/login/Login.tsx","components/profile/Profile.tsx","bll/setNewPassword-reducer.ts","components/recoveryPassword/RecoveryPassword.tsx","dal/registration-api.ts","bll/registration-reducer.ts","components/registration/Registration.tsx","components/notFound/NotFound.tsx","components/forgotPassword/CheckEmail.tsx","ui/ui-main/Main.tsx","MyTheme.ts","components/utils/Preloader.tsx","App.tsx","bll/profile-reducer.ts","bll/store.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","process","withCredentials","authApi","data","post","delete","authAPI","initialState","status","setAppStatusAC","type","isAuth","user","_id","email","name","avatar","publicCardPacksCount","created","Date","updated","isAdmin","verified","rememberMe","error","LOGIN","SETUSER","SetIsLoggedIn","SetUserAC","Header","dispatch","useDispatch","useSelector","state","login","className","to","Button","color","onClick","res","restorePasswordApi","IsRequestNewPasswordSent","message","IS_REQUEST_NEW_PASSWORD_SENT","SET_REQUEST_MESSAGE","setRequestMessage","requestForgotPasswordTC","from","success","catch","response","ForgotPassword","React","memo","isEmailRequestSend","forgot","responseError","useState","setEmail","history","useNavigate","formik","useFormik","initialValues","validate","values","errors","test","onSubmit","resetForm","Grid","container","justifyContent","item","handleSubmit","FormControl","FormLabel","Box","component","sx","marginTop","marginBottom","style","textAlign","FormGroup","direction","alignItems","TextField","label","margin","placeholder","getFieldProps","touched","variant","Login","password","err","padding","value","onChange","handleChange","onBlur","handleBlur","Link","RouterLink","Profile","src","isNewPasswordSet","SET_NEW_PASSWORD","RecoveryPassword","isNewPasswordSend","newPassword","token","useParams","length","resetPasswordToken","info","isPasswordSet","Container","maxWidth","background","height","borderRadius","spacing","display","flexDirection","width","id","alignSelf","boxShadow","registrationAPI","isRegistered","Registration","confirmPassword","alert","Main","CheckEmail","path","element","NotFound","createTheme","palette","primary","main","contrastText","secondary","Preloader","position","top","CircularProgress","App","isLoading","app","useEffect","finally","theme","MyTheme","rootReducer","combineReducers","action","registration","profile","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.48bb153a.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios, { AxiosResponse } from 'axios'\r\n\r\n\r\nexport type LoginParamsType={\r\n    email:string\r\n    password: string\r\n}\r\n\r\nconst instance = axios.create({\r\n    // baseURL: \"https://neko-back.herokuapp.com/2.0\",\r\n    baseURL: process.env.REACT_APP_API_PATH,\r\n    withCredentials: true,\r\n})\r\n\r\nexport const authApi = {\r\n    logIn(data:LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseUserType>>('/auth/login',data)\r\n    },\r\n    logOut(){\r\n        return instance.delete('/auth/me')\r\n    }\r\n}\r\n\r\nexport type ResponseUserType = {\r\n    _id:string\r\n    email:string\r\n    name:string\r\n    avatar?:string\r\n    publicCardPacksCount: number\r\n    created: Date\r\n    updated: Date\r\n    isAdmin: boolean\r\n    verified: boolean\r\n    rememberMe: boolean\r\n    error?: string\r\n}\r\n","import axios, {AxiosResponse} from \"axios\"\r\n\r\nconst instance = axios.create({\r\n    // baseURL: \"https://neko-back.herokuapp.com/2.0\",\r\n    baseURL: process.env.REACT_APP_API_PATH,\r\n    withCredentials: true,\r\n})\r\n\r\n\r\nexport const authAPI = {\r\n    me(){\r\n        return instance.post('auth/me')\r\n    }\r\n}\r\n","import {authAPI} from \"../dal/initialize-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {SetIsLoggedIn, SetUserAC} from \"./login-reducer\";\r\n\r\nconst initialState = {\r\n    status: \"idle\" as RequestStatusType\r\n};\r\n\r\nexport type AppInitialStateType = typeof initialState;\r\n\r\n//Reducer\r\nexport const appReducer = (state = initialState, action: any): AppInitialStateType => {\r\n    switch (action.type) {\r\n        case \"APP/SET-STATUS\":\r\n            return {...state, status: action.status}\r\n\r\n        default:\r\n            return {...state}\r\n    }\r\n};\r\n\r\n\r\n// Action Creators\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: \"APP/SET-STATUS\", status} as const)\r\nexport const setIsInitializedAC = (isInitialazed: boolean) => ({type: \"APP/INITIALAZE\", isInitialazed} as const)\r\n\r\n//thunks\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.me()\r\n        .then(res => {\r\n            dispatch(SetIsLoggedIn(true))\r\n            dispatch(SetUserAC(res.data))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n            debugger\r\n    })\r\n        .catch(()=> {\r\n            dispatch(setAppStatusAC(\"failed\"))\r\n        }).finally(()=>{\r\n        // dispatch(setIsInitializedAC(true))\r\n    })\r\n}\r\n\r\n\r\n//types\r\nexport type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\"\r\n\r\n\r\ntype ActionsType =\r\n    | SetAppStatusActionType\r\n    | SetAppInitialazeActionType\r\n\r\n\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppInitialazeActionType = ReturnType<typeof setIsInitializedAC>\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authApi, LoginParamsType, ResponseUserType} from \"../dal/authApi\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\n\r\nlet initialState:LoginInitialStateType = {\r\n    isAuth: false,\r\n    user: {\r\n        _id:'',\r\n        email:'',\r\n        name:'',\r\n        avatar:'',\r\n        publicCardPacksCount: 0,\r\n        created: new Date,\r\n        updated: new Date,\r\n        isAdmin: false,\r\n        verified: false,\r\n        rememberMe: false,\r\n        error: ''\r\n    }\r\n};\r\n\r\nexport type LoginInitialStateType = {\r\n    isAuth: boolean\r\n    user: ResponseUserType\r\n}\r\n\r\n//Reducer\r\nexport const loginReducer = (state:LoginInitialStateType = initialState, action: ActionsTypes): LoginInitialStateType => {\r\n    switch (action.type) {\r\n        case LOGIN:\r\n            return {\r\n                ...state,\r\n                isAuth: action.isAuth,\r\n            }\r\n        case SETUSER:\r\n            return {\r\n                ...state,\r\n                user: action.data\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// actions\r\nconst LOGIN = 'card-learning/login/LOG-IN';\r\nconst SETUSER = 'card-learning/login/SET-USER';\r\n\r\n// Action Creators\r\nexport const SetIsLoggedIn = (isAuth: boolean) => ({\r\n    type: LOGIN,\r\n    isAuth,\r\n} as const);\r\n\r\nexport const SetUserAC = (data:ResponseUserType) => ({\r\n    type: SETUSER,\r\n    data,\r\n} as const);\r\n\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    authApi.logIn(data)\r\n        .then(res => {\r\n            dispatch(SetIsLoggedIn(true))\r\n            dispatch(SetUserAC(res.data))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n        .catch(err => {\r\n            dispatch(setAppStatusAC(\"failed\"))\r\n            // console.log({...err})\r\n            // const error = err.res ?\r\n            //     err.res.data.error :\r\n            //     (err.message + ', more details in the console')\r\n        })\r\n}\r\n\r\nexport const logOutTC=()=>(dispatch: Dispatch)=>{\r\n     authApi.logOut()\r\n        .then(res => {\r\n            dispatch(SetIsLoggedIn(false))\r\n            dispatch(SetUserAC(res.data))\r\n        })}\r\n\r\n\r\nexport type SetUserType = ReturnType<typeof SetUserAC>\r\nexport type SetIsLoggedInType = ReturnType<typeof SetIsLoggedIn>;\r\ntype ActionsTypes = SetIsLoggedInType | SetUserType\r\n","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {logOutTC} from \"../../bll/login-reducer\";\r\n\r\nconst Header = () => {\r\n    const dispatch = useDispatch()\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.login.isAuth)\r\n    function handleLogout() {\r\n        dispatch(logOutTC())\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={\"header\"}>\r\n            <NavLink to=\"/login\">Login</NavLink>\r\n            <NavLink to=\"/forgot-password\">Forgot Password</NavLink>\r\n            <NavLink to=\"/recovery-password\">Recovery Password</NavLink>\r\n            <NavLink to=\"/profile\">Profile</NavLink>\r\n            <NavLink to=\"/registration\">Registration</NavLink>\r\n            {isAuth && <Button color='inherit' onClick={handleLogout}>Logout</Button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    // baseURL: \"https://neko-back.herokuapp.com/2.0\",\r\n    baseURL: process.env.REACT_APP_API_PATH,\r\n    withCredentials: true\r\n});\r\n\r\nexport const restorePasswordApi = {\r\n\r\n    requestForgotPassword(data: ForgotRequestDataType) {\r\n        return instance.post<CheckEmailResponseType>('auth/forgot', data )\r\n    },\r\n    setNewPassword(data: NewPasswordRequestType) {\r\n        return instance.post<NewPasswordResponseType>('auth/set-new-password', data)\r\n    }\r\n}\r\n\r\nexport type ForgotRequestDataType = {\r\n    email: string\r\n    from: string\r\n    message: string\r\n}\r\n\r\nexport type CheckEmailResponseType = {\r\n    info: string | null\r\n    answer: boolean\r\n    html: boolean\r\n    success: boolean\r\n}\r\n\r\nexport type NewPasswordRequestType = {\r\n    password: string\r\n    resetPasswordToken: string\r\n}\r\n\r\nexport type NewPasswordResponseType = {\r\n    info: string\r\n    error: string\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {restorePasswordApi} from \"../dal/restorePasswordApi\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\n\r\nlet initialState = {\r\n    IsRequestNewPasswordSent: false,\r\n    message: null as string | null\r\n\r\n};\r\n\r\nexport type LoginInitialStateType = typeof initialState;\r\n\r\n//Reducer\r\nexport const forgotPasswordReducer = (state = initialState, action: ActionTypes): LoginInitialStateType => {\r\n    switch (action.type) {\r\n        case IS_REQUEST_NEW_PASSWORD_SENT :\r\n            return {...state, IsRequestNewPasswordSent: action.IsRequestNewPasswordSent}\r\n        case SET_REQUEST_MESSAGE:\r\n            return {...state, message: action.message}\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// actions\r\nconst IS_REQUEST_NEW_PASSWORD_SENT = 'card-learning/forgot/IS_REQUEST_NEW_PASSWORD_SENT';\r\nconst SET_REQUEST_MESSAGE = 'card-learning/forgot/SET_MESSAGE';\r\n\r\n// action Creators\r\nexport const checkIsRequestNewPasswordSent = (IsRequestNewPasswordSent: boolean) => ({\r\n    type: IS_REQUEST_NEW_PASSWORD_SENT,\r\n    IsRequestNewPasswordSent\r\n} as const);\r\nexport const setRequestMessage = (message: string | null) => ({type: SET_REQUEST_MESSAGE, message} as const);\r\n\r\n//thunks\r\nexport const requestForgotPasswordTC = (email: string, from: string, message: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    restorePasswordApi.requestForgotPassword({email, from, message})\r\n        .then(res => {\r\n                if (res.data.success) {\r\n                    dispatch(checkIsRequestNewPasswordSent(true))\r\n                    dispatch(setRequestMessage(\"Check your email please\"))\r\n                } else {\r\n                    dispatch(setRequestMessage(\"Something went wrong\"))\r\n                }\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            }\r\n        )\r\n        .catch(error => {\r\n            dispatch(setRequestMessage(error.response ? error.response.data.error : error.message + \"more details in the console\"));\r\n            dispatch(setAppStatusAC(\"failed\"))\r\n        })\r\n\r\n\r\n}\r\n\r\n\r\n// type ActionsTypes =\r\nexport type CheckIsRequestNewPasswordSentType = ReturnType<typeof checkIsRequestNewPasswordSent>;\r\nexport type SetRequestMessageType = ReturnType<typeof setRequestMessage>;\r\nexport type ActionTypes = CheckIsRequestNewPasswordSentType | SetRequestMessageType;\r\n","import React, {useState} from \"react\";\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {Navigate, useNavigate} from \"react-router-dom\";\r\nimport {requestForgotPasswordTC} from \"../../bll/forgotPassword-reducer\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\ntype ForgotProps = {}\r\ntype FormikErrorType = {\r\n    email?: string\r\n}\r\n\r\nconst ForgotPassword: React.FC<ForgotProps> = React.memo(() => {\r\n\r\n    const isEmailRequestSend = useSelector<AppStateType, boolean>(state => state.forgot.IsRequestNewPasswordSent);\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.login.isAuth)\r\n    const responseError = useSelector<AppStateType, string | null>(state => state.forgot.message)\r\n    const dispatch = useDispatch();\r\n    const [email, setEmail] = useState(\"\")\r\n\r\n\r\n    const message =\r\n        `<div style=\"background-color: lime; padding: 15px\">\r\n            password recovery link:\r\n            <a href=\"https://yauhendavidovich.github.io/card-learning/#/recovery-password/$token$\">link</a> \r\n          </div>`\r\n\r\n    const history = useNavigate();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Please type your email!\";\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\";\r\n            }\r\n            return errors;\r\n\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(requestForgotPasswordTC(values.email, \"davidovich336@gmail.com\", message))\r\n            setEmail(\"/check-email/\" + values.email)\r\n            formik.resetForm()\r\n        },\r\n    });\r\n\r\n\r\n    if (isAuth) {\r\n        return <Navigate to={\"/profile\"}/>\r\n    }\r\n\r\n\r\n    if (isEmailRequestSend) {\r\n        return <Navigate to={email}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={\"main\"}>\r\n            <div className=\"mainBlock\">\r\n                <Grid container justifyContent={\"center\"}>\r\n                    <Grid item justifyContent={\"center\"}>\r\n                        <form onSubmit={formik.handleSubmit}>\r\n                            <FormControl>\r\n                                <FormLabel>\r\n                                    <Box component=\"span\" sx={{marginTop: \"20px\", marginBottom: \"10px\"}}>\r\n                                        <h2 style={{textAlign: \"center\"}}>Forgot your password?</h2>\r\n                                    </Box>\r\n                                </FormLabel>\r\n\r\n                                <FormGroup>\r\n                                    <Grid container justifyContent={\"space-between\"} direction={\"column\"}\r\n                                          alignItems={\"center\"}>\r\n                                        <TextField type=\"email\" label=\"Email\"\r\n                                                   margin=\"normal\"\r\n                                                   color={\"primary\"}\r\n                                                   placeholder={\"Email\"}\r\n                                                   {...formik.getFieldProps(\"email\")}\r\n                                        />\r\n                                        {formik.touched.email && formik.errors.email &&\r\n                                        <div style={{color: \"red\"}}>{formik.errors.email}</div>}\r\n                                        {responseError && <div style={{color: \"red\"}}>{responseError}</div>}\r\n\r\n                                        <Grid container justifyContent={\"center\"}>\r\n                                            <Grid item justifyContent={\"center\"}>\r\n                                                <h4>Enter your email address and we will send you further\r\n                                                    instructions</h4>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Button variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                type=\"submit\"\r\n                                            // disabled={forgotStatus === \"loading\"}\r\n                                        >Send Instructions</Button>\r\n                                        <Box>\r\n                                            <h4>Did you remember your password?</h4>\r\n                                        </Box>\r\n                                        <Button variant=\"contained\"\r\n                                                color=\"secondary\"\r\n                                            // disabled={forgotStatus === \"loading\"}\r\n                                                onClick={() => {\r\n                                                    history(\"/login\")\r\n                                                }}>Try logging in\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </FormGroup>\r\n                            </FormControl>\r\n                        </form>\r\n\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\n\r\nexport default ForgotPassword;\r\n;\r\n","import {useFormik} from 'formik';\r\nimport React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport Grid from '@mui/material/Grid';\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from '@material-ui/core/Button';\r\nimport {Link as RouterLink, Navigate, useNavigate} from 'react-router-dom';\r\nimport {loginTC} from \"../../bll/login-reducer\";\r\nimport {Link} from \"@material-ui/core\";\r\n\r\n\r\nconst Login = () => {\r\n    const history = useNavigate()\r\n    const dispatch = useDispatch()\r\n    const isAuth = useSelector<AppStateType>(state => state.login.isAuth)\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'required fill';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'password must have'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        }\r\n    });\r\n    if (isAuth) {\r\n        return <Navigate to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <div className='main'>\r\n            <div className='mainBlock'>\r\n                <Grid container justifyContent={\"center\"}>\r\n                    <Grid item justifyContent={\"center\"}>\r\n                        <form onSubmit={formik.handleSubmit}>\r\n                            <FormControl>\r\n                                <FormLabel>\r\n                                    <h2 style={{padding: '20px'}}>SIGN-IN</h2>\r\n                                </FormLabel>\r\n                                <FormGroup>\r\n                                    <Grid container justifyContent={\"center\"} direction={\"column\"}>\r\n\r\n                                        <TextField label='Email'\r\n                                                   margin='normal'\r\n                                                   {...formik.getFieldProps('email')}\r\n                                                   value={formik.values.email}\r\n                                                   onChange={formik.handleChange}\r\n                                                   onBlur={formik.handleBlur}/>\r\n                                        {formik.touched.email && formik.errors.email\r\n                                            ? <div style={{color: 'red'}}>\r\n                                                {formik.errors.email}\r\n                                            </div> : null}\r\n                                        <TextField type='password'\r\n                                                   label='Password'\r\n                                                   margin='normal'\r\n                                                   {...formik.getFieldProps('password')}\r\n                                                   value={formik.values.password}\r\n                                                   onChange={formik.handleChange}\r\n                                                   onBlur={formik.handleBlur}/>\r\n                                        {formik.touched.password && formik.errors.password\r\n                                            ? <div style={{color: 'red'}}>\r\n                                                {formik.errors.password}\r\n                                            </div>\r\n                                            : null}\r\n                                        <Link component={RouterLink} to=\"/forgot-password\" color=\"secondary\">\r\n                                            {'Forgot Password'}\r\n                                        </Link>\r\n                                        <Button color={'primary'}\r\n                                                type={'submit'}\r\n                                                variant={'contained'}>\r\n\r\n                                            Login\r\n                                        </Button>\r\n                                        <div> Don`t have an account?</div>\r\n                                        <Button onClick={() => {\r\n                                            history('/registration')\r\n                                        }}\r\n                                                variant={'contained'}\r\n                                                color={'secondary'}\r\n                                        >Sign Up</Button>\r\n                                    </Grid>\r\n                                </FormGroup>\r\n                            </FormControl>\r\n                        </form>\r\n\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\nimport {ResponseUserType} from \"../../dal/authApi\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\n\r\nconst Profile = () => {\r\n    const user = useSelector<AppStateType, ResponseUserType>(state => state.login.user)\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.login.isAuth)\r\n\r\n    if (!isAuth) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div> {user ? <div>\r\n            <img src={user.avatar}/>{user.name}\r\n        </div> : ''}</div>\r\n    )\r\n}\r\n\r\nexport default Profile\r\n","import {Dispatch} from \"redux\";\r\nimport {restorePasswordApi} from \"../dal/restorePasswordApi\";\r\nimport {Params} from \"react-router-dom\";\r\n\r\nconst initialState = {\r\n    isNewPasswordSet: false,\r\n    message: null as string | null\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n//reducer\r\nexport const setNewPasswordReducer = (state: InitialStateType = initialState, action: ActionTypes): InitialStateType => {\r\n    switch(action.type) {\r\n        case SET_NEW_PASSWORD:\r\n            return {...state, isNewPasswordSet: action.isPasswordSet}\r\n        case SET_REQUEST_MESSAGE:\r\n            return {...state, message: action.message}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// actions\r\nconst  SET_NEW_PASSWORD  = \"card-learning/newPassword/SET_NEW_PASSWORD\";\r\nconst SET_REQUEST_MESSAGE   = 'card-learning/newPassword/SET_MESSAGE';\r\n\r\n//action creators\r\nexport const setNewPassword = (isPasswordSet: boolean) => ({ type: \"card-learning/newPassword/SET_NEW_PASSWORD\", isPasswordSet } as const);\r\nexport const setRequestMessage = (message: string | null) => ({ type: SET_REQUEST_MESSAGE , message } as const);\r\n//thunk\r\nexport const setNewPasswordTC = (password: string, resetPasswordToken: string) => (dispatch: Dispatch) => {\r\n    restorePasswordApi.setNewPassword({ password, resetPasswordToken })\r\n        .then(res => {\r\n            if(res.data.info) {\r\n                dispatch(setNewPassword(true))\r\n            } else if(res.data.error) {\r\n                dispatch(setRequestMessage(res.data.error))\r\n            } else {\r\n                dispatch(setRequestMessage(\"Some error occurred!\"))\r\n            }\r\n        })\r\n        .catch(error => {\r\n            dispatch(setRequestMessage(error.message ? error.message :\"Network error occurred!\"));\r\n        })\r\n}\r\n\r\n//action types\r\nexport type SetNewPasswordType = ReturnType<typeof setNewPassword>;\r\ntype SetRequestMessageType = ReturnType<typeof setRequestMessage>;\r\nexport type ActionTypes = SetRequestMessageType | SetNewPasswordType;\r\n","import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport {Navigate, useParams} from \"react-router-dom\";\r\nimport {useFormik} from \"formik\";\r\nimport {setNewPasswordTC} from \"../../bll/setNewPassword-reducer\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from '@material-ui/core/Box';\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Container from '@material-ui/core/Container';\r\nimport Button from '@material-ui/core/Button';\r\n\r\ntype RecoveryProps = {}\r\ntype FormikErrorType = {\r\n    password?: string\r\n}\r\n\r\nconst RecoveryPassword: React.FC<RecoveryProps> = React.memo(() => {\r\n\r\n    const isNewPasswordSend = useSelector<AppStateType, boolean>(state => state.newPassword.isNewPasswordSet);\r\n    const responseError = useSelector<AppStateType, string | null>(state => state.newPassword.message)\r\n    const dispatch = useDispatch();\r\n\r\n    const { token } = useParams() as {\r\n        token: string;\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if(!values.password) {\r\n                errors.password = 'Please type new password';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Must be 8 characters or more';\r\n            }\r\n            return errors;\r\n\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(setNewPasswordTC(values.password, token ))\r\n            formik.resetForm()\r\n        },\r\n    });\r\n\r\n    if(isNewPasswordSend) {\r\n        return <Navigate to='/login' />\r\n    }\r\n    return <div className={\"main\"}>\r\n        <Container maxWidth=\"sm\" style={{background: \"#F9F9FE\", height: \"50vh\", borderRadius: \"8px\"}}>\r\n            <Grid container spacing={3}>\r\n                <Grid item style={{\r\n                    marginTop: \"20px\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    justifyContent: 'center',\r\n                    alignItems: \"center\"\r\n                }}>\r\n                    <form onSubmit={formik.handleSubmit} style={{\r\n                        display: \"flex\",\r\n                        flexDirection: \"column\",\r\n                        justifyContent: \"center\"\r\n                    }}>\r\n                        <Box component=\"span\" sx={{marginTop: \"20px\", marginBottom: \"20px\"}}>\r\n                            <h2 style={{textAlign: 'center'}}>Create new password</h2>\r\n                        </Box>\r\n                        <Box component=\"span\" display=\"block\">\r\n                            <TextField\r\n                                variant={\"outlined\"}\r\n                                style={{marginTop: \"20px\", width: \"100%\"}}\r\n                                id={\"outlined-basic\"}\r\n                                type={\"password\"}\r\n                                color={\"primary\"}\r\n                                placeholder={\"password\"}\r\n                                {...formik.getFieldProps(\"password\")}\r\n                            />\r\n                            {formik.touched.password && formik.errors.password && <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                            {responseError &&  <div style={{color: 'red'}}>{responseError}</div>}\r\n                        </Box>\r\n                        <Box>\r\n                            <h4>Create new password and we will send you further instructions to email</h4>\r\n                        </Box>\r\n                        <Button variant=\"contained\"\r\n                                color=\"primary\"\r\n                                type=\"submit\"\r\n                                style={{\r\n                                    borderRadius: \"30px\",\r\n                                    background: \"#73926C\",\r\n                                    marginTop: \"30px\",\r\n                                    alignSelf: 'center',\r\n                                    boxShadow: '0px 4px 18px rgba(33, 38, 143, 0.35), inset 0px 1px 0px rgba(255, 255, 255, 0.3)'\r\n                                }}\r\n                            // disabled={forgotStatus === \"loading\"}\r\n                        >Create new password</Button>\r\n                    </form>\r\n                </Grid>\r\n            </Grid>\r\n        </Container></div>\r\n\r\n});\r\n\r\nexport default RecoveryPassword\r\n","import axios from \"axios\"\r\n\r\n\r\nconst instance = axios.create({\r\n    // baseURL: \"https://neko-back.herokuapp.com/2.0\",\r\n    baseURL: process.env.REACT_APP_API_PATH,\r\n    withCredentials: true,\r\n});\r\n\r\n\r\n\r\nexport const registrationAPI = {\r\n    registration(email:string, password: string) {\r\n        return instance.post(\"auth/register\", {email, password});\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {registrationAPI} from \"../dal/registration-api\";\r\n\r\nlet initialState = {\r\n    isRegistered: false\r\n};\r\n\r\nexport type LoginInitialStateType = typeof initialState;\r\n\r\n//Reducer\r\nexport const registrationReducer = (state = initialState, action: ActionsType): LoginInitialStateType => {\r\n    switch (action.type) {\r\n        case \"REGISTERED\":\r\n            return {...state, isRegistered: action.isRegistered}\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// actions\r\n\r\nconst isRegisteredAC = (isRegistered: boolean) => ({type: \"REGISTERED\", isRegistered})\r\n\r\n//thunks\r\nexport const registrationTC = (email: string, password: string) => (dispatch: Dispatch) => {\r\n    registrationAPI.registration(email, password)\r\n        .then((res)=> {\r\n            dispatch(isRegisteredAC(true))\r\n        })\r\n        .catch((error)=>{\r\n            alert(\"This email is already registered\")\r\n    })\r\n}\r\n\r\n// Action Creators\r\n//types\r\n\r\n// type ActionsTypes =\r\ntype ActionsType = ReturnType<typeof isRegisteredAC>","import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {registrationTC} from \"../../bll/registration-reducer\";\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    confirmPassword?: string\r\n}\r\n\r\nconst Registration = () => {\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.login.isAuth)\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            confirmPassword: \"\",\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Required\";\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\";\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"Required\";\r\n            } else if (values.password.length < 3) {\r\n                errors.password = \"Password must be more than two characters\"\r\n            }\r\n            if (!values.confirmPassword) {\r\n                errors.confirmPassword = \"Required\";\r\n            } else if (values.confirmPassword !== values.password) {\r\n                errors.confirmPassword = \"Passwords must match\"\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(registrationTC(values.email, values.password))\r\n            formik.resetForm()\r\n        },\r\n    });\r\n\r\n    const resetHandler = () => {\r\n        formik.resetForm()\r\n    }\r\n\r\n\r\n    if (isAuth) {\r\n        return <Navigate to={\"/profile\"}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"main\">\r\n            <div className=\"mainBlock\">\r\n                <Grid container justifyContent={\"center\"}>\r\n                    <Grid item justifyContent={\"center\"}>\r\n                        <form onSubmit={formik.handleSubmit}>\r\n                            <FormControl>\r\n                                <FormLabel>\r\n                                    <Grid container justifyContent={\"center\"}>\r\n                                        <Grid item justifyContent={\"center\"}>\r\n                                            <h1>It-incubator</h1>\r\n                                            <Grid container justifyContent={\"center\"}>\r\n                                                <Grid item justifyContent={\"center\"}>\r\n                                                    <h3>Sign up</h3>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n\r\n                                </FormLabel>\r\n                                <FormGroup>\r\n                                    <TextField label=\"Email\"\r\n                                               margin=\"normal\" {...formik.getFieldProps(\"email\")}/>\r\n                                    {formik.touched.email && formik.errors.email &&\r\n                                    <div style={{color: \"red\"}}>{formik.errors.email}</div>}\r\n                                    <TextField type=\"password\" label=\"Password\"\r\n                                               margin=\"normal\" {...formik.getFieldProps(\"password\")}\r\n                                    />\r\n                                    {formik.touched.password && formik.errors.password &&\r\n                                    <div style={{color: \"red\"}}>{formik.errors.password}</div>}\r\n\r\n                                    <TextField type=\"password\" label=\"Confirm password\"\r\n                                               margin=\"normal\" {...formik.getFieldProps(\"confirmPassword\")}\r\n                                    />\r\n                                    {formik.touched.confirmPassword && formik.errors.confirmPassword &&\r\n                                    <div style={{color: \"red\"}}>{formik.errors.confirmPassword}</div>}\r\n                                    <Box>\r\n                                        <Grid container justifyContent={\"space-between\"}>\r\n                                            <Button onClick={resetHandler} variant={\"contained\"}\r\n                                                    color={\"secondary\"}>Cancel</Button>\r\n                                            <Button type={\"submit\"} variant={\"contained\"}\r\n                                                    color={\"primary\"}>Register</Button>\r\n                                        </Grid>\r\n                                    </Box>\r\n                                </FormGroup>\r\n                            </FormControl>\r\n                        </form>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Registration\r\n","import React from \"react\";\r\n\r\nconst Main = () => {\r\n\r\n    return (\r\n        <div className={\"main\"}>Page not found</div>\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport {useNavigate, useParams} from \"react-router-dom\";\r\n\r\n\r\nconst CheckEmail = () => {\r\n    const { email } = useParams() as {\r\n        email: string;\r\n    }\r\n    return (\r\n        <div className={\"main\"}>\r\n            <Container maxWidth=\"sm\" style={{background: \"#F9F9FE\", height: \"50vh\", borderRadius: \"8px\"}}>\r\n                <Grid container direction={\"column\"} justifyContent={\"center\"} alignItems={\"center\"} spacing={3}>\r\n                    <Grid item style={{\r\n                        marginTop: \"20px\",\r\n                        display: \"flex\",\r\n                        flexDirection: \"column\",\r\n                        justifyContent: 'center',\r\n                        alignItems: \"center\"\r\n                    }}>\r\n                        <Box component=\"span\" sx={{marginTop: \"20px\", marginBottom: \"20px\"}}>\r\n                            <h2 style={{textAlign: 'center'}}>Check Email</h2>\r\n                        </Box>\r\n                        <Box>\r\n                            <h4>We’ve sent an Email with instructions to {email}</h4>\r\n                        </Box>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CheckEmail\r\n","import React from 'react';\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport ForgotPassword from \"../../components/forgotPassword/ForgotPassword\";\r\nimport Login from \"../../components/login/Login\";\r\nimport Profile from \"../../components/profile/Profile\";\r\nimport RecoveryPassword from \"../../components/recoveryPassword/RecoveryPassword\";\r\nimport Registration from \"../../components/registration/Registration\";\r\nimport NotFound from \"../../components/notFound/NotFound\";\r\nimport CheckEmail from \"../../components/forgotPassword/CheckEmail\";\r\n\r\nconst Main = () => {\r\n\r\n    return (\r\n        <Routes >\r\n            <Route path='/login' element={<Login/>}/>\r\n            <Route path='/forgot-password' element={<ForgotPassword/>}/>\r\n            <Route path='/profile' element={<Profile/>}/>\r\n            <Route path='/recovery-password/:token' element={<RecoveryPassword/>}/>\r\n            <Route path='/registration' element={<Registration/>}/>\r\n            <Route path='/404' element={<NotFound/>}/>*/\r\n            <Route path='/check-email/:email' element={<CheckEmail/>}/>*/\r\n            <Route path=\"*\" element={<Navigate to=\"/login\" />}/>\r\n        </Routes>\r\n    )\r\n}\r\n\r\nexport default Main;\r\n","import { createTheme } from '@material-ui/core/styles';\r\n\r\nexport default createTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#73926C',\r\n            contrastText: '#fff',\r\n        },\r\n        secondary: {\r\n            main: '#EDA909',\r\n            contrastText: '#fff',\r\n        },\r\n\r\n    }\r\n});\r\n","import React from \"react\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\nconst Preloader = () => {\r\n    return (<div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader\r\n","import React, {useEffect} from \"react\";\r\nimport \"./App.css\";\r\nimport Header from \"./ui/ui-header/Header\";\r\nimport Main from \"./ui/ui-main/Main\";\r\nimport {MuiThemeProvider} from '@material-ui/core/styles';\r\nimport MyTheme from \"./MyTheme\";\r\nimport {initializeAppTC, RequestStatusType} from \"./bll/app-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"./bll/store\";\r\nimport Preloader from \"./components/utils/Preloader\";\r\n\r\nfunction App() {\r\n    const isLoading = useSelector<AppStateType, RequestStatusType>(state => state.app.status)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        debugger\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <MuiThemeProvider theme={MyTheme}>\r\n            <div className={\"App\"}>\r\n                {isLoading === \"loading\" ? <Preloader/>\r\n                    : <>\r\n                        <Header/>\r\n                        <Main/>\r\n                    </>}\r\n            </div>\r\n        </MuiThemeProvider>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","let initialState = {\r\n\r\n};\r\n\r\nexport type LoginInitialStateType = typeof initialState;\r\n\r\n//Reducer\r\nexport const profileReducer = (state = initialState, action: any): LoginInitialStateType => {\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// actions\r\n\r\n\r\n// Action Creators\r\n\r\n// type ActionsTypes =\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from 'redux-thunk';\r\nimport {loginReducer} from \"./login-reducer\";\r\nimport {forgotPasswordReducer} from \"./forgotPassword-reducer\";\r\nimport {setNewPasswordReducer} from \"./setNewPassword-reducer\";\r\nimport {registrationReducer} from \"./registration-reducer\";\r\nimport {profileReducer} from \"./profile-reducer\";\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    login: loginReducer,\r\n    forgot: forgotPasswordReducer,\r\n    newPassword: setNewPasswordReducer,\r\n    registration: registrationReducer,\r\n    profile: profileReducer,\r\n    app: appReducer\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never;\r\nexport type InferActionTypes<T extends { [key: string]: (...args: any) => any }> = ReturnType<PropertiesType<T>>\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\nexport default // @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport App from \"./App\";\r\nimport store from \"./bll/store\";\r\n//comment\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App />\r\n            </Provider>\r\n        </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}